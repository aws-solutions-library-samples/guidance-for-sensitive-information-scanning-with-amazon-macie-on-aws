"use strict";var w=Object.create;var v=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var R=Object.getOwnPropertyNames;var j=Object.getPrototypeOf,J=Object.prototype.hasOwnProperty;var u=(i,e)=>v(i,"name",{value:e,configurable:!0});var O=(i,e)=>{for(var t in e)v(i,t,{get:e[t],enumerable:!0})},B=(i,e,t,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of R(e))!J.call(i,o)&&o!==t&&v(i,o,{get:()=>e[o],enumerable:!(n=x(e,o))||n.enumerable});return i};var P=(i,e,t)=>(t=i!=null?w(j(i)):{},B(e||!i||!i.__esModule?v(t,"default",{value:i,enumerable:!0}):t,i)),V=i=>B(v({},"__esModule",{value:!0}),i);var F={};O(F,{handler:()=>_});module.exports=V(F);var y=require("@aws-sdk/client-macie2"),h=require("@aws-sdk/client-eventbridge");var M=P(require("zlib"));var C=["SCHEDULED_RUN_COMPLETED","JOB_COMPLETED"],N=["NO_BUCKETS_MATCHED_THE_CRITERIA","JOB_CANCELLED"];var E=class{static{u(this,"MacieEventProcessor")}logger;constructor(e){this.logger=e}decodeCloudWatchLogsData(e){try{let t=Buffer.from(e.awslogs.data,"base64"),n=M.gunzipSync(t),o=JSON.parse(n.toString("utf8"));return this.logger.debug("Successfully decoded CloudWatch Logs data",{logGroup:o.logGroup,logStream:o.logStream,eventCount:o.logEvents.length}),o}catch(t){throw this.logger.error("Failed to decode CloudWatch Logs data",t),new Error(`Failed to decode CloudWatch Logs data: ${t}`)}}parseMacieLogEvents(e){let t=[];for(let n of e.logEvents)try{let o=JSON.parse(n.message);this.isRelevantMacieEvent(o)?(t.push(o),this.logger.info("Parsed relevant Macie job event",{eventType:o.eventType,jobId:o.jobId,jobName:o.jobName})):this.logger.debug("Skipping irrelevant Macie event",{eventType:o.eventType})}catch(o){this.logger.error("Failed to parse log event message",o,{logEventId:n.id,message:n.message});continue}return this.logger.info("Parsed Macie log events",{totalLogEvents:e.logEvents.length,relevantMacieEvents:t.length}),t}isRelevantMacieEvent(e){let t=e.eventType;return!!(C.includes(t)||N.includes(t)||t.startsWith("ACCOUNT_")||t.startsWith("BUCKET_"))}classifyEventType(e){return C.includes(e)?"completion":"error"}extractJobId(e){if(!e.jobId)throw new Error("Job ID not found in Macie log event");return e.jobId}validateMacieLogEvent(e){let t=["eventType","jobId","adminAccountId","occuredAt"];for(let n of t)if(!e[n])throw new Error(`Required field '${n}' missing from Macie log event`)}};var m=class{static{u(this,"Logger")}context;constructor(e){this.context=e}info(e,t){let n={level:"INFO",timestamp:new Date().toISOString(),requestId:this.context.requestId,functionName:this.context.functionName,functionVersion:this.context.functionVersion,message:e,data:t?this.sanitizeData(t):void 0};console.log(JSON.stringify(n))}error(e,t,n){let o={level:"ERROR",timestamp:new Date().toISOString(),requestId:this.context.requestId,functionName:this.context.functionName,functionVersion:this.context.functionVersion,message:e,error:t?{name:t.name,message:t.message,stack:t.stack,...t}:void 0,data:n?this.sanitizeData(n):void 0};console.error(JSON.stringify(o))}debug(e,t){let n={level:"DEBUG",timestamp:new Date().toISOString(),requestId:this.context.requestId,functionName:this.context.functionName,functionVersion:this.context.functionVersion,message:e,data:t?this.sanitizeData(t):void 0};console.log(JSON.stringify(n))}logApiRequest(e,t,n){this.info(`${e} API Request: ${t}`,{service:e,operation:t,parameters:this.sanitizeData(n)})}logApiResponse(e,t,n,o){this.info(`${e} API Response: ${t}`,{service:e,operation:t,duration:o?`${o}ms`:void 0,response:this.sanitizeData(n)})}logTiming(e,t){let n=Date.now()-t;this.info(`Operation completed: ${e}`,{operation:e,duration:`${n}ms`})}sanitizeData(e){if(!e)return e;let t=JSON.parse(JSON.stringify(e)),n=["password","secret","token","key","authorization","auth","credential","clientToken"];return this.maskSensitiveFields(t,n)}maskSensitiveFields(e,t){if(typeof e!="object"||e===null)return e;if(Array.isArray(e))return e.map(o=>this.maskSensitiveFields(o,t));let n={};for(let[o,s]of Object.entries(e)){let r=o.toLowerCase();t.some(a=>r.includes(a.toLowerCase()))&&typeof s=="string"?n[o]="***MASKED***":typeof s=="object"?n[o]=this.maskSensitiveFields(s,t):n[o]=s}return n}};var b=require("@aws-sdk/client-eventbridge");var p=class{static{u(this,"EventBridgeValidator")}client;logger;constructor(e,t){this.logger=e,this.client=new b.EventBridgeClient({region:t||process.env.AWS_REGION||"us-east-1"})}validateEventBusArnFormat(e){return/^arn:aws:events:[a-z0-9-]+:\d{12}:event-bus\/[a-zA-Z0-9._-]+$/.test(e)}extractEventBusNameFromArn(e){let t=e.match(/^arn:aws:events:[a-z0-9-]+:\d{12}:event-bus\/(.+)$/);return t?t[1]:null}async validateEventBusExists(e){try{this.logger.info("Validating EventBus existence",{eventBusName:e});let t=new b.DescribeEventBusCommand({Name:e}),n=await this.client.send(t);return n.Name?(this.logger.info("EventBus validation successful",{eventBusName:n.Name,eventBusArn:n.Arn}),{isValid:!0,eventBusName:n.Name}):{isValid:!1,error:"EventBus response missing name"}}catch(t){return this.logger.error("EventBus validation failed",t,{eventBusName:e}),{isValid:!1,error:t.message||"Failed to validate EventBus"}}}findEventBusArnTag(e){if(!e)return null;let t="jobstatuseventbusarn";for(let[n,o]of Object.entries(e))if(n.toLowerCase()===t)return o;return null}async validateEventBusArn(e){if(!this.validateEventBusArnFormat(e))return{isValid:!1,error:"Invalid EventBridge ARN format. Expected: arn:aws:events:region:account:event-bus/name"};let t=this.extractEventBusNameFromArn(e);return t?await this.validateEventBusExists(t):{isValid:!1,error:"Could not extract EventBus name from ARN"}}};var _=u(async(i,e)=>{let t=Date.now(),n=new m({requestId:e.awsRequestId,functionName:e.functionName,functionVersion:e.functionVersion});n.info("Lambda function started",{functionName:e.functionName,functionVersion:e.functionVersion,remainingTimeInMillis:e.getRemainingTimeInMillis()});try{n.info("Decoding CloudWatch Logs data");let o=new E(n),s=o.decodeCloudWatchLogsData(i);n.info("Parsing Macie job log events");let r=o.parseMacieLogEvents(s);if(r.length===0){n.info("No relevant Macie events found, exiting");return}n.info("Initializing AWS clients");let d=new y.Macie2Client({region:process.env.AWS_REGION||"us-east-1"}),a=new h.EventBridgeClient({region:process.env.AWS_REGION||"us-east-1"}),c=new p(n);n.info("Processing Macie events",{eventCount:r.length});for(let g of r)await W(g,d,a,c,o,n);n.logTiming("ProcessMacieJobStatus Lambda execution",t),n.info("Successfully processed all Macie events")}catch(o){throw n.error("Unexpected error in Lambda execution",o),o}},"handler");async function W(i,e,t,n,o,s){let r=i.jobId;s.info("Processing Macie event",{eventType:i.eventType,jobId:r,jobName:i.jobName});try{s.info("Retrieving Macie job details",{jobId:r});let d=Date.now(),a;try{let f=new y.DescribeClassificationJobCommand({jobId:r}),L=await e.send(f);a=L,s.logApiResponse("Macie2","DescribeClassificationJob",L,Date.now()-d)}catch(f){throw s.error("Macie API call failed - failing execution",f,{jobId:r,eventType:i.eventType}),new Error(`Failed to retrieve Macie job details for ${r}: ${f.message}`)}let c=n.findEventBusArnTag(a.tags);if(!c){s.error("JobStatusEventBusArn tag not found in Macie job",void 0,{jobId:r,availableTags:a.tags?Object.keys(a.tags):[]});return}s.info("Found JobStatusEventBusArn tag",{jobId:r,eventBusArn:c});let g=await n.validateEventBusArn(c);if(!g.isValid){s.error("EventBus validation failed",void 0,{jobId:r,eventBusArn:c,validationError:g.error});return}s.info("EventBus validation successful",{jobId:r,eventBusArn:c,eventBusName:g.eventBusName});let T=o.classifyEventType(i.eventType),S={...i,jobDetails:{jobArn:a.jobArn||"",name:a.name||"",description:a.description,s3JobDefinition:a.s3JobDefinition,statistics:a.statistics,tags:a.tags},eventCategory:T,processedAt:new Date().toISOString()};s.info("Publishing event to EventBridge",{jobId:r,eventBusArn:c,eventType:i.eventType,eventCategory:T});let I=n.extractEventBusNameFromArn(c),A=new h.PutEventsCommand({Entries:[{Source:"macie.job.status",DetailType:"Macie Job Status Change",Detail:JSON.stringify(S),EventBusName:I}]}),D=Date.now(),l=await t.send(A);if(s.logApiResponse("EventBridge","PutEvents",l,Date.now()-D),l.FailedEntryCount&&l.FailedEntryCount>0)throw s.error("EventBridge publish had failed entries",void 0,{jobId:r,failedEntryCount:l.FailedEntryCount,entries:l.Entries}),new Error(`Failed to publish event to EventBridge for job ${r}`);s.info("Successfully published event to EventBridge",{jobId:r,eventBusArn:c,eventId:l.Entries?.[0]?.EventId})}catch(d){throw s.error("Error processing Macie event",d,{jobId:r,eventType:i.eventType}),d}}u(W,"processMacieEvent");0&&(module.exports={handler});
//# sourceMappingURL=index.js.map
