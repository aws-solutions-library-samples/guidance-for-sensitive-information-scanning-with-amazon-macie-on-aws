{
  "version": 3,
  "sources": ["../../lib/lambda/get-macie-findings/index.ts", "../../lib/lambda/get-macie-findings/utils/findings-retriever.ts", "../../lib/lambda/shared/utils/logger.ts", "../../lib/lambda/shared/utils/error-handler.ts"],
  "sourcesContent": ["import { Context, APIGatewayProxyResult } from 'aws-lambda';\nimport { \n  GetFindingsAPIEvent,\n  GetFindingsRequest,\n  GetFindingsResponse,\n  GetFindingsErrorResponse\n} from './types/api-gateway-event';\nimport { MacieFindingsRetriever } from './utils/findings-retriever';\nimport { Logger } from '../shared/utils/logger';\nimport { ErrorHandler } from '../shared/utils/error-handler';\n\n/**\n * AWS Lambda handler for retrieving Macie job findings via API Gateway\n */\nexport const handler = async (\n  event: GetFindingsAPIEvent,\n  context: Context\n): Promise<APIGatewayProxyResult> => {\n  const startTime = Date.now();\n  \n  // Initialize logger with context\n  const logger = new Logger({\n    requestId: context.awsRequestId,\n    functionName: context.functionName,\n    functionVersion: context.functionVersion\n  });\n\n  // Initialize error handler\n  const errorHandler = new ErrorHandler(logger, context);\n\n  logger.info('Lambda function started', {\n    functionName: context.functionName,\n    functionVersion: context.functionVersion,\n    remainingTimeInMillis: context.getRemainingTimeInMillis(),\n    eventType: 'API Gateway'\n  });\n\n  try {\n    return await handleAPIGatewayEvent(event, context, logger, errorHandler, startTime);\n  } catch (error: any) {\n    logger.error('Unexpected error in Lambda execution', error);\n    return createAPIGatewayErrorResponse(500, 'Internal Server Error', error.message, context.awsRequestId);\n  }\n};\n\n/**\n * Handle API Gateway GET /get-findings requests\n */\nasync function handleAPIGatewayEvent(\n  event: GetFindingsAPIEvent,\n  context: Context,\n  logger: Logger,\n  errorHandler: ErrorHandler,\n  startTime: number\n): Promise<APIGatewayProxyResult> {\n  \n  logger.info('Processing API Gateway request', {\n    httpMethod: event.httpMethod,\n    resource: event.resource,\n    path: event.path\n  });\n\n  // Step 1: Validate and parse request parameters\n  const request = parseAPIGatewayRequest(event);\n  if (!request.success) {\n    const errorMessage = (request as { success: false; error: string }).error;\n    logger.error('Invalid request parameters', { error: errorMessage });\n    return createAPIGatewayErrorResponse(400, 'Bad Request', errorMessage, context.awsRequestId);\n  }\n\n  const { jobId, maxResults = 50, nextToken } = request.data;\n\n  logger.info('Processing findings request', {\n    jobId,\n    maxResults,\n    hasNextToken: !!nextToken\n  });\n\n  // Step 2: Initialize findings retriever\n  logger.info('Initializing Macie findings retriever');\n  const findingsRetriever = new MacieFindingsRetriever(logger);\n\n  // Step 3: Retrieve paginated findings\n  logger.info('Retrieving paginated findings', { jobId, maxResults });\n  const retrievalStartTime = Date.now();\n  \n  let paginatedResult;\n  try {\n    paginatedResult = await findingsRetriever.getFindingsForJobPaginated(jobId, maxResults, nextToken);\n  } catch (macieError: any) {\n    logger.error('Failed to retrieve findings from Macie', macieError, { jobId });\n    return createAPIGatewayErrorResponse(500, 'Macie API Error', macieError.message, context.awsRequestId);\n  }\n\n  const retrievalDuration = Date.now() - retrievalStartTime;\n  \n  logger.info('Successfully retrieved paginated findings', {\n    jobId,\n    findingsReturned: paginatedResult.findings.length,\n    totalFindings: paginatedResult.totalCount,\n    hasNextToken: !!paginatedResult.nextToken,\n    retrievalDuration: `${retrievalDuration}ms`\n  });\n\n  // Step 4: Prepare success response\n  const successResponse: GetFindingsResponse = {\n    success: true,\n    data: {\n      jobId: jobId,\n      findings: paginatedResult.findings,\n      totalFindings: paginatedResult.totalCount,\n      maxResults: maxResults,\n      nextToken: paginatedResult.nextToken,\n      requestId: context.awsRequestId\n    }\n  };\n\n  // Log summary statistics\n  logger.info('Findings retrieval completed', {\n    jobId,\n    findingsReturned: paginatedResult.findings.length,\n    totalFindings: paginatedResult.totalCount,\n    findingsByCategory: paginatedResult.findings.reduce((acc, finding) => {\n      acc[finding.category] = (acc[finding.category] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>),\n    findingsBySeverity: paginatedResult.findings.reduce((acc, finding) => {\n      const severity = finding.severity?.description || 'Unknown';\n      acc[severity] = (acc[severity] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>)\n  });\n\n  // Log total execution time\n  logger.logTiming('GetMacieFindings API execution', startTime);\n\n  return {\n    statusCode: 200,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, X-Amz-Date, Authorization, X-Api-Key, X-Amz-Security-Token'\n    },\n    body: JSON.stringify(successResponse)\n  };\n}\n\n\n/**\n * Parse and validate API Gateway request parameters\n */\nfunction parseAPIGatewayRequest(event: GetFindingsAPIEvent): { success: true; data: GetFindingsRequest } | { success: false; error: string } {\n  const queryParams = event.queryStringParameters;\n  \n  if (!queryParams || !queryParams.jobId) {\n    return { success: false, error: 'Missing required parameter: jobId' };\n  }\n\n  const jobId = queryParams.jobId.trim();\n  if (!jobId) {\n    return { success: false, error: 'jobId parameter cannot be empty' };\n  }\n\n  let maxResults = 50; // Default value\n  if (queryParams.maxResults) {\n    const parsedMaxResults = parseInt(queryParams.maxResults, 10);\n    if (isNaN(parsedMaxResults) || parsedMaxResults < 1 || parsedMaxResults > 50) {\n      return { success: false, error: 'maxResults must be a number between 1 and 50' };\n    }\n    maxResults = parsedMaxResults;\n  }\n\n  const nextToken = queryParams.nextToken || undefined;\n\n  return {\n    success: true,\n    data: {\n      jobId,\n      maxResults,\n      nextToken\n    }\n  };\n}\n\n/**\n * Create standardized API Gateway error response\n */\nfunction createAPIGatewayErrorResponse(\n  statusCode: number,\n  errorType: string,\n  message: string,\n  requestId: string\n): APIGatewayProxyResult {\n  const errorResponse: GetFindingsErrorResponse = {\n    success: false,\n    error: {\n      type: errorType,\n      message: message,\n      requestId: requestId\n    }\n  };\n\n  return {\n    statusCode,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, X-Amz-Date, Authorization, X-Api-Key, X-Amz-Security-Token'\n    },\n    body: JSON.stringify(errorResponse)\n  };\n}\n", "import { Macie2Client, ListFindingsCommand, GetFindingsCommand } from '@aws-sdk/client-macie2';\nimport { MacieFinding, FindingsPaginationParams } from '../types/macie-finding';\nimport { Logger } from '../../shared/utils/logger';\n\n/**\n * Paginated findings result\n */\nexport interface PaginatedFindingsResult {\n  findings: MacieFinding[];\n  nextToken?: string;\n  totalCount: number;\n}\n\n/**\n * Utility class for retrieving Macie findings with pagination\n */\nexport class MacieFindingsRetriever {\n  private client: Macie2Client;\n  private logger: Logger;\n\n  constructor(logger: Logger, region?: string) {\n    this.logger = logger;\n    this.client = new Macie2Client({\n      region: region || process.env.AWS_REGION || 'us-east-1'\n    });\n  }\n\n\n  /**\n   * Transform AWS SDK finding to our interface\n   */\n  private transformFinding(awsFinding: any): MacieFinding {\n    return {\n      id: awsFinding.id || '',\n      accountId: awsFinding.accountId || '',\n      archived: awsFinding.archived || false,\n      category: awsFinding.category || '',\n      classificationDetails: awsFinding.classificationDetails ? {\n        jobArn: awsFinding.classificationDetails.jobArn || '',\n        jobId: awsFinding.classificationDetails.jobId || '',\n        result: awsFinding.classificationDetails.result ? {\n          status: awsFinding.classificationDetails.result.status ? {\n            code: awsFinding.classificationDetails.result.status.code || '',\n            reason: awsFinding.classificationDetails.result.status.reason\n          } : undefined,\n          sensitiveData: awsFinding.classificationDetails.result.sensitiveData?.map((data: any) => ({\n            category: data.category || '',\n            detections: data.detections?.map((detection: any) => ({\n              type: detection.type || '',\n              count: detection.count || 0\n            })) || [],\n            totalCount: data.totalCount || 0\n          })) || []\n        } : undefined\n      } : undefined,\n      count: awsFinding.count || 0,\n      createdAt: awsFinding.createdAt || '',\n      description: awsFinding.description || '',\n      partition: awsFinding.partition || '',\n      region: awsFinding.region || '',\n      resourcesAffected: awsFinding.resourcesAffected ? {\n        s3Bucket: awsFinding.resourcesAffected.s3Bucket ? {\n          arn: awsFinding.resourcesAffected.s3Bucket.arn || '',\n          name: awsFinding.resourcesAffected.s3Bucket.name || '',\n          owner: awsFinding.resourcesAffected.s3Bucket.owner ? {\n            displayName: awsFinding.resourcesAffected.s3Bucket.owner.displayName || '',\n            id: awsFinding.resourcesAffected.s3Bucket.owner.id || ''\n          } : undefined,\n          tags: awsFinding.resourcesAffected.s3Bucket.tags?.map((tag: any) => ({\n            key: tag.key || '',\n            value: tag.value || ''\n          })) || []\n        } : undefined,\n        s3Object: awsFinding.resourcesAffected.s3Object ? {\n          bucketArn: awsFinding.resourcesAffected.s3Object.bucketArn || '',\n          eTag: awsFinding.resourcesAffected.s3Object.eTag || '',\n          key: awsFinding.resourcesAffected.s3Object.key || '',\n          lastModified: awsFinding.resourcesAffected.s3Object.lastModified || '',\n          size: awsFinding.resourcesAffected.s3Object.size || 0,\n          storageClass: awsFinding.resourcesAffected.s3Object.storageClass || '',\n          tags: awsFinding.resourcesAffected.s3Object.tags?.map((tag: any) => ({\n            key: tag.key || '',\n            value: tag.value || ''\n          })) || []\n        } : undefined\n      } : undefined,\n      sample: awsFinding.sample || false,\n      schemaVersion: awsFinding.schemaVersion || '',\n      severity: awsFinding.severity ? {\n        description: awsFinding.severity.description || '',\n        score: awsFinding.severity.score || 0\n      } : undefined,\n      title: awsFinding.title || '',\n      type: awsFinding.type || '',\n      updatedAt: awsFinding.updatedAt || ''\n    };\n  }\n\n  /**\n   * Retrieve findings for a specific Macie job with pagination support\n   */\n  async getFindingsForJobPaginated(\n    jobId: string, \n    maxResults: number = 50, \n    nextToken?: string\n  ): Promise<PaginatedFindingsResult> {\n    this.logger.info('Starting paginated findings retrieval', { \n      jobId,\n      maxResults,\n      hasNextToken: !!nextToken\n    });\n\n    try {\n      // Step 1: List finding IDs for this job with pagination\n      const listStartTime = Date.now();\n      const listCommand = new ListFindingsCommand({\n        findingCriteria: {\n          criterion: {\n            'classificationDetails.jobId': {\n              eq: [jobId]\n            }\n          }\n        },\n        maxResults: Math.min(maxResults, 50), // AWS API maximum is 50\n        nextToken: nextToken\n      });\n\n      const listResponse = await this.client.send(listCommand);\n      const listDuration = Date.now() - listStartTime;\n\n      this.logger.logApiResponse('Macie2', 'ListFindings', listResponse, listDuration);\n\n      if (!listResponse.findingIds || listResponse.findingIds.length === 0) {\n        this.logger.info('No findings found for job', { jobId });\n        \n        return {\n          findings: [],\n          nextToken: undefined,\n          totalCount: 0\n        };\n      }\n\n      // Step 2: Get detailed findings information\n      const getStartTime = Date.now();\n      const getCommand = new GetFindingsCommand({\n        findingIds: listResponse.findingIds\n      });\n\n      const getResponse = await this.client.send(getCommand);\n      const getDuration = Date.now() - getStartTime;\n\n      this.logger.logApiResponse('Macie2', 'GetFindings', getResponse, getDuration);\n\n      // Transform AWS SDK findings to our interface\n      const transformedFindings = getResponse.findings \n        ? getResponse.findings.map(finding => this.transformFinding(finding))\n        : [];\n\n      this.logger.info('Completed paginated findings retrieval', {\n        jobId,\n        findingsReturned: transformedFindings.length,\n        hasNextToken: !!listResponse.nextToken\n      });\n\n      return {\n        findings: transformedFindings,\n        nextToken: listResponse.nextToken,\n        totalCount: transformedFindings.length\n      };\n\n    } catch (error: any) {\n      this.logger.error('Failed to retrieve paginated findings', error, { jobId, maxResults });\n      throw error;\n    }\n  }\n\n}\n", "/**\n * Logger utility for detailed parameter logging in Lambda functions\n */\n\nexport interface LogContext {\n  requestId: string;\n  functionName?: string;\n  functionVersion?: string;\n}\n\nexport class Logger {\n  private context: LogContext;\n\n  constructor(context: LogContext) {\n    this.context = context;\n  }\n\n  /**\n   * Log info level messages with detailed context\n   */\n  info(message: string, data?: any): void {\n    const logEntry = {\n      level: 'INFO',\n      timestamp: new Date().toISOString(),\n      requestId: this.context.requestId,\n      functionName: this.context.functionName,\n      functionVersion: this.context.functionVersion,\n      message,\n      data: data ? this.sanitizeData(data) : undefined\n    };\n    \n    console.log(JSON.stringify(logEntry));\n  }\n\n  /**\n   * Log error level messages with detailed context\n   */\n  error(message: string, error?: Error | any, data?: any): void {\n    const logEntry = {\n      level: 'ERROR',\n      timestamp: new Date().toISOString(),\n      requestId: this.context.requestId,\n      functionName: this.context.functionName,\n      functionVersion: this.context.functionVersion,\n      message,\n      error: error ? {\n        name: error.name,\n        message: error.message,\n        stack: error.stack,\n        ...error\n      } : undefined,\n      data: data ? this.sanitizeData(data) : undefined\n    };\n    \n    console.error(JSON.stringify(logEntry));\n  }\n\n  /**\n   * Log debug level messages with detailed context\n   */\n  debug(message: string, data?: any): void {\n    const logEntry = {\n      level: 'DEBUG',\n      timestamp: new Date().toISOString(),\n      requestId: this.context.requestId,\n      functionName: this.context.functionName,\n      functionVersion: this.context.functionVersion,\n      message,\n      data: data ? this.sanitizeData(data) : undefined\n    };\n    \n    console.log(JSON.stringify(logEntry));\n  }\n\n  /**\n   * Log API request details\n   */\n  logApiRequest(service: string, operation: string, parameters: any): void {\n    this.info(`${service} API Request: ${operation}`, {\n      service,\n      operation,\n      parameters: this.sanitizeData(parameters)\n    });\n  }\n\n  /**\n   * Log API response details\n   */\n  logApiResponse(service: string, operation: string, response: any, duration?: number): void {\n    this.info(`${service} API Response: ${operation}`, {\n      service,\n      operation,\n      duration: duration ? `${duration}ms` : undefined,\n      response: this.sanitizeData(response)\n    });\n  }\n\n  /**\n   * Log execution timing\n   */\n  logTiming(operation: string, startTime: number): void {\n    const duration = Date.now() - startTime;\n    this.info(`Operation completed: ${operation}`, {\n      operation,\n      duration: `${duration}ms`\n    });\n  }\n\n  /**\n   * Sanitize sensitive data for logging\n   * Remove or mask sensitive information\n   */\n  private sanitizeData(data: any): any {\n    if (!data) return data;\n    \n    // Create a deep copy to avoid modifying the original\n    const sanitized = JSON.parse(JSON.stringify(data));\n    \n    // List of sensitive keys to mask\n    const sensitiveKeys = [\n      'password',\n      'secret',\n      'token',\n      'key',\n      'authorization',\n      'auth',\n      'credential',\n      'clientToken'\n    ];\n    \n    return this.maskSensitiveFields(sanitized, sensitiveKeys);\n  }\n\n  /**\n   * Recursively mask sensitive fields in an object\n   */\n  private maskSensitiveFields(obj: any, sensitiveKeys: string[]): any {\n    if (typeof obj !== 'object' || obj === null) {\n      return obj;\n    }\n\n    if (Array.isArray(obj)) {\n      return obj.map(item => this.maskSensitiveFields(item, sensitiveKeys));\n    }\n\n    const result: any = {};\n    for (const [key, value] of Object.entries(obj)) {\n      const lowerKey = key.toLowerCase();\n      const isSensitive = sensitiveKeys.some(sensitiveKey => \n        lowerKey.includes(sensitiveKey.toLowerCase())\n      );\n\n      if (isSensitive && typeof value === 'string') {\n        result[key] = '***MASKED***';\n      } else if (typeof value === 'object') {\n        result[key] = this.maskSensitiveFields(value, sensitiveKeys);\n      } else {\n        result[key] = value;\n      }\n    }\n\n    return result;\n  }\n}\n", "import { Context } from 'aws-lambda';\nimport { Logger } from './logger';\n\n/**\n * Common error handling utilities for Lambda functions\n */\n\nexport interface ErrorDetails {\n  name?: string;\n  message: string;\n  stack?: string;\n  statusCode?: number;\n  requestId?: string;\n  [key: string]: any;\n}\n\nexport interface StandardErrorResponse {\n  success: false;\n  error: {\n    type: string;\n    message: string;\n    details?: any;\n    requestId: string;\n  };\n}\n\nexport class ErrorHandler {\n  private logger: Logger;\n  private context: Context;\n\n  constructor(logger: Logger, context: Context) {\n    this.logger = logger;\n    this.context = context;\n  }\n\n  /**\n   * Handle validation errors\n   */\n  handleValidationError(message: string, receivedData?: any): StandardErrorResponse {\n    this.logger.error('Validation Error', undefined, { receivedData });\n    \n    return {\n      success: false,\n      error: {\n        type: 'ValidationError',\n        message,\n        details: 'The provided input does not conform to the expected schema',\n        requestId: this.context.awsRequestId\n      }\n    };\n  }\n\n  /**\n   * Handle AWS API errors\n   */\n  handleAwsApiError(error: any, service: string, operation: string): StandardErrorResponse {\n    this.logger.error(`${service} API Error`, error, {\n      service,\n      operation,\n      errorCode: error.name,\n      statusCode: error.$metadata?.httpStatusCode,\n      awsRequestId: error.$metadata?.requestId\n    });\n\n    return {\n      success: false,\n      error: {\n        type: error.name || `${service}ApiError`,\n        message: error.message || `Failed to execute ${service} ${operation}`,\n        details: {\n          errorCode: error.name,\n          statusCode: error.$metadata?.httpStatusCode,\n          awsRequestId: error.$metadata?.requestId\n        },\n        requestId: this.context.awsRequestId\n      }\n    };\n  }\n\n  /**\n   * Handle unexpected errors\n   */\n  handleUnexpectedError(error: any): StandardErrorResponse {\n    this.logger.error('Unexpected Error', error);\n    \n    return {\n      success: false,\n      error: {\n        type: 'UnexpectedError',\n        message: error.message || 'An unexpected error occurred',\n        details: {\n          name: error.name,\n          stack: error.stack\n        },\n        requestId: this.context.awsRequestId\n      }\n    };\n  }\n\n  /**\n   * Handle custom application errors\n   */\n  handleCustomError(type: string, message: string, details?: any): StandardErrorResponse {\n    this.logger.error(`Custom Error: ${type}`, undefined, { details });\n    \n    return {\n      success: false,\n      error: {\n        type,\n        message,\n        details,\n        requestId: this.context.awsRequestId\n      }\n    };\n  }\n\n  /**\n   * Handle EventBridge validation errors\n   */\n  handleEventBridgeValidationError(message: string, eventBusArn?: string, validationError?: string): StandardErrorResponse {\n    this.logger.error('EventBridge Validation Error', undefined, { \n      eventBusArn,\n      validationError \n    });\n    \n    return {\n      success: false,\n      error: {\n        type: 'EventBridgeValidationError',\n        message,\n        details: {\n          eventBusArn,\n          validationError,\n          requiredTagKey: 'JobStatusEventBusArn',\n          expectedArnFormat: 'arn:aws:events:region:account:event-bus/name'\n        },\n        requestId: this.context.awsRequestId\n      }\n    };\n  }\n\n  /**\n   * Determine error type and handle appropriately\n   */\n  handleError(error: any, context?: { service?: string; operation?: string }): StandardErrorResponse {\n    // AWS SDK errors\n    if (error.$metadata) {\n      return this.handleAwsApiError(error, context?.service || 'AWS', context?.operation || 'Unknown');\n    }\n\n    // Custom application errors\n    if (error.type && error.message) {\n      return this.handleCustomError(error.type, error.message, error.details);\n    }\n\n    // Default to unexpected error\n    return this.handleUnexpectedError(error);\n  }\n}\n"],
  "mappings": "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",
  "names": ["index_exports", "__export", "handler", "__toCommonJS", "import_client_macie2", "MacieFindingsRetriever", "__name", "logger", "region", "awsFinding", "data", "detection", "tag", "jobId", "maxResults", "nextToken", "listStartTime", "listCommand", "listResponse", "listDuration", "getStartTime", "getCommand", "getResponse", "getDuration", "transformedFindings", "finding", "error", "Logger", "__name", "context", "message", "data", "logEntry", "error", "service", "operation", "parameters", "response", "duration", "startTime", "sanitized", "sensitiveKeys", "obj", "item", "result", "key", "value", "lowerKey", "sensitiveKey", "ErrorHandler", "__name", "logger", "context", "message", "receivedData", "error", "service", "operation", "type", "details", "eventBusArn", "validationError", "handler", "__name", "event", "context", "startTime", "logger", "Logger", "errorHandler", "ErrorHandler", "handleAPIGatewayEvent", "error", "createAPIGatewayErrorResponse", "request", "parseAPIGatewayRequest", "errorMessage", "jobId", "maxResults", "nextToken", "findingsRetriever", "MacieFindingsRetriever", "retrievalStartTime", "paginatedResult", "macieError", "retrievalDuration", "successResponse", "acc", "finding", "severity", "queryParams", "parsedMaxResults", "statusCode", "errorType", "message", "requestId"]
}
