import { Macie2ServiceException as __BaseException } from "./Macie2ServiceException";
export const AdminStatus = {
    DISABLING_IN_PROGRESS: "DISABLING_IN_PROGRESS",
    ENABLED: "ENABLED",
};
export const AutomatedDiscoveryAccountStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const AutomatedDiscoveryAccountUpdateErrorCode = {
    ACCOUNT_NOT_FOUND: "ACCOUNT_NOT_FOUND",
    ACCOUNT_PAUSED: "ACCOUNT_PAUSED",
};
export const AllowsUnencryptedObjectUploads = {
    FALSE: "FALSE",
    TRUE: "TRUE",
    UNKNOWN: "UNKNOWN",
};
export const AutomatedDiscoveryMonitoringStatus = {
    MONITORED: "MONITORED",
    NOT_MONITORED: "NOT_MONITORED",
};
export const BucketMetadataErrorCode = {
    ACCESS_DENIED: "ACCESS_DENIED",
    BUCKET_COUNT_EXCEEDS_QUOTA: "BUCKET_COUNT_EXCEEDS_QUOTA",
};
export const IsDefinedInJob = {
    FALSE: "FALSE",
    TRUE: "TRUE",
    UNKNOWN: "UNKNOWN",
};
export const IsMonitoredByJob = {
    FALSE: "FALSE",
    TRUE: "TRUE",
    UNKNOWN: "UNKNOWN",
};
export const EffectivePermission = {
    NOT_PUBLIC: "NOT_PUBLIC",
    PUBLIC: "PUBLIC",
    UNKNOWN: "UNKNOWN",
};
export const Type = {
    AES256: "AES256",
    NONE: "NONE",
    aws_kms: "aws:kms",
    aws_kms_dsse: "aws:kms:dsse",
};
export const SharedAccess = {
    EXTERNAL: "EXTERNAL",
    INTERNAL: "INTERNAL",
    NOT_SHARED: "NOT_SHARED",
    UNKNOWN: "UNKNOWN",
};
export const JobComparator = {
    CONTAINS: "CONTAINS",
    EQ: "EQ",
    GT: "GT",
    GTE: "GTE",
    LT: "LT",
    LTE: "LTE",
    NE: "NE",
    STARTS_WITH: "STARTS_WITH",
};
export const SimpleCriterionKeyForJob = {
    ACCOUNT_ID: "ACCOUNT_ID",
    S3_BUCKET_EFFECTIVE_PERMISSION: "S3_BUCKET_EFFECTIVE_PERMISSION",
    S3_BUCKET_NAME: "S3_BUCKET_NAME",
    S3_BUCKET_SHARED_ACCESS: "S3_BUCKET_SHARED_ACCESS",
};
export const DataIdentifierType = {
    CUSTOM: "CUSTOM",
    MANAGED: "MANAGED",
};
export const FindingCategory = {
    CLASSIFICATION: "CLASSIFICATION",
    POLICY: "POLICY",
};
export const OriginType = {
    AUTOMATED_SENSITIVE_DATA_DISCOVERY: "AUTOMATED_SENSITIVE_DATA_DISCOVERY",
    SENSITIVE_DATA_DISCOVERY_JOB: "SENSITIVE_DATA_DISCOVERY_JOB",
};
export const SensitiveDataItemCategory = {
    CREDENTIALS: "CREDENTIALS",
    CUSTOM_IDENTIFIER: "CUSTOM_IDENTIFIER",
    FINANCIAL_INFORMATION: "FINANCIAL_INFORMATION",
    PERSONAL_INFORMATION: "PERSONAL_INFORMATION",
};
export const FindingActionType = {
    AWS_API_CALL: "AWS_API_CALL",
};
export const UserIdentityType = {
    AWSAccount: "AWSAccount",
    AWSService: "AWSService",
    AssumedRole: "AssumedRole",
    FederatedUser: "FederatedUser",
    IAMUser: "IAMUser",
    Root: "Root",
};
export const EncryptionType = {
    AES256: "AES256",
    NONE: "NONE",
    UNKNOWN: "UNKNOWN",
    aws_kms: "aws:kms",
    aws_kms_dsse: "aws:kms:dsse",
};
export const StorageClass = {
    DEEP_ARCHIVE: "DEEP_ARCHIVE",
    GLACIER: "GLACIER",
    GLACIER_IR: "GLACIER_IR",
    INTELLIGENT_TIERING: "INTELLIGENT_TIERING",
    ONEZONE_IA: "ONEZONE_IA",
    OUTPOSTS: "OUTPOSTS",
    REDUCED_REDUNDANCY: "REDUCED_REDUNDANCY",
    STANDARD: "STANDARD",
    STANDARD_IA: "STANDARD_IA",
};
export const SeverityDescription = {
    High: "High",
    Low: "Low",
    Medium: "Medium",
};
export const FindingType = {
    Policy_IAMUser_S3BlockPublicAccessDisabled: "Policy:IAMUser/S3BlockPublicAccessDisabled",
    Policy_IAMUser_S3BucketEncryptionDisabled: "Policy:IAMUser/S3BucketEncryptionDisabled",
    Policy_IAMUser_S3BucketPublic: "Policy:IAMUser/S3BucketPublic",
    Policy_IAMUser_S3BucketReplicatedExternally: "Policy:IAMUser/S3BucketReplicatedExternally",
    Policy_IAMUser_S3BucketSharedExternally: "Policy:IAMUser/S3BucketSharedExternally",
    Policy_IAMUser_S3BucketSharedWithCloudFront: "Policy:IAMUser/S3BucketSharedWithCloudFront",
    SensitiveData_S3Object_Credentials: "SensitiveData:S3Object/Credentials",
    SensitiveData_S3Object_CustomIdentifier: "SensitiveData:S3Object/CustomIdentifier",
    SensitiveData_S3Object_Financial: "SensitiveData:S3Object/Financial",
    SensitiveData_S3Object_Multiple: "SensitiveData:S3Object/Multiple",
    SensitiveData_S3Object_Personal: "SensitiveData:S3Object/Personal",
};
export const FindingsFilterAction = {
    ARCHIVE: "ARCHIVE",
    NOOP: "NOOP",
};
export const RelationshipStatus = {
    AccountSuspended: "AccountSuspended",
    Created: "Created",
    EmailVerificationFailed: "EmailVerificationFailed",
    EmailVerificationInProgress: "EmailVerificationInProgress",
    Enabled: "Enabled",
    Invited: "Invited",
    Paused: "Paused",
    RegionDisabled: "RegionDisabled",
    Removed: "Removed",
    Resigned: "Resigned",
};
export const ScopeFilterKey = {
    OBJECT_EXTENSION: "OBJECT_EXTENSION",
    OBJECT_KEY: "OBJECT_KEY",
    OBJECT_LAST_MODIFIED_DATE: "OBJECT_LAST_MODIFIED_DATE",
    OBJECT_SIZE: "OBJECT_SIZE",
};
export const TagTarget = {
    S3_OBJECT: "S3_OBJECT",
};
export const JobStatus = {
    CANCELLED: "CANCELLED",
    COMPLETE: "COMPLETE",
    IDLE: "IDLE",
    PAUSED: "PAUSED",
    RUNNING: "RUNNING",
    USER_PAUSED: "USER_PAUSED",
};
export const JobType = {
    ONE_TIME: "ONE_TIME",
    SCHEDULED: "SCHEDULED",
};
export const LastRunErrorStatusCode = {
    ERROR: "ERROR",
    NONE: "NONE",
};
export const ListJobsFilterKey = {
    createdAt: "createdAt",
    jobStatus: "jobStatus",
    jobType: "jobType",
    name: "name",
};
export const SearchResourcesComparator = {
    EQ: "EQ",
    NE: "NE",
};
export const SearchResourcesSimpleCriterionKey = {
    ACCOUNT_ID: "ACCOUNT_ID",
    AUTOMATED_DISCOVERY_MONITORING_STATUS: "AUTOMATED_DISCOVERY_MONITORING_STATUS",
    S3_BUCKET_EFFECTIVE_PERMISSION: "S3_BUCKET_EFFECTIVE_PERMISSION",
    S3_BUCKET_NAME: "S3_BUCKET_NAME",
    S3_BUCKET_SHARED_ACCESS: "S3_BUCKET_SHARED_ACCESS",
};
export const UnavailabilityReasonCode = {
    ACCOUNT_NOT_IN_ORGANIZATION: "ACCOUNT_NOT_IN_ORGANIZATION",
    INVALID_CLASSIFICATION_RESULT: "INVALID_CLASSIFICATION_RESULT",
    INVALID_RESULT_SIGNATURE: "INVALID_RESULT_SIGNATURE",
    MEMBER_ROLE_TOO_PERMISSIVE: "MEMBER_ROLE_TOO_PERMISSIVE",
    MISSING_GET_MEMBER_PERMISSION: "MISSING_GET_MEMBER_PERMISSION",
    OBJECT_EXCEEDS_SIZE_QUOTA: "OBJECT_EXCEEDS_SIZE_QUOTA",
    OBJECT_UNAVAILABLE: "OBJECT_UNAVAILABLE",
    RESULT_NOT_SIGNED: "RESULT_NOT_SIGNED",
    ROLE_TOO_PERMISSIVE: "ROLE_TOO_PERMISSIVE",
    UNSUPPORTED_FINDING_TYPE: "UNSUPPORTED_FINDING_TYPE",
    UNSUPPORTED_OBJECT_TYPE: "UNSUPPORTED_OBJECT_TYPE",
};
export const ErrorCode = {
    ClientError: "ClientError",
    InternalError: "InternalError",
};
export const Currency = {
    USD: "USD",
};
export const Unit = {
    TERABYTES: "TERABYTES",
};
export const UsageType = {
    AUTOMATED_OBJECT_MONITORING: "AUTOMATED_OBJECT_MONITORING",
    AUTOMATED_SENSITIVE_DATA_DISCOVERY: "AUTOMATED_SENSITIVE_DATA_DISCOVERY",
    DATA_INVENTORY_EVALUATION: "DATA_INVENTORY_EVALUATION",
    SENSITIVE_DATA_DISCOVERY: "SENSITIVE_DATA_DISCOVERY",
};
export const UsageStatisticsFilterComparator = {
    CONTAINS: "CONTAINS",
    EQ: "EQ",
    GT: "GT",
    GTE: "GTE",
    LT: "LT",
    LTE: "LTE",
    NE: "NE",
};
export const UsageStatisticsFilterKey = {
    accountId: "accountId",
    freeTrialStartDate: "freeTrialStartDate",
    serviceLimit: "serviceLimit",
    total: "total",
};
export class AccessDeniedException extends __BaseException {
    name = "AccessDeniedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
    }
}
export class ConflictException extends __BaseException {
    name = "ConflictException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConflictException.prototype);
    }
}
export class InternalServerException extends __BaseException {
    name = "InternalServerException";
    $fault = "server";
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalServerException.prototype);
    }
}
export class ResourceNotFoundException extends __BaseException {
    name = "ResourceNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
export class ServiceQuotaExceededException extends __BaseException {
    name = "ServiceQuotaExceededException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
    }
}
export class ThrottlingException extends __BaseException {
    name = "ThrottlingException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ThrottlingException.prototype);
    }
}
export class ValidationException extends __BaseException {
    name = "ValidationException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ValidationException.prototype);
    }
}
export const AllowListStatusCode = {
    OK: "OK",
    S3_OBJECT_ACCESS_DENIED: "S3_OBJECT_ACCESS_DENIED",
    S3_OBJECT_EMPTY: "S3_OBJECT_EMPTY",
    S3_OBJECT_NOT_FOUND: "S3_OBJECT_NOT_FOUND",
    S3_OBJECT_OVERSIZE: "S3_OBJECT_OVERSIZE",
    S3_THROTTLED: "S3_THROTTLED",
    S3_USER_ACCESS_DENIED: "S3_USER_ACCESS_DENIED",
    UNKNOWN_ERROR: "UNKNOWN_ERROR",
};
export const AutoEnableMode = {
    ALL: "ALL",
    NEW: "NEW",
    NONE: "NONE",
};
export const AutomatedDiscoveryStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const AvailabilityCode = {
    AVAILABLE: "AVAILABLE",
    UNAVAILABLE: "UNAVAILABLE",
};
export const OrderBy = {
    ASC: "ASC",
    DESC: "DESC",
};
export const ClassificationScopeUpdateOperation = {
    ADD: "ADD",
    REMOVE: "REMOVE",
    REPLACE: "REPLACE",
};
export const ManagedDataIdentifierSelector = {
    ALL: "ALL",
    EXCLUDE: "EXCLUDE",
    INCLUDE: "INCLUDE",
    NONE: "NONE",
    RECOMMENDED: "RECOMMENDED",
};
export const DayOfWeek = {
    FRIDAY: "FRIDAY",
    MONDAY: "MONDAY",
    SATURDAY: "SATURDAY",
    SUNDAY: "SUNDAY",
    THURSDAY: "THURSDAY",
    TUESDAY: "TUESDAY",
    WEDNESDAY: "WEDNESDAY",
};
export const DataIdentifierSeverity = {
    HIGH: "HIGH",
    LOW: "LOW",
    MEDIUM: "MEDIUM",
};
export const FindingPublishingFrequency = {
    FIFTEEN_MINUTES: "FIFTEEN_MINUTES",
    ONE_HOUR: "ONE_HOUR",
    SIX_HOURS: "SIX_HOURS",
};
export const MacieStatus = {
    ENABLED: "ENABLED",
    PAUSED: "PAUSED",
};
export const FindingStatisticsSortAttributeName = {
    count: "count",
    groupKey: "groupKey",
};
export const GroupBy = {
    classificationDetails_jobId: "classificationDetails.jobId",
    resourcesAffected_s3Bucket_name: "resourcesAffected.s3Bucket.name",
    severity_description: "severity.description",
    type: "type",
};
export const RevealStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const RetrievalMode = {
    ASSUME_ROLE: "ASSUME_ROLE",
    CALLER_CREDENTIALS: "CALLER_CREDENTIALS",
};
export const RevealRequestStatus = {
    ERROR: "ERROR",
    PROCESSING: "PROCESSING",
    SUCCESS: "SUCCESS",
};
export class UnprocessableEntityException extends __BaseException {
    name = "UnprocessableEntityException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UnprocessableEntityException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnprocessableEntityException.prototype);
    }
}
export const UsageStatisticsSortKey = {
    accountId: "accountId",
    freeTrialStartDate: "freeTrialStartDate",
    serviceLimitValue: "serviceLimitValue",
    total: "total",
};
export const TimeRange = {
    MONTH_TO_DATE: "MONTH_TO_DATE",
    PAST_30_DAYS: "PAST_30_DAYS",
};
