import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, limitedParseDouble as __limitedParseDouble, map, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { Macie2ServiceException as __BaseException } from "../models/Macie2ServiceException";
import { AccessDeniedException, ConflictException, InternalServerException, ResourceNotFoundException, ServiceQuotaExceededException, ThrottlingException, UnprocessableEntityException, ValidationException, } from "../models/models_0";
export const se_AcceptInvitationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/invitations/accept");
    let body;
    body = JSON.stringify(take(input, {
        administratorAccountId: [, , `administratorAccountId`],
        invitationId: [, , `invitationId`],
        masterAccount: [, , `masterAccount`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_BatchGetCustomDataIdentifiersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/custom-data-identifiers/get");
    let body;
    body = JSON.stringify(take(input, {
        ids: [, (_) => _json(_), `ids`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_BatchUpdateAutomatedDiscoveryAccountsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/automated-discovery/accounts");
    let body;
    body = JSON.stringify(take(input, {
        accounts: [, (_) => se___listOfAutomatedDiscoveryAccountUpdate(_, context), `accounts`],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_CreateAllowListCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/allow-lists");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken(), `clientToken`],
        criteria: [, (_) => se_AllowListCriteria(_, context), `criteria`],
        description: [, , `description`],
        name: [, , `name`],
        tags: [, (_) => _json(_), `tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateClassificationJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/jobs");
    let body;
    body = JSON.stringify(take(input, {
        allowListIds: [, (_) => _json(_), `allowListIds`],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken(), `clientToken`],
        customDataIdentifierIds: [, (_) => _json(_), `customDataIdentifierIds`],
        description: [, , `description`],
        initialRun: [, , `initialRun`],
        jobType: [, , `jobType`],
        managedDataIdentifierIds: [, (_) => _json(_), `managedDataIdentifierIds`],
        managedDataIdentifierSelector: [, , `managedDataIdentifierSelector`],
        name: [, , `name`],
        s3JobDefinition: [, (_) => se_S3JobDefinition(_, context), `s3JobDefinition`],
        samplingPercentage: [, , `samplingPercentage`],
        scheduleFrequency: [, (_) => se_JobScheduleFrequency(_, context), `scheduleFrequency`],
        tags: [, (_) => _json(_), `tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateCustomDataIdentifierCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/custom-data-identifiers");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken(), `clientToken`],
        description: [, , `description`],
        ignoreWords: [, (_) => _json(_), `ignoreWords`],
        keywords: [, (_) => _json(_), `keywords`],
        maximumMatchDistance: [, , `maximumMatchDistance`],
        name: [, , `name`],
        regex: [, , `regex`],
        severityLevels: [, (_) => se_SeverityLevelList(_, context), `severityLevels`],
        tags: [, (_) => _json(_), `tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateFindingsFilterCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/findingsfilters");
    let body;
    body = JSON.stringify(take(input, {
        action: [, , `action`],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken(), `clientToken`],
        description: [, , `description`],
        findingCriteria: [, (_) => se_FindingCriteria(_, context), `findingCriteria`],
        name: [, , `name`],
        position: [, , `position`],
        tags: [, (_) => _json(_), `tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateInvitationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/invitations");
    let body;
    body = JSON.stringify(take(input, {
        accountIds: [, (_) => _json(_), `accountIds`],
        disableEmailNotification: [, , `disableEmailNotification`],
        message: [, , `message`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateMemberCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/members");
    let body;
    body = JSON.stringify(take(input, {
        account: [, (_) => se_AccountDetail(_, context), `account`],
        tags: [, (_) => _json(_), `tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateSampleFindingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/findings/sample");
    let body;
    body = JSON.stringify(take(input, {
        findingTypes: [, (_) => _json(_), `findingTypes`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeclineInvitationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/invitations/decline");
    let body;
    body = JSON.stringify(take(input, {
        accountIds: [, (_) => _json(_), `accountIds`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteAllowListCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/allow-lists/{id}");
    b.p("id", () => input.id, "{id}", false);
    const query = map({
        [_iJC]: [, input[_iJC]],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteCustomDataIdentifierCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/custom-data-identifiers/{id}");
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteFindingsFilterCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/findingsfilters/{id}");
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteInvitationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/invitations/delete");
    let body;
    body = JSON.stringify(take(input, {
        accountIds: [, (_) => _json(_), `accountIds`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteMemberCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/members/{id}");
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DescribeBucketsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/datasources/s3");
    let body;
    body = JSON.stringify(take(input, {
        criteria: [, (_) => se_BucketCriteria(_, context), `criteria`],
        maxResults: [, , `maxResults`],
        nextToken: [, , `nextToken`],
        sortCriteria: [, (_) => se_BucketSortCriteria(_, context), `sortCriteria`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeClassificationJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/jobs/{jobId}");
    b.p("jobId", () => input.jobId, "{jobId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeOrganizationConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/admin/configuration");
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DisableMacieCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/macie");
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DisableOrganizationAdminAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/admin");
    const query = map({
        [_aAI]: [, __expectNonNull(input[_aAI], `adminAccountId`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DisassociateFromAdministratorAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/administrator/disassociate");
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DisassociateFromMasterAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/master/disassociate");
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DisassociateMemberCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/members/disassociate/{id}");
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_EnableMacieCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/macie");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken(), `clientToken`],
        findingPublishingFrequency: [, , `findingPublishingFrequency`],
        status: [, , `status`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_EnableOrganizationAdminAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/admin");
    let body;
    body = JSON.stringify(take(input, {
        adminAccountId: [, , `adminAccountId`],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken(), `clientToken`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetAdministratorAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/administrator");
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetAllowListCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/allow-lists/{id}");
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetAutomatedDiscoveryConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/automated-discovery/configuration");
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetBucketStatisticsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/datasources/s3/statistics");
    let body;
    body = JSON.stringify(take(input, {
        accountId: [, , `accountId`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetClassificationExportConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/classification-export-configuration");
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetClassificationScopeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/classification-scopes/{id}");
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetCustomDataIdentifierCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/custom-data-identifiers/{id}");
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetFindingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/findings/describe");
    let body;
    body = JSON.stringify(take(input, {
        findingIds: [, (_) => _json(_), `findingIds`],
        sortCriteria: [, (_) => se_SortCriteria(_, context), `sortCriteria`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetFindingsFilterCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/findingsfilters/{id}");
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetFindingsPublicationConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/findings-publication-configuration");
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetFindingStatisticsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/findings/statistics");
    let body;
    body = JSON.stringify(take(input, {
        findingCriteria: [, (_) => se_FindingCriteria(_, context), `findingCriteria`],
        groupBy: [, , `groupBy`],
        size: [, , `size`],
        sortCriteria: [, (_) => se_FindingStatisticsSortCriteria(_, context), `sortCriteria`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetInvitationsCountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/invitations/count");
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetMacieSessionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/macie");
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetMasterAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/master");
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetMemberCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/members/{id}");
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetResourceProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/resource-profiles");
    const query = map({
        [_rA]: [, __expectNonNull(input[_rA], `resourceArn`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetRevealConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/reveal-configuration");
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetSensitiveDataOccurrencesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/findings/{findingId}/reveal");
    b.p("findingId", () => input.findingId, "{findingId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetSensitiveDataOccurrencesAvailabilityCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/findings/{findingId}/reveal/availability");
    b.p("findingId", () => input.findingId, "{findingId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetSensitivityInspectionTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/templates/sensitivity-inspections/{id}");
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetUsageStatisticsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/usage/statistics");
    let body;
    body = JSON.stringify(take(input, {
        filterBy: [, (_) => se___listOfUsageStatisticsFilter(_, context), `filterBy`],
        maxResults: [, , `maxResults`],
        nextToken: [, , `nextToken`],
        sortBy: [, (_) => se_UsageStatisticsSortBy(_, context), `sortBy`],
        timeRange: [, , `timeRange`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetUsageTotalsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/usage");
    const query = map({
        [_tR]: [, input[_tR]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListAllowListsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/allow-lists");
    const query = map({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListAutomatedDiscoveryAccountsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/automated-discovery/accounts");
    const query = map({
        [_aI]: [() => input.accountIds !== void 0, () => input[_aI] || []],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListClassificationJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/jobs/list");
    let body;
    body = JSON.stringify(take(input, {
        filterCriteria: [, (_) => se_ListJobsFilterCriteria(_, context), `filterCriteria`],
        maxResults: [, , `maxResults`],
        nextToken: [, , `nextToken`],
        sortCriteria: [, (_) => se_ListJobsSortCriteria(_, context), `sortCriteria`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListClassificationScopesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/classification-scopes");
    const query = map({
        [_n]: [, input[_n]],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListCustomDataIdentifiersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/custom-data-identifiers/list");
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [, , `maxResults`],
        nextToken: [, , `nextToken`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListFindingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/findings");
    let body;
    body = JSON.stringify(take(input, {
        findingCriteria: [, (_) => se_FindingCriteria(_, context), `findingCriteria`],
        maxResults: [, , `maxResults`],
        nextToken: [, , `nextToken`],
        sortCriteria: [, (_) => se_SortCriteria(_, context), `sortCriteria`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListFindingsFiltersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/findingsfilters");
    const query = map({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListInvitationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/invitations");
    const query = map({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListManagedDataIdentifiersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/managed-data-identifiers/list");
    let body;
    body = JSON.stringify(take(input, {
        nextToken: [, , `nextToken`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListMembersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/members");
    const query = map({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
        [_oA]: [, input[_oA]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListOrganizationAdminAccountsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/admin");
    const query = map({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListResourceProfileArtifactsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/resource-profiles/artifacts");
    const query = map({
        [_nT]: [, input[_nT]],
        [_rA]: [, __expectNonNull(input[_rA], `resourceArn`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListResourceProfileDetectionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/resource-profiles/detections");
    const query = map({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
        [_rA]: [, __expectNonNull(input[_rA], `resourceArn`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListSensitivityInspectionTemplatesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/templates/sensitivity-inspections");
    const query = map({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_PutClassificationExportConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/classification-export-configuration");
    let body;
    body = JSON.stringify(take(input, {
        configuration: [, (_) => se_ClassificationExportConfiguration(_, context), `configuration`],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_PutFindingsPublicationConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/findings-publication-configuration");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken(), `clientToken`],
        securityHubConfiguration: [, (_) => se_SecurityHubConfiguration(_, context), `securityHubConfiguration`],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_SearchResourcesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/datasources/search-resources");
    let body;
    body = JSON.stringify(take(input, {
        bucketCriteria: [, (_) => se_SearchResourcesBucketCriteria(_, context), `bucketCriteria`],
        maxResults: [, , `maxResults`],
        nextToken: [, , `nextToken`],
        sortCriteria: [, (_) => se_SearchResourcesSortCriteria(_, context), `sortCriteria`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: [, (_) => _json(_), `tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TestCustomDataIdentifierCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/custom-data-identifiers/test");
    let body;
    body = JSON.stringify(take(input, {
        ignoreWords: [, (_) => _json(_), `ignoreWords`],
        keywords: [, (_) => _json(_), `keywords`],
        maximumMatchDistance: [, , `maximumMatchDistance`],
        regex: [, , `regex`],
        sampleText: [, , `sampleText`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = map({
        [_tK]: [__expectNonNull(input.tagKeys, `tagKeys`) != null, () => input[_tK] || []],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateAllowListCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/allow-lists/{id}");
    b.p("id", () => input.id, "{id}", false);
    let body;
    body = JSON.stringify(take(input, {
        criteria: [, (_) => se_AllowListCriteria(_, context), `criteria`],
        description: [, , `description`],
        name: [, , `name`],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateAutomatedDiscoveryConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/automated-discovery/configuration");
    let body;
    body = JSON.stringify(take(input, {
        autoEnableOrganizationMembers: [, , `autoEnableOrganizationMembers`],
        status: [, , `status`],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateClassificationJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/jobs/{jobId}");
    b.p("jobId", () => input.jobId, "{jobId}", false);
    let body;
    body = JSON.stringify(take(input, {
        jobStatus: [, , `jobStatus`],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateClassificationScopeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/classification-scopes/{id}");
    b.p("id", () => input.id, "{id}", false);
    let body;
    body = JSON.stringify(take(input, {
        s3: [, (_) => se_S3ClassificationScopeUpdate(_, context), `s3`],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateFindingsFilterCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/findingsfilters/{id}");
    b.p("id", () => input.id, "{id}", false);
    let body;
    body = JSON.stringify(take(input, {
        action: [, , `action`],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken(), `clientToken`],
        description: [, , `description`],
        findingCriteria: [, (_) => se_FindingCriteria(_, context), `findingCriteria`],
        name: [, , `name`],
        position: [, , `position`],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateMacieSessionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/macie");
    let body;
    body = JSON.stringify(take(input, {
        findingPublishingFrequency: [, , `findingPublishingFrequency`],
        status: [, , `status`],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateMemberSessionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/macie/members/{id}");
    b.p("id", () => input.id, "{id}", false);
    let body;
    body = JSON.stringify(take(input, {
        status: [, , `status`],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateOrganizationConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/admin/configuration");
    let body;
    body = JSON.stringify(take(input, {
        autoEnable: [, , `autoEnable`],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateResourceProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/resource-profiles");
    const query = map({
        [_rA]: [, __expectNonNull(input[_rA], `resourceArn`)],
    });
    let body;
    body = JSON.stringify(take(input, {
        sensitivityScoreOverride: [, , `sensitivityScoreOverride`],
    }));
    b.m("PATCH").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateResourceProfileDetectionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/resource-profiles/detections");
    const query = map({
        [_rA]: [, __expectNonNull(input[_rA], `resourceArn`)],
    });
    let body;
    body = JSON.stringify(take(input, {
        suppressDataIdentifiers: [, (_) => se___listOfSuppressDataIdentifier(_, context), `suppressDataIdentifiers`],
    }));
    b.m("PATCH").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateRevealConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/reveal-configuration");
    let body;
    body = JSON.stringify(take(input, {
        configuration: [, (_) => se_RevealConfiguration(_, context), `configuration`],
        retrievalConfiguration: [, (_) => se_UpdateRetrievalConfiguration(_, context), `retrievalConfiguration`],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateSensitivityInspectionTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/templates/sensitivity-inspections/{id}");
    b.p("id", () => input.id, "{id}", false);
    let body;
    body = JSON.stringify(take(input, {
        description: [, , `description`],
        excludes: [, (_) => se_SensitivityInspectionTemplateExcludes(_, context), `excludes`],
        includes: [, (_) => se_SensitivityInspectionTemplateIncludes(_, context), `includes`],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const de_AcceptInvitationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_BatchGetCustomDataIdentifiersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        customDataIdentifiers: [
            ,
            (_) => de___listOfBatchGetCustomDataIdentifierSummary(_, context),
            `customDataIdentifiers`,
        ],
        notFoundIdentifierIds: [, _json, `notFoundIdentifierIds`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchUpdateAutomatedDiscoveryAccountsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        errors: [, (_) => de___listOfAutomatedDiscoveryAccountUpdateError(_, context), `errors`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateAllowListCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: [, __expectString, `arn`],
        id: [, __expectString, `id`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateClassificationJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        jobArn: [, __expectString, `jobArn`],
        jobId: [, __expectString, `jobId`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateCustomDataIdentifierCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        customDataIdentifierId: [, __expectString, `customDataIdentifierId`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateFindingsFilterCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: [, __expectString, `arn`],
        id: [, __expectString, `id`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateInvitationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        unprocessedAccounts: [, (_) => de___listOfUnprocessedAccount(_, context), `unprocessedAccounts`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateMemberCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: [, __expectString, `arn`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateSampleFindingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeclineInvitationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        unprocessedAccounts: [, (_) => de___listOfUnprocessedAccount(_, context), `unprocessedAccounts`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteAllowListCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteCustomDataIdentifierCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteFindingsFilterCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteInvitationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        unprocessedAccounts: [, (_) => de___listOfUnprocessedAccount(_, context), `unprocessedAccounts`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteMemberCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DescribeBucketsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        buckets: [, (_) => de___listOfBucketMetadata(_, context), `buckets`],
        nextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeClassificationJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        allowListIds: [, _json, `allowListIds`],
        clientToken: [, __expectString, `clientToken`],
        createdAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `createdAt`],
        customDataIdentifierIds: [, _json, `customDataIdentifierIds`],
        description: [, __expectString, `description`],
        initialRun: [, __expectBoolean, `initialRun`],
        jobArn: [, __expectString, `jobArn`],
        jobId: [, __expectString, `jobId`],
        jobStatus: [, __expectString, `jobStatus`],
        jobType: [, __expectString, `jobType`],
        lastRunErrorStatus: [, (_) => de_LastRunErrorStatus(_, context), `lastRunErrorStatus`],
        lastRunTime: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `lastRunTime`],
        managedDataIdentifierIds: [, _json, `managedDataIdentifierIds`],
        managedDataIdentifierSelector: [, __expectString, `managedDataIdentifierSelector`],
        name: [, __expectString, `name`],
        s3JobDefinition: [, (_) => de_S3JobDefinition(_, context), `s3JobDefinition`],
        samplingPercentage: [, __expectInt32, `samplingPercentage`],
        scheduleFrequency: [, (_) => de_JobScheduleFrequency(_, context), `scheduleFrequency`],
        statistics: [, (_) => de_Statistics(_, context), `statistics`],
        tags: [, _json, `tags`],
        userPausedDetails: [, (_) => de_UserPausedDetails(_, context), `userPausedDetails`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeOrganizationConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        autoEnable: [, __expectBoolean, `autoEnable`],
        maxAccountLimitReached: [, __expectBoolean, `maxAccountLimitReached`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DisableMacieCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisableOrganizationAdminAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateFromAdministratorAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateFromMasterAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateMemberCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_EnableMacieCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_EnableOrganizationAdminAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_GetAdministratorAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        administrator: [, (_) => de_Invitation(_, context), `administrator`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetAllowListCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: [, __expectString, `arn`],
        createdAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `createdAt`],
        criteria: [, (_) => de_AllowListCriteria(_, context), `criteria`],
        description: [, __expectString, `description`],
        id: [, __expectString, `id`],
        name: [, __expectString, `name`],
        status: [, (_) => de_AllowListStatus(_, context), `status`],
        tags: [, _json, `tags`],
        updatedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `updatedAt`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetAutomatedDiscoveryConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        autoEnableOrganizationMembers: [, __expectString, `autoEnableOrganizationMembers`],
        classificationScopeId: [, __expectString, `classificationScopeId`],
        disabledAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `disabledAt`],
        firstEnabledAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `firstEnabledAt`],
        lastUpdatedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `lastUpdatedAt`],
        sensitivityInspectionTemplateId: [, __expectString, `sensitivityInspectionTemplateId`],
        status: [, __expectString, `status`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetBucketStatisticsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        bucketCount: [, __expectLong, `bucketCount`],
        bucketCountByEffectivePermission: [
            ,
            (_) => de_BucketCountByEffectivePermission(_, context),
            `bucketCountByEffectivePermission`,
        ],
        bucketCountByEncryptionType: [, (_) => de_BucketCountByEncryptionType(_, context), `bucketCountByEncryptionType`],
        bucketCountByObjectEncryptionRequirement: [
            ,
            (_) => de_BucketCountPolicyAllowsUnencryptedObjectUploads(_, context),
            `bucketCountByObjectEncryptionRequirement`,
        ],
        bucketCountBySharedAccessType: [
            ,
            (_) => de_BucketCountBySharedAccessType(_, context),
            `bucketCountBySharedAccessType`,
        ],
        bucketStatisticsBySensitivity: [
            ,
            (_) => de_BucketStatisticsBySensitivity(_, context),
            `bucketStatisticsBySensitivity`,
        ],
        classifiableObjectCount: [, __expectLong, `classifiableObjectCount`],
        classifiableSizeInBytes: [, __expectLong, `classifiableSizeInBytes`],
        lastUpdated: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `lastUpdated`],
        objectCount: [, __expectLong, `objectCount`],
        sizeInBytes: [, __expectLong, `sizeInBytes`],
        sizeInBytesCompressed: [, __expectLong, `sizeInBytesCompressed`],
        unclassifiableObjectCount: [, (_) => de_ObjectLevelStatistics(_, context), `unclassifiableObjectCount`],
        unclassifiableObjectSizeInBytes: [, (_) => de_ObjectLevelStatistics(_, context), `unclassifiableObjectSizeInBytes`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetClassificationExportConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        configuration: [, (_) => de_ClassificationExportConfiguration(_, context), `configuration`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetClassificationScopeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        id: [, __expectString, `id`],
        name: [, __expectString, `name`],
        s3: [, (_) => de_S3ClassificationScope(_, context), `s3`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetCustomDataIdentifierCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: [, __expectString, `arn`],
        createdAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `createdAt`],
        deleted: [, __expectBoolean, `deleted`],
        description: [, __expectString, `description`],
        id: [, __expectString, `id`],
        ignoreWords: [, _json, `ignoreWords`],
        keywords: [, _json, `keywords`],
        maximumMatchDistance: [, __expectInt32, `maximumMatchDistance`],
        name: [, __expectString, `name`],
        regex: [, __expectString, `regex`],
        severityLevels: [, (_) => de_SeverityLevelList(_, context), `severityLevels`],
        tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetFindingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        findings: [, (_) => de___listOfFinding(_, context), `findings`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetFindingsFilterCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        action: [, __expectString, `action`],
        arn: [, __expectString, `arn`],
        description: [, __expectString, `description`],
        findingCriteria: [, (_) => de_FindingCriteria(_, context), `findingCriteria`],
        id: [, __expectString, `id`],
        name: [, __expectString, `name`],
        position: [, __expectInt32, `position`],
        tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetFindingsPublicationConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        securityHubConfiguration: [, (_) => de_SecurityHubConfiguration(_, context), `securityHubConfiguration`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetFindingStatisticsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        countsByGroup: [, (_) => de___listOfGroupCount(_, context), `countsByGroup`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetInvitationsCountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        invitationsCount: [, __expectLong, `invitationsCount`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetMacieSessionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        createdAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `createdAt`],
        findingPublishingFrequency: [, __expectString, `findingPublishingFrequency`],
        serviceRole: [, __expectString, `serviceRole`],
        status: [, __expectString, `status`],
        updatedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `updatedAt`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetMasterAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        master: [, (_) => de_Invitation(_, context), `master`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetMemberCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        accountId: [, __expectString, `accountId`],
        administratorAccountId: [, __expectString, `administratorAccountId`],
        arn: [, __expectString, `arn`],
        email: [, __expectString, `email`],
        invitedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `invitedAt`],
        masterAccountId: [, __expectString, `masterAccountId`],
        relationshipStatus: [, __expectString, `relationshipStatus`],
        tags: [, _json, `tags`],
        updatedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `updatedAt`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetResourceProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        profileUpdatedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `profileUpdatedAt`],
        sensitivityScore: [, __expectInt32, `sensitivityScore`],
        sensitivityScoreOverridden: [, __expectBoolean, `sensitivityScoreOverridden`],
        statistics: [, (_) => de_ResourceStatistics(_, context), `statistics`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetRevealConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        configuration: [, (_) => de_RevealConfiguration(_, context), `configuration`],
        retrievalConfiguration: [, (_) => de_RetrievalConfiguration(_, context), `retrievalConfiguration`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetSensitiveDataOccurrencesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        error: [, __expectString, `error`],
        sensitiveDataOccurrences: [, (_) => de_SensitiveDataOccurrences(_, context), `sensitiveDataOccurrences`],
        status: [, __expectString, `status`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetSensitiveDataOccurrencesAvailabilityCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        code: [, __expectString, `code`],
        reasons: [, _json, `reasons`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetSensitivityInspectionTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        description: [, __expectString, `description`],
        excludes: [, (_) => de_SensitivityInspectionTemplateExcludes(_, context), `excludes`],
        includes: [, (_) => de_SensitivityInspectionTemplateIncludes(_, context), `includes`],
        name: [, __expectString, `name`],
        sensitivityInspectionTemplateId: [, __expectString, `sensitivityInspectionTemplateId`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetUsageStatisticsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: [, __expectString, `nextToken`],
        records: [, (_) => de___listOfUsageRecord(_, context), `records`],
        timeRange: [, __expectString, `timeRange`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetUsageTotalsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        timeRange: [, __expectString, `timeRange`],
        usageTotals: [, (_) => de___listOfUsageTotal(_, context), `usageTotals`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAllowListsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        allowLists: [, (_) => de___listOfAllowListSummary(_, context), `allowLists`],
        nextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAutomatedDiscoveryAccountsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        items: [, (_) => de___listOfAutomatedDiscoveryAccount(_, context), `items`],
        nextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListClassificationJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        items: [, (_) => de___listOfJobSummary(_, context), `items`],
        nextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListClassificationScopesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        classificationScopes: [, (_) => de___listOfClassificationScopeSummary(_, context), `classificationScopes`],
        nextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListCustomDataIdentifiersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        items: [, (_) => de___listOfCustomDataIdentifierSummary(_, context), `items`],
        nextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListFindingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        findingIds: [, _json, `findingIds`],
        nextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListFindingsFiltersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        findingsFilterListItems: [, (_) => de___listOfFindingsFilterListItem(_, context), `findingsFilterListItems`],
        nextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListInvitationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        invitations: [, (_) => de___listOfInvitation(_, context), `invitations`],
        nextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListManagedDataIdentifiersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        items: [, (_) => de___listOfManagedDataIdentifierSummary(_, context), `items`],
        nextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListMembersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        members: [, (_) => de___listOfMember(_, context), `members`],
        nextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListOrganizationAdminAccountsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        adminAccounts: [, (_) => de___listOfAdminAccount(_, context), `adminAccounts`],
        nextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListResourceProfileArtifactsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        artifacts: [, (_) => de___listOfResourceProfileArtifact(_, context), `artifacts`],
        nextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListResourceProfileDetectionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        detections: [, (_) => de___listOfDetection(_, context), `detections`],
        nextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListSensitivityInspectionTemplatesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: [, __expectString, `nextToken`],
        sensitivityInspectionTemplates: [
            ,
            (_) => de___listOfSensitivityInspectionTemplatesEntry(_, context),
            `sensitivityInspectionTemplates`,
        ],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutClassificationExportConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        configuration: [, (_) => de_ClassificationExportConfiguration(_, context), `configuration`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutFindingsPublicationConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_SearchResourcesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        matchingResources: [, (_) => de___listOfMatchingResource(_, context), `matchingResources`],
        nextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_TestCustomDataIdentifierCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        matchCount: [, __expectInt32, `matchCount`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateAllowListCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: [, __expectString, `arn`],
        id: [, __expectString, `id`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateAutomatedDiscoveryConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateClassificationJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateClassificationScopeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateFindingsFilterCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: [, __expectString, `arn`],
        id: [, __expectString, `id`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateMacieSessionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateMemberSessionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateOrganizationConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateResourceProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateResourceProfileDetectionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateRevealConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        configuration: [, (_) => de_RevealConfiguration(_, context), `configuration`],
        retrievalConfiguration: [, (_) => de_RetrievalConfiguration(_, context), `retrievalConfiguration`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateSensitivityInspectionTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.macie2#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.macie2#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.macie2#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.macie2#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.macie2#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.macie2#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.macie2#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "UnprocessableEntityException":
        case "com.amazonaws.macie2#UnprocessableEntityException":
            throw await de_UnprocessableEntityExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_UnprocessableEntityExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new UnprocessableEntityException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se___listOfAutomatedDiscoveryAccountUpdate = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_AutomatedDiscoveryAccountUpdate(entry, context);
    });
};
const se___listOfCriteriaForJob = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_CriteriaForJob(entry, context);
    });
};
const se___listOfJobScopeTerm = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_JobScopeTerm(entry, context);
    });
};
const se___listOfListJobsFilterTerm = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ListJobsFilterTerm(entry, context);
    });
};
const se___listOfS3BucketDefinitionForJob = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_S3BucketDefinitionForJob(entry, context);
    });
};
const se___listOfSearchResourcesCriteria = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_SearchResourcesCriteria(entry, context);
    });
};
const se___listOfSearchResourcesTagCriterionPair = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_SearchResourcesTagCriterionPair(entry, context);
    });
};
const se___listOfSuppressDataIdentifier = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_SuppressDataIdentifier(entry, context);
    });
};
const se___listOfTagCriterionPairForJob = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_TagCriterionPairForJob(entry, context);
    });
};
const se___listOfTagValuePair = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_TagValuePair(entry, context);
    });
};
const se___listOfUsageStatisticsFilter = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_UsageStatisticsFilter(entry, context);
    });
};
const se_AccountDetail = (input, context) => {
    return take(input, {
        accountId: [, , `accountId`],
        email: [, , `email`],
    });
};
const se_AllowListCriteria = (input, context) => {
    return take(input, {
        regex: [, , `regex`],
        s3WordsList: [, (_) => se_S3WordsList(_, context), `s3WordsList`],
    });
};
const se_AutomatedDiscoveryAccountUpdate = (input, context) => {
    return take(input, {
        accountId: [, , `accountId`],
        status: [, , `status`],
    });
};
const se_BucketCriteria = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_BucketCriteriaAdditionalProperties(value, context);
        return acc;
    }, {});
};
const se_BucketCriteriaAdditionalProperties = (input, context) => {
    return take(input, {
        eq: [, _json, `eq`],
        gt: [, , `gt`],
        gte: [, , `gte`],
        lt: [, , `lt`],
        lte: [, , `lte`],
        neq: [, _json, `neq`],
        prefix: [, , `prefix`],
    });
};
const se_BucketSortCriteria = (input, context) => {
    return take(input, {
        attributeName: [, , `attributeName`],
        orderBy: [, , `orderBy`],
    });
};
const se_ClassificationExportConfiguration = (input, context) => {
    return take(input, {
        s3Destination: [, (_) => se_S3Destination(_, context), `s3Destination`],
    });
};
const se_CriteriaBlockForJob = (input, context) => {
    return take(input, {
        and: [, (_) => se___listOfCriteriaForJob(_, context), `and`],
    });
};
const se_CriteriaForJob = (input, context) => {
    return take(input, {
        simpleCriterion: [, (_) => se_SimpleCriterionForJob(_, context), `simpleCriterion`],
        tagCriterion: [, (_) => se_TagCriterionForJob(_, context), `tagCriterion`],
    });
};
const se_Criterion = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_CriterionAdditionalProperties(value, context);
        return acc;
    }, {});
};
const se_CriterionAdditionalProperties = (input, context) => {
    return take(input, {
        eq: [, _json, `eq`],
        eqExactMatch: [, _json, `eqExactMatch`],
        gt: [, , `gt`],
        gte: [, , `gte`],
        lt: [, , `lt`],
        lte: [, , `lte`],
        neq: [, _json, `neq`],
    });
};
const se_FindingCriteria = (input, context) => {
    return take(input, {
        criterion: [, (_) => se_Criterion(_, context), `criterion`],
    });
};
const se_FindingStatisticsSortCriteria = (input, context) => {
    return take(input, {
        attributeName: [, , `attributeName`],
        orderBy: [, , `orderBy`],
    });
};
const se_JobScheduleFrequency = (input, context) => {
    return take(input, {
        dailySchedule: [, _json, `dailySchedule`],
        monthlySchedule: [, (_) => se_MonthlySchedule(_, context), `monthlySchedule`],
        weeklySchedule: [, (_) => se_WeeklySchedule(_, context), `weeklySchedule`],
    });
};
const se_JobScopeTerm = (input, context) => {
    return take(input, {
        simpleScopeTerm: [, (_) => se_SimpleScopeTerm(_, context), `simpleScopeTerm`],
        tagScopeTerm: [, (_) => se_TagScopeTerm(_, context), `tagScopeTerm`],
    });
};
const se_JobScopingBlock = (input, context) => {
    return take(input, {
        and: [, (_) => se___listOfJobScopeTerm(_, context), `and`],
    });
};
const se_ListJobsFilterCriteria = (input, context) => {
    return take(input, {
        excludes: [, (_) => se___listOfListJobsFilterTerm(_, context), `excludes`],
        includes: [, (_) => se___listOfListJobsFilterTerm(_, context), `includes`],
    });
};
const se_ListJobsFilterTerm = (input, context) => {
    return take(input, {
        comparator: [, , `comparator`],
        key: [, , `key`],
        values: [, _json, `values`],
    });
};
const se_ListJobsSortCriteria = (input, context) => {
    return take(input, {
        attributeName: [, , `attributeName`],
        orderBy: [, , `orderBy`],
    });
};
const se_MonthlySchedule = (input, context) => {
    return take(input, {
        dayOfMonth: [, , `dayOfMonth`],
    });
};
const se_RevealConfiguration = (input, context) => {
    return take(input, {
        kmsKeyId: [, , `kmsKeyId`],
        status: [, , `status`],
    });
};
const se_S3BucketCriteriaForJob = (input, context) => {
    return take(input, {
        excludes: [, (_) => se_CriteriaBlockForJob(_, context), `excludes`],
        includes: [, (_) => se_CriteriaBlockForJob(_, context), `includes`],
    });
};
const se_S3BucketDefinitionForJob = (input, context) => {
    return take(input, {
        accountId: [, , `accountId`],
        buckets: [, _json, `buckets`],
    });
};
const se_S3ClassificationScopeExclusionUpdate = (input, context) => {
    return take(input, {
        bucketNames: [, _json, `bucketNames`],
        operation: [, , `operation`],
    });
};
const se_S3ClassificationScopeUpdate = (input, context) => {
    return take(input, {
        excludes: [, (_) => se_S3ClassificationScopeExclusionUpdate(_, context), `excludes`],
    });
};
const se_S3Destination = (input, context) => {
    return take(input, {
        bucketName: [, , `bucketName`],
        keyPrefix: [, , `keyPrefix`],
        kmsKeyArn: [, , `kmsKeyArn`],
    });
};
const se_S3JobDefinition = (input, context) => {
    return take(input, {
        bucketCriteria: [, (_) => se_S3BucketCriteriaForJob(_, context), `bucketCriteria`],
        bucketDefinitions: [, (_) => se___listOfS3BucketDefinitionForJob(_, context), `bucketDefinitions`],
        scoping: [, (_) => se_Scoping(_, context), `scoping`],
    });
};
const se_S3WordsList = (input, context) => {
    return take(input, {
        bucketName: [, , `bucketName`],
        objectKey: [, , `objectKey`],
    });
};
const se_Scoping = (input, context) => {
    return take(input, {
        excludes: [, (_) => se_JobScopingBlock(_, context), `excludes`],
        includes: [, (_) => se_JobScopingBlock(_, context), `includes`],
    });
};
const se_SearchResourcesBucketCriteria = (input, context) => {
    return take(input, {
        excludes: [, (_) => se_SearchResourcesCriteriaBlock(_, context), `excludes`],
        includes: [, (_) => se_SearchResourcesCriteriaBlock(_, context), `includes`],
    });
};
const se_SearchResourcesCriteria = (input, context) => {
    return take(input, {
        simpleCriterion: [, (_) => se_SearchResourcesSimpleCriterion(_, context), `simpleCriterion`],
        tagCriterion: [, (_) => se_SearchResourcesTagCriterion(_, context), `tagCriterion`],
    });
};
const se_SearchResourcesCriteriaBlock = (input, context) => {
    return take(input, {
        and: [, (_) => se___listOfSearchResourcesCriteria(_, context), `and`],
    });
};
const se_SearchResourcesSimpleCriterion = (input, context) => {
    return take(input, {
        comparator: [, , `comparator`],
        key: [, , `key`],
        values: [, _json, `values`],
    });
};
const se_SearchResourcesSortCriteria = (input, context) => {
    return take(input, {
        attributeName: [, , `attributeName`],
        orderBy: [, , `orderBy`],
    });
};
const se_SearchResourcesTagCriterion = (input, context) => {
    return take(input, {
        comparator: [, , `comparator`],
        tagValues: [, (_) => se___listOfSearchResourcesTagCriterionPair(_, context), `tagValues`],
    });
};
const se_SearchResourcesTagCriterionPair = (input, context) => {
    return take(input, {
        key: [, , `key`],
        value: [, , `value`],
    });
};
const se_SecurityHubConfiguration = (input, context) => {
    return take(input, {
        publishClassificationFindings: [, , `publishClassificationFindings`],
        publishPolicyFindings: [, , `publishPolicyFindings`],
    });
};
const se_SensitivityInspectionTemplateExcludes = (input, context) => {
    return take(input, {
        managedDataIdentifierIds: [, _json, `managedDataIdentifierIds`],
    });
};
const se_SensitivityInspectionTemplateIncludes = (input, context) => {
    return take(input, {
        allowListIds: [, _json, `allowListIds`],
        customDataIdentifierIds: [, _json, `customDataIdentifierIds`],
        managedDataIdentifierIds: [, _json, `managedDataIdentifierIds`],
    });
};
const se_SeverityLevel = (input, context) => {
    return take(input, {
        occurrencesThreshold: [, , `occurrencesThreshold`],
        severity: [, , `severity`],
    });
};
const se_SeverityLevelList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_SeverityLevel(entry, context);
    });
};
const se_SimpleCriterionForJob = (input, context) => {
    return take(input, {
        comparator: [, , `comparator`],
        key: [, , `key`],
        values: [, _json, `values`],
    });
};
const se_SimpleScopeTerm = (input, context) => {
    return take(input, {
        comparator: [, , `comparator`],
        key: [, , `key`],
        values: [, _json, `values`],
    });
};
const se_SortCriteria = (input, context) => {
    return take(input, {
        attributeName: [, , `attributeName`],
        orderBy: [, , `orderBy`],
    });
};
const se_SuppressDataIdentifier = (input, context) => {
    return take(input, {
        id: [, , `id`],
        type: [, , `type`],
    });
};
const se_TagCriterionForJob = (input, context) => {
    return take(input, {
        comparator: [, , `comparator`],
        tagValues: [, (_) => se___listOfTagCriterionPairForJob(_, context), `tagValues`],
    });
};
const se_TagCriterionPairForJob = (input, context) => {
    return take(input, {
        key: [, , `key`],
        value: [, , `value`],
    });
};
const se_TagScopeTerm = (input, context) => {
    return take(input, {
        comparator: [, , `comparator`],
        key: [, , `key`],
        tagValues: [, (_) => se___listOfTagValuePair(_, context), `tagValues`],
        target: [, , `target`],
    });
};
const se_TagValuePair = (input, context) => {
    return take(input, {
        key: [, , `key`],
        value: [, , `value`],
    });
};
const se_UpdateRetrievalConfiguration = (input, context) => {
    return take(input, {
        retrievalMode: [, , `retrievalMode`],
        roleName: [, , `roleName`],
    });
};
const se_UsageStatisticsFilter = (input, context) => {
    return take(input, {
        comparator: [, , `comparator`],
        key: [, , `key`],
        values: [, _json, `values`],
    });
};
const se_UsageStatisticsSortBy = (input, context) => {
    return take(input, {
        key: [, , `key`],
        orderBy: [, , `orderBy`],
    });
};
const se_WeeklySchedule = (input, context) => {
    return take(input, {
        dayOfWeek: [, , `dayOfWeek`],
    });
};
const de___listOfAdminAccount = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AdminAccount(entry, context);
    });
    return retVal;
};
const de___listOfAllowListSummary = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AllowListSummary(entry, context);
    });
    return retVal;
};
const de___listOfAutomatedDiscoveryAccount = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AutomatedDiscoveryAccount(entry, context);
    });
    return retVal;
};
const de___listOfAutomatedDiscoveryAccountUpdateError = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AutomatedDiscoveryAccountUpdateError(entry, context);
    });
    return retVal;
};
const de___listOfBatchGetCustomDataIdentifierSummary = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BatchGetCustomDataIdentifierSummary(entry, context);
    });
    return retVal;
};
const de___listOfBucketMetadata = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BucketMetadata(entry, context);
    });
    return retVal;
};
const de___listOfClassificationScopeSummary = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ClassificationScopeSummary(entry, context);
    });
    return retVal;
};
const de___listOfCriteriaForJob = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CriteriaForJob(entry, context);
    });
    return retVal;
};
const de___listOfCustomDataIdentifierSummary = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CustomDataIdentifierSummary(entry, context);
    });
    return retVal;
};
const de___listOfDetectedDataDetails = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DetectedDataDetails(entry, context);
    });
    return retVal;
};
const de___listOfDetection = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Detection(entry, context);
    });
    return retVal;
};
const de___listOfFinding = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Finding(entry, context);
    });
    return retVal;
};
const de___listOfFindingsFilterListItem = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FindingsFilterListItem(entry, context);
    });
    return retVal;
};
const de___listOfGroupCount = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_GroupCount(entry, context);
    });
    return retVal;
};
const de___listOfInvitation = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Invitation(entry, context);
    });
    return retVal;
};
const de___listOfJobScopeTerm = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_JobScopeTerm(entry, context);
    });
    return retVal;
};
const de___listOfJobSummary = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_JobSummary(entry, context);
    });
    return retVal;
};
const de___listOfKeyValuePair = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_KeyValuePair(entry, context);
    });
    return retVal;
};
const de___listOfManagedDataIdentifierSummary = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ManagedDataIdentifierSummary(entry, context);
    });
    return retVal;
};
const de___listOfMatchingResource = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MatchingResource(entry, context);
    });
    return retVal;
};
const de___listOfMember = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Member(entry, context);
    });
    return retVal;
};
const de___listOfResourceProfileArtifact = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ResourceProfileArtifact(entry, context);
    });
    return retVal;
};
const de___listOfS3BucketDefinitionForJob = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_S3BucketDefinitionForJob(entry, context);
    });
    return retVal;
};
const de___listOfSensitivityInspectionTemplatesEntry = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SensitivityInspectionTemplatesEntry(entry, context);
    });
    return retVal;
};
const de___listOfTagCriterionPairForJob = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TagCriterionPairForJob(entry, context);
    });
    return retVal;
};
const de___listOfTagValuePair = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TagValuePair(entry, context);
    });
    return retVal;
};
const de___listOfUnprocessedAccount = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UnprocessedAccount(entry, context);
    });
    return retVal;
};
const de___listOfUsageByAccount = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UsageByAccount(entry, context);
    });
    return retVal;
};
const de___listOfUsageRecord = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UsageRecord(entry, context);
    });
    return retVal;
};
const de___listOfUsageTotal = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UsageTotal(entry, context);
    });
    return retVal;
};
const de_AccessControlList = (output, context) => {
    return take(output, {
        allowsPublicReadAccess: [, __expectBoolean, `allowsPublicReadAccess`],
        allowsPublicWriteAccess: [, __expectBoolean, `allowsPublicWriteAccess`],
    });
};
const de_AccountLevelPermissions = (output, context) => {
    return take(output, {
        blockPublicAccess: [, (_) => de_BlockPublicAccess(_, context), `blockPublicAccess`],
    });
};
const de_AdminAccount = (output, context) => {
    return take(output, {
        accountId: [, __expectString, `accountId`],
        status: [, __expectString, `status`],
    });
};
const de_AllowListCriteria = (output, context) => {
    return take(output, {
        regex: [, __expectString, `regex`],
        s3WordsList: [, (_) => de_S3WordsList(_, context), `s3WordsList`],
    });
};
const de_AllowListStatus = (output, context) => {
    return take(output, {
        code: [, __expectString, `code`],
        description: [, __expectString, `description`],
    });
};
const de_AllowListSummary = (output, context) => {
    return take(output, {
        arn: [, __expectString, `arn`],
        createdAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `createdAt`],
        description: [, __expectString, `description`],
        id: [, __expectString, `id`],
        name: [, __expectString, `name`],
        updatedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `updatedAt`],
    });
};
const de_ApiCallDetails = (output, context) => {
    return take(output, {
        api: [, __expectString, `api`],
        apiServiceName: [, __expectString, `apiServiceName`],
        firstSeen: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `firstSeen`],
        lastSeen: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `lastSeen`],
    });
};
const de_AssumedRole = (output, context) => {
    return take(output, {
        accessKeyId: [, __expectString, `accessKeyId`],
        accountId: [, __expectString, `accountId`],
        arn: [, __expectString, `arn`],
        principalId: [, __expectString, `principalId`],
        sessionContext: [, (_) => de_SessionContext(_, context), `sessionContext`],
    });
};
const de_AutomatedDiscoveryAccount = (output, context) => {
    return take(output, {
        accountId: [, __expectString, `accountId`],
        status: [, __expectString, `status`],
    });
};
const de_AutomatedDiscoveryAccountUpdateError = (output, context) => {
    return take(output, {
        accountId: [, __expectString, `accountId`],
        errorCode: [, __expectString, `errorCode`],
    });
};
const de_AwsAccount = (output, context) => {
    return take(output, {
        accountId: [, __expectString, `accountId`],
        principalId: [, __expectString, `principalId`],
    });
};
const de_AwsService = (output, context) => {
    return take(output, {
        invokedBy: [, __expectString, `invokedBy`],
    });
};
const de_BatchGetCustomDataIdentifierSummary = (output, context) => {
    return take(output, {
        arn: [, __expectString, `arn`],
        createdAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `createdAt`],
        deleted: [, __expectBoolean, `deleted`],
        description: [, __expectString, `description`],
        id: [, __expectString, `id`],
        name: [, __expectString, `name`],
    });
};
const de_BlockPublicAccess = (output, context) => {
    return take(output, {
        blockPublicAcls: [, __expectBoolean, `blockPublicAcls`],
        blockPublicPolicy: [, __expectBoolean, `blockPublicPolicy`],
        ignorePublicAcls: [, __expectBoolean, `ignorePublicAcls`],
        restrictPublicBuckets: [, __expectBoolean, `restrictPublicBuckets`],
    });
};
const de_BucketCountByEffectivePermission = (output, context) => {
    return take(output, {
        publiclyAccessible: [, __expectLong, `publiclyAccessible`],
        publiclyReadable: [, __expectLong, `publiclyReadable`],
        publiclyWritable: [, __expectLong, `publiclyWritable`],
        unknown: [, __expectLong, `unknown`],
    });
};
const de_BucketCountByEncryptionType = (output, context) => {
    return take(output, {
        kmsManaged: [, __expectLong, `kmsManaged`],
        s3Managed: [, __expectLong, `s3Managed`],
        unencrypted: [, __expectLong, `unencrypted`],
        unknown: [, __expectLong, `unknown`],
    });
};
const de_BucketCountBySharedAccessType = (output, context) => {
    return take(output, {
        external: [, __expectLong, `external`],
        internal: [, __expectLong, `internal`],
        notShared: [, __expectLong, `notShared`],
        unknown: [, __expectLong, `unknown`],
    });
};
const de_BucketCountPolicyAllowsUnencryptedObjectUploads = (output, context) => {
    return take(output, {
        allowsUnencryptedObjectUploads: [, __expectLong, `allowsUnencryptedObjectUploads`],
        deniesUnencryptedObjectUploads: [, __expectLong, `deniesUnencryptedObjectUploads`],
        unknown: [, __expectLong, `unknown`],
    });
};
const de_BucketLevelPermissions = (output, context) => {
    return take(output, {
        accessControlList: [, (_) => de_AccessControlList(_, context), `accessControlList`],
        blockPublicAccess: [, (_) => de_BlockPublicAccess(_, context), `blockPublicAccess`],
        bucketPolicy: [, (_) => de_BucketPolicy(_, context), `bucketPolicy`],
    });
};
const de_BucketMetadata = (output, context) => {
    return take(output, {
        accountId: [, __expectString, `accountId`],
        allowsUnencryptedObjectUploads: [, __expectString, `allowsUnencryptedObjectUploads`],
        automatedDiscoveryMonitoringStatus: [, __expectString, `automatedDiscoveryMonitoringStatus`],
        bucketArn: [, __expectString, `bucketArn`],
        bucketCreatedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `bucketCreatedAt`],
        bucketName: [, __expectString, `bucketName`],
        classifiableObjectCount: [, __expectLong, `classifiableObjectCount`],
        classifiableSizeInBytes: [, __expectLong, `classifiableSizeInBytes`],
        errorCode: [, __expectString, `errorCode`],
        errorMessage: [, __expectString, `errorMessage`],
        jobDetails: [, (_) => de_JobDetails(_, context), `jobDetails`],
        lastAutomatedDiscoveryTime: [
            ,
            (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
            `lastAutomatedDiscoveryTime`,
        ],
        lastUpdated: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `lastUpdated`],
        objectCount: [, __expectLong, `objectCount`],
        objectCountByEncryptionType: [
            ,
            (_) => de_ObjectCountByEncryptionType(_, context),
            `objectCountByEncryptionType`,
        ],
        publicAccess: [, (_) => de_BucketPublicAccess(_, context), `publicAccess`],
        region: [, __expectString, `region`],
        replicationDetails: [, (_) => de_ReplicationDetails(_, context), `replicationDetails`],
        sensitivityScore: [, __expectInt32, `sensitivityScore`],
        serverSideEncryption: [, (_) => de_BucketServerSideEncryption(_, context), `serverSideEncryption`],
        sharedAccess: [, __expectString, `sharedAccess`],
        sizeInBytes: [, __expectLong, `sizeInBytes`],
        sizeInBytesCompressed: [, __expectLong, `sizeInBytesCompressed`],
        tags: [, (_) => de___listOfKeyValuePair(_, context), `tags`],
        unclassifiableObjectCount: [, (_) => de_ObjectLevelStatistics(_, context), `unclassifiableObjectCount`],
        unclassifiableObjectSizeInBytes: [
            ,
            (_) => de_ObjectLevelStatistics(_, context),
            `unclassifiableObjectSizeInBytes`,
        ],
        versioning: [, __expectBoolean, `versioning`],
    });
};
const de_BucketPermissionConfiguration = (output, context) => {
    return take(output, {
        accountLevelPermissions: [, (_) => de_AccountLevelPermissions(_, context), `accountLevelPermissions`],
        bucketLevelPermissions: [, (_) => de_BucketLevelPermissions(_, context), `bucketLevelPermissions`],
    });
};
const de_BucketPolicy = (output, context) => {
    return take(output, {
        allowsPublicReadAccess: [, __expectBoolean, `allowsPublicReadAccess`],
        allowsPublicWriteAccess: [, __expectBoolean, `allowsPublicWriteAccess`],
    });
};
const de_BucketPublicAccess = (output, context) => {
    return take(output, {
        effectivePermission: [, __expectString, `effectivePermission`],
        permissionConfiguration: [, (_) => de_BucketPermissionConfiguration(_, context), `permissionConfiguration`],
    });
};
const de_BucketServerSideEncryption = (output, context) => {
    return take(output, {
        kmsMasterKeyId: [, __expectString, `kmsMasterKeyId`],
        type: [, __expectString, `type`],
    });
};
const de_BucketStatisticsBySensitivity = (output, context) => {
    return take(output, {
        classificationError: [, (_) => de_SensitivityAggregations(_, context), `classificationError`],
        notClassified: [, (_) => de_SensitivityAggregations(_, context), `notClassified`],
        notSensitive: [, (_) => de_SensitivityAggregations(_, context), `notSensitive`],
        sensitive: [, (_) => de_SensitivityAggregations(_, context), `sensitive`],
    });
};
const de_Cell = (output, context) => {
    return take(output, {
        cellReference: [, __expectString, `cellReference`],
        column: [, __expectLong, `column`],
        columnName: [, __expectString, `columnName`],
        row: [, __expectLong, `row`],
    });
};
const de_Cells = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Cell(entry, context);
    });
    return retVal;
};
const de_ClassificationDetails = (output, context) => {
    return take(output, {
        detailedResultsLocation: [, __expectString, `detailedResultsLocation`],
        jobArn: [, __expectString, `jobArn`],
        jobId: [, __expectString, `jobId`],
        originType: [, __expectString, `originType`],
        result: [, (_) => de_ClassificationResult(_, context), `result`],
    });
};
const de_ClassificationExportConfiguration = (output, context) => {
    return take(output, {
        s3Destination: [, (_) => de_S3Destination(_, context), `s3Destination`],
    });
};
const de_ClassificationResult = (output, context) => {
    return take(output, {
        additionalOccurrences: [, __expectBoolean, `additionalOccurrences`],
        customDataIdentifiers: [, (_) => de_CustomDataIdentifiers(_, context), `customDataIdentifiers`],
        mimeType: [, __expectString, `mimeType`],
        sensitiveData: [, (_) => de_SensitiveData(_, context), `sensitiveData`],
        sizeClassified: [, __expectLong, `sizeClassified`],
        status: [, (_) => de_ClassificationResultStatus(_, context), `status`],
    });
};
const de_ClassificationResultStatus = (output, context) => {
    return take(output, {
        code: [, __expectString, `code`],
        reason: [, __expectString, `reason`],
    });
};
const de_ClassificationScopeSummary = (output, context) => {
    return take(output, {
        id: [, __expectString, `id`],
        name: [, __expectString, `name`],
    });
};
const de_CriteriaBlockForJob = (output, context) => {
    return take(output, {
        and: [, (_) => de___listOfCriteriaForJob(_, context), `and`],
    });
};
const de_CriteriaForJob = (output, context) => {
    return take(output, {
        simpleCriterion: [, (_) => de_SimpleCriterionForJob(_, context), `simpleCriterion`],
        tagCriterion: [, (_) => de_TagCriterionForJob(_, context), `tagCriterion`],
    });
};
const de_Criterion = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_CriterionAdditionalProperties(value, context);
        return acc;
    }, {});
};
const de_CriterionAdditionalProperties = (output, context) => {
    return take(output, {
        eq: [, _json, `eq`],
        eqExactMatch: [, _json, `eqExactMatch`],
        gt: [, __expectLong, `gt`],
        gte: [, __expectLong, `gte`],
        lt: [, __expectLong, `lt`],
        lte: [, __expectLong, `lte`],
        neq: [, _json, `neq`],
    });
};
const de_CustomDataIdentifiers = (output, context) => {
    return take(output, {
        detections: [, (_) => de_CustomDetections(_, context), `detections`],
        totalCount: [, __expectLong, `totalCount`],
    });
};
const de_CustomDataIdentifierSummary = (output, context) => {
    return take(output, {
        arn: [, __expectString, `arn`],
        createdAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `createdAt`],
        description: [, __expectString, `description`],
        id: [, __expectString, `id`],
        name: [, __expectString, `name`],
    });
};
const de_CustomDetection = (output, context) => {
    return take(output, {
        arn: [, __expectString, `arn`],
        count: [, __expectLong, `count`],
        name: [, __expectString, `name`],
        occurrences: [, (_) => de_Occurrences(_, context), `occurrences`],
    });
};
const de_CustomDetections = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CustomDetection(entry, context);
    });
    return retVal;
};
const de_DefaultDetection = (output, context) => {
    return take(output, {
        count: [, __expectLong, `count`],
        occurrences: [, (_) => de_Occurrences(_, context), `occurrences`],
        type: [, __expectString, `type`],
    });
};
const de_DefaultDetections = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DefaultDetection(entry, context);
    });
    return retVal;
};
const de_DetectedDataDetails = (output, context) => {
    return take(output, {
        value: [, __expectString, `value`],
    });
};
const de_Detection = (output, context) => {
    return take(output, {
        arn: [, __expectString, `arn`],
        count: [, __expectLong, `count`],
        id: [, __expectString, `id`],
        name: [, __expectString, `name`],
        suppressed: [, __expectBoolean, `suppressed`],
        type: [, __expectString, `type`],
    });
};
const de_DomainDetails = (output, context) => {
    return take(output, {
        domainName: [, __expectString, `domainName`],
    });
};
const de_FederatedUser = (output, context) => {
    return take(output, {
        accessKeyId: [, __expectString, `accessKeyId`],
        accountId: [, __expectString, `accountId`],
        arn: [, __expectString, `arn`],
        principalId: [, __expectString, `principalId`],
        sessionContext: [, (_) => de_SessionContext(_, context), `sessionContext`],
    });
};
const de_Finding = (output, context) => {
    return take(output, {
        accountId: [, __expectString, `accountId`],
        archived: [, __expectBoolean, `archived`],
        category: [, __expectString, `category`],
        classificationDetails: [, (_) => de_ClassificationDetails(_, context), `classificationDetails`],
        count: [, __expectLong, `count`],
        createdAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `createdAt`],
        description: [, __expectString, `description`],
        id: [, __expectString, `id`],
        partition: [, __expectString, `partition`],
        policyDetails: [, (_) => de_PolicyDetails(_, context), `policyDetails`],
        region: [, __expectString, `region`],
        resourcesAffected: [, (_) => de_ResourcesAffected(_, context), `resourcesAffected`],
        sample: [, __expectBoolean, `sample`],
        schemaVersion: [, __expectString, `schemaVersion`],
        severity: [, (_) => de_Severity(_, context), `severity`],
        title: [, __expectString, `title`],
        type: [, __expectString, `type`],
        updatedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `updatedAt`],
    });
};
const de_FindingAction = (output, context) => {
    return take(output, {
        actionType: [, __expectString, `actionType`],
        apiCallDetails: [, (_) => de_ApiCallDetails(_, context), `apiCallDetails`],
    });
};
const de_FindingActor = (output, context) => {
    return take(output, {
        domainDetails: [, (_) => de_DomainDetails(_, context), `domainDetails`],
        ipAddressDetails: [, (_) => de_IpAddressDetails(_, context), `ipAddressDetails`],
        userIdentity: [, (_) => de_UserIdentity(_, context), `userIdentity`],
    });
};
const de_FindingCriteria = (output, context) => {
    return take(output, {
        criterion: [, (_) => de_Criterion(_, context), `criterion`],
    });
};
const de_FindingsFilterListItem = (output, context) => {
    return take(output, {
        action: [, __expectString, `action`],
        arn: [, __expectString, `arn`],
        id: [, __expectString, `id`],
        name: [, __expectString, `name`],
        tags: [, _json, `tags`],
    });
};
const de_GroupCount = (output, context) => {
    return take(output, {
        count: [, __expectLong, `count`],
        groupKey: [, __expectString, `groupKey`],
    });
};
const de_IamUser = (output, context) => {
    return take(output, {
        accountId: [, __expectString, `accountId`],
        arn: [, __expectString, `arn`],
        principalId: [, __expectString, `principalId`],
        userName: [, __expectString, `userName`],
    });
};
const de_Invitation = (output, context) => {
    return take(output, {
        accountId: [, __expectString, `accountId`],
        invitationId: [, __expectString, `invitationId`],
        invitedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `invitedAt`],
        relationshipStatus: [, __expectString, `relationshipStatus`],
    });
};
const de_IpAddressDetails = (output, context) => {
    return take(output, {
        ipAddressV4: [, __expectString, `ipAddressV4`],
        ipCity: [, (_) => de_IpCity(_, context), `ipCity`],
        ipCountry: [, (_) => de_IpCountry(_, context), `ipCountry`],
        ipGeoLocation: [, (_) => de_IpGeoLocation(_, context), `ipGeoLocation`],
        ipOwner: [, (_) => de_IpOwner(_, context), `ipOwner`],
    });
};
const de_IpCity = (output, context) => {
    return take(output, {
        name: [, __expectString, `name`],
    });
};
const de_IpCountry = (output, context) => {
    return take(output, {
        code: [, __expectString, `code`],
        name: [, __expectString, `name`],
    });
};
const de_IpGeoLocation = (output, context) => {
    return take(output, {
        lat: [, __limitedParseDouble, `lat`],
        lon: [, __limitedParseDouble, `lon`],
    });
};
const de_IpOwner = (output, context) => {
    return take(output, {
        asn: [, __expectString, `asn`],
        asnOrg: [, __expectString, `asnOrg`],
        isp: [, __expectString, `isp`],
        org: [, __expectString, `org`],
    });
};
const de_JobDetails = (output, context) => {
    return take(output, {
        isDefinedInJob: [, __expectString, `isDefinedInJob`],
        isMonitoredByJob: [, __expectString, `isMonitoredByJob`],
        lastJobId: [, __expectString, `lastJobId`],
        lastJobRunTime: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `lastJobRunTime`],
    });
};
const de_JobScheduleFrequency = (output, context) => {
    return take(output, {
        dailySchedule: [, _json, `dailySchedule`],
        monthlySchedule: [, (_) => de_MonthlySchedule(_, context), `monthlySchedule`],
        weeklySchedule: [, (_) => de_WeeklySchedule(_, context), `weeklySchedule`],
    });
};
const de_JobScopeTerm = (output, context) => {
    return take(output, {
        simpleScopeTerm: [, (_) => de_SimpleScopeTerm(_, context), `simpleScopeTerm`],
        tagScopeTerm: [, (_) => de_TagScopeTerm(_, context), `tagScopeTerm`],
    });
};
const de_JobScopingBlock = (output, context) => {
    return take(output, {
        and: [, (_) => de___listOfJobScopeTerm(_, context), `and`],
    });
};
const de_JobSummary = (output, context) => {
    return take(output, {
        bucketCriteria: [, (_) => de_S3BucketCriteriaForJob(_, context), `bucketCriteria`],
        bucketDefinitions: [, (_) => de___listOfS3BucketDefinitionForJob(_, context), `bucketDefinitions`],
        createdAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `createdAt`],
        jobId: [, __expectString, `jobId`],
        jobStatus: [, __expectString, `jobStatus`],
        jobType: [, __expectString, `jobType`],
        lastRunErrorStatus: [, (_) => de_LastRunErrorStatus(_, context), `lastRunErrorStatus`],
        name: [, __expectString, `name`],
        userPausedDetails: [, (_) => de_UserPausedDetails(_, context), `userPausedDetails`],
    });
};
const de_KeyValuePair = (output, context) => {
    return take(output, {
        key: [, __expectString, `key`],
        value: [, __expectString, `value`],
    });
};
const de_KeyValuePairList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_KeyValuePair(entry, context);
    });
    return retVal;
};
const de_LastRunErrorStatus = (output, context) => {
    return take(output, {
        code: [, __expectString, `code`],
    });
};
const de_ManagedDataIdentifierSummary = (output, context) => {
    return take(output, {
        category: [, __expectString, `category`],
        id: [, __expectString, `id`],
    });
};
const de_MatchingBucket = (output, context) => {
    return take(output, {
        accountId: [, __expectString, `accountId`],
        automatedDiscoveryMonitoringStatus: [, __expectString, `automatedDiscoveryMonitoringStatus`],
        bucketName: [, __expectString, `bucketName`],
        classifiableObjectCount: [, __expectLong, `classifiableObjectCount`],
        classifiableSizeInBytes: [, __expectLong, `classifiableSizeInBytes`],
        errorCode: [, __expectString, `errorCode`],
        errorMessage: [, __expectString, `errorMessage`],
        jobDetails: [, (_) => de_JobDetails(_, context), `jobDetails`],
        lastAutomatedDiscoveryTime: [
            ,
            (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
            `lastAutomatedDiscoveryTime`,
        ],
        objectCount: [, __expectLong, `objectCount`],
        objectCountByEncryptionType: [
            ,
            (_) => de_ObjectCountByEncryptionType(_, context),
            `objectCountByEncryptionType`,
        ],
        sensitivityScore: [, __expectInt32, `sensitivityScore`],
        sizeInBytes: [, __expectLong, `sizeInBytes`],
        sizeInBytesCompressed: [, __expectLong, `sizeInBytesCompressed`],
        unclassifiableObjectCount: [, (_) => de_ObjectLevelStatistics(_, context), `unclassifiableObjectCount`],
        unclassifiableObjectSizeInBytes: [
            ,
            (_) => de_ObjectLevelStatistics(_, context),
            `unclassifiableObjectSizeInBytes`,
        ],
    });
};
const de_MatchingResource = (output, context) => {
    return take(output, {
        matchingBucket: [, (_) => de_MatchingBucket(_, context), `matchingBucket`],
    });
};
const de_Member = (output, context) => {
    return take(output, {
        accountId: [, __expectString, `accountId`],
        administratorAccountId: [, __expectString, `administratorAccountId`],
        arn: [, __expectString, `arn`],
        email: [, __expectString, `email`],
        invitedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `invitedAt`],
        masterAccountId: [, __expectString, `masterAccountId`],
        relationshipStatus: [, __expectString, `relationshipStatus`],
        tags: [, _json, `tags`],
        updatedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `updatedAt`],
    });
};
const de_MonthlySchedule = (output, context) => {
    return take(output, {
        dayOfMonth: [, __expectInt32, `dayOfMonth`],
    });
};
const de_ObjectCountByEncryptionType = (output, context) => {
    return take(output, {
        customerManaged: [, __expectLong, `customerManaged`],
        kmsManaged: [, __expectLong, `kmsManaged`],
        s3Managed: [, __expectLong, `s3Managed`],
        unencrypted: [, __expectLong, `unencrypted`],
        unknown: [, __expectLong, `unknown`],
    });
};
const de_ObjectLevelStatistics = (output, context) => {
    return take(output, {
        fileType: [, __expectLong, `fileType`],
        storageClass: [, __expectLong, `storageClass`],
        total: [, __expectLong, `total`],
    });
};
const de_Occurrences = (output, context) => {
    return take(output, {
        cells: [, (_) => de_Cells(_, context), `cells`],
        lineRanges: [, (_) => de_Ranges(_, context), `lineRanges`],
        offsetRanges: [, (_) => de_Ranges(_, context), `offsetRanges`],
        pages: [, (_) => de_Pages(_, context), `pages`],
        records: [, (_) => de_Records(_, context), `records`],
    });
};
const de_Page = (output, context) => {
    return take(output, {
        lineRange: [, (_) => de_Range(_, context), `lineRange`],
        offsetRange: [, (_) => de_Range(_, context), `offsetRange`],
        pageNumber: [, __expectLong, `pageNumber`],
    });
};
const de_Pages = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Page(entry, context);
    });
    return retVal;
};
const de_PolicyDetails = (output, context) => {
    return take(output, {
        action: [, (_) => de_FindingAction(_, context), `action`],
        actor: [, (_) => de_FindingActor(_, context), `actor`],
    });
};
const de_Range = (output, context) => {
    return take(output, {
        end: [, __expectLong, `end`],
        start: [, __expectLong, `start`],
        startColumn: [, __expectLong, `startColumn`],
    });
};
const de_Ranges = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Range(entry, context);
    });
    return retVal;
};
const de__Record = (output, context) => {
    return take(output, {
        jsonPath: [, __expectString, `jsonPath`],
        recordIndex: [, __expectLong, `recordIndex`],
    });
};
const de_Records = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de__Record(entry, context);
    });
    return retVal;
};
const de_ReplicationDetails = (output, context) => {
    return take(output, {
        replicated: [, __expectBoolean, `replicated`],
        replicatedExternally: [, __expectBoolean, `replicatedExternally`],
        replicationAccounts: [, _json, `replicationAccounts`],
    });
};
const de_ResourceProfileArtifact = (output, context) => {
    return take(output, {
        arn: [, __expectString, `arn`],
        classificationResultStatus: [, __expectString, `classificationResultStatus`],
        sensitive: [, __expectBoolean, `sensitive`],
    });
};
const de_ResourcesAffected = (output, context) => {
    return take(output, {
        s3Bucket: [, (_) => de_S3Bucket(_, context), `s3Bucket`],
        s3Object: [, (_) => de_S3Object(_, context), `s3Object`],
    });
};
const de_ResourceStatistics = (output, context) => {
    return take(output, {
        totalBytesClassified: [, __expectLong, `totalBytesClassified`],
        totalDetections: [, __expectLong, `totalDetections`],
        totalDetectionsSuppressed: [, __expectLong, `totalDetectionsSuppressed`],
        totalItemsClassified: [, __expectLong, `totalItemsClassified`],
        totalItemsSensitive: [, __expectLong, `totalItemsSensitive`],
        totalItemsSkipped: [, __expectLong, `totalItemsSkipped`],
        totalItemsSkippedInvalidEncryption: [, __expectLong, `totalItemsSkippedInvalidEncryption`],
        totalItemsSkippedInvalidKms: [, __expectLong, `totalItemsSkippedInvalidKms`],
        totalItemsSkippedPermissionDenied: [, __expectLong, `totalItemsSkippedPermissionDenied`],
    });
};
const de_RetrievalConfiguration = (output, context) => {
    return take(output, {
        externalId: [, __expectString, `externalId`],
        retrievalMode: [, __expectString, `retrievalMode`],
        roleName: [, __expectString, `roleName`],
    });
};
const de_RevealConfiguration = (output, context) => {
    return take(output, {
        kmsKeyId: [, __expectString, `kmsKeyId`],
        status: [, __expectString, `status`],
    });
};
const de_S3Bucket = (output, context) => {
    return take(output, {
        allowsUnencryptedObjectUploads: [, __expectString, `allowsUnencryptedObjectUploads`],
        arn: [, __expectString, `arn`],
        createdAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `createdAt`],
        defaultServerSideEncryption: [, (_) => de_ServerSideEncryption(_, context), `defaultServerSideEncryption`],
        name: [, __expectString, `name`],
        owner: [, (_) => de_S3BucketOwner(_, context), `owner`],
        publicAccess: [, (_) => de_BucketPublicAccess(_, context), `publicAccess`],
        tags: [, (_) => de_KeyValuePairList(_, context), `tags`],
    });
};
const de_S3BucketCriteriaForJob = (output, context) => {
    return take(output, {
        excludes: [, (_) => de_CriteriaBlockForJob(_, context), `excludes`],
        includes: [, (_) => de_CriteriaBlockForJob(_, context), `includes`],
    });
};
const de_S3BucketDefinitionForJob = (output, context) => {
    return take(output, {
        accountId: [, __expectString, `accountId`],
        buckets: [, _json, `buckets`],
    });
};
const de_S3BucketOwner = (output, context) => {
    return take(output, {
        displayName: [, __expectString, `displayName`],
        id: [, __expectString, `id`],
    });
};
const de_S3ClassificationScope = (output, context) => {
    return take(output, {
        excludes: [, (_) => de_S3ClassificationScopeExclusion(_, context), `excludes`],
    });
};
const de_S3ClassificationScopeExclusion = (output, context) => {
    return take(output, {
        bucketNames: [, _json, `bucketNames`],
    });
};
const de_S3Destination = (output, context) => {
    return take(output, {
        bucketName: [, __expectString, `bucketName`],
        keyPrefix: [, __expectString, `keyPrefix`],
        kmsKeyArn: [, __expectString, `kmsKeyArn`],
    });
};
const de_S3JobDefinition = (output, context) => {
    return take(output, {
        bucketCriteria: [, (_) => de_S3BucketCriteriaForJob(_, context), `bucketCriteria`],
        bucketDefinitions: [, (_) => de___listOfS3BucketDefinitionForJob(_, context), `bucketDefinitions`],
        scoping: [, (_) => de_Scoping(_, context), `scoping`],
    });
};
const de_S3Object = (output, context) => {
    return take(output, {
        bucketArn: [, __expectString, `bucketArn`],
        eTag: [, __expectString, `eTag`],
        extension: [, __expectString, `extension`],
        key: [, __expectString, `key`],
        lastModified: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `lastModified`],
        path: [, __expectString, `path`],
        publicAccess: [, __expectBoolean, `publicAccess`],
        serverSideEncryption: [, (_) => de_ServerSideEncryption(_, context), `serverSideEncryption`],
        size: [, __expectLong, `size`],
        storageClass: [, __expectString, `storageClass`],
        tags: [, (_) => de_KeyValuePairList(_, context), `tags`],
        versionId: [, __expectString, `versionId`],
    });
};
const de_S3WordsList = (output, context) => {
    return take(output, {
        bucketName: [, __expectString, `bucketName`],
        objectKey: [, __expectString, `objectKey`],
    });
};
const de_Scoping = (output, context) => {
    return take(output, {
        excludes: [, (_) => de_JobScopingBlock(_, context), `excludes`],
        includes: [, (_) => de_JobScopingBlock(_, context), `includes`],
    });
};
const de_SecurityHubConfiguration = (output, context) => {
    return take(output, {
        publishClassificationFindings: [, __expectBoolean, `publishClassificationFindings`],
        publishPolicyFindings: [, __expectBoolean, `publishPolicyFindings`],
    });
};
const de_SensitiveData = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SensitiveDataItem(entry, context);
    });
    return retVal;
};
const de_SensitiveDataItem = (output, context) => {
    return take(output, {
        category: [, __expectString, `category`],
        detections: [, (_) => de_DefaultDetections(_, context), `detections`],
        totalCount: [, __expectLong, `totalCount`],
    });
};
const de_SensitiveDataOccurrences = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de___listOfDetectedDataDetails(value, context);
        return acc;
    }, {});
};
const de_SensitivityAggregations = (output, context) => {
    return take(output, {
        classifiableSizeInBytes: [, __expectLong, `classifiableSizeInBytes`],
        publiclyAccessibleCount: [, __expectLong, `publiclyAccessibleCount`],
        totalCount: [, __expectLong, `totalCount`],
        totalSizeInBytes: [, __expectLong, `totalSizeInBytes`],
    });
};
const de_SensitivityInspectionTemplateExcludes = (output, context) => {
    return take(output, {
        managedDataIdentifierIds: [, _json, `managedDataIdentifierIds`],
    });
};
const de_SensitivityInspectionTemplateIncludes = (output, context) => {
    return take(output, {
        allowListIds: [, _json, `allowListIds`],
        customDataIdentifierIds: [, _json, `customDataIdentifierIds`],
        managedDataIdentifierIds: [, _json, `managedDataIdentifierIds`],
    });
};
const de_SensitivityInspectionTemplatesEntry = (output, context) => {
    return take(output, {
        id: [, __expectString, `id`],
        name: [, __expectString, `name`],
    });
};
const de_ServerSideEncryption = (output, context) => {
    return take(output, {
        encryptionType: [, __expectString, `encryptionType`],
        kmsMasterKeyId: [, __expectString, `kmsMasterKeyId`],
    });
};
const de_ServiceLimit = (output, context) => {
    return take(output, {
        isServiceLimited: [, __expectBoolean, `isServiceLimited`],
        unit: [, __expectString, `unit`],
        value: [, __expectLong, `value`],
    });
};
const de_SessionContext = (output, context) => {
    return take(output, {
        attributes: [, (_) => de_SessionContextAttributes(_, context), `attributes`],
        sessionIssuer: [, (_) => de_SessionIssuer(_, context), `sessionIssuer`],
    });
};
const de_SessionContextAttributes = (output, context) => {
    return take(output, {
        creationDate: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `creationDate`],
        mfaAuthenticated: [, __expectBoolean, `mfaAuthenticated`],
    });
};
const de_SessionIssuer = (output, context) => {
    return take(output, {
        accountId: [, __expectString, `accountId`],
        arn: [, __expectString, `arn`],
        principalId: [, __expectString, `principalId`],
        type: [, __expectString, `type`],
        userName: [, __expectString, `userName`],
    });
};
const de_Severity = (output, context) => {
    return take(output, {
        description: [, __expectString, `description`],
        score: [, __expectLong, `score`],
    });
};
const de_SeverityLevel = (output, context) => {
    return take(output, {
        occurrencesThreshold: [, __expectLong, `occurrencesThreshold`],
        severity: [, __expectString, `severity`],
    });
};
const de_SeverityLevelList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SeverityLevel(entry, context);
    });
    return retVal;
};
const de_SimpleCriterionForJob = (output, context) => {
    return take(output, {
        comparator: [, __expectString, `comparator`],
        key: [, __expectString, `key`],
        values: [, _json, `values`],
    });
};
const de_SimpleScopeTerm = (output, context) => {
    return take(output, {
        comparator: [, __expectString, `comparator`],
        key: [, __expectString, `key`],
        values: [, _json, `values`],
    });
};
const de_Statistics = (output, context) => {
    return take(output, {
        approximateNumberOfObjectsToProcess: [, __limitedParseDouble, `approximateNumberOfObjectsToProcess`],
        numberOfRuns: [, __limitedParseDouble, `numberOfRuns`],
    });
};
const de_TagCriterionForJob = (output, context) => {
    return take(output, {
        comparator: [, __expectString, `comparator`],
        tagValues: [, (_) => de___listOfTagCriterionPairForJob(_, context), `tagValues`],
    });
};
const de_TagCriterionPairForJob = (output, context) => {
    return take(output, {
        key: [, __expectString, `key`],
        value: [, __expectString, `value`],
    });
};
const de_TagScopeTerm = (output, context) => {
    return take(output, {
        comparator: [, __expectString, `comparator`],
        key: [, __expectString, `key`],
        tagValues: [, (_) => de___listOfTagValuePair(_, context), `tagValues`],
        target: [, __expectString, `target`],
    });
};
const de_TagValuePair = (output, context) => {
    return take(output, {
        key: [, __expectString, `key`],
        value: [, __expectString, `value`],
    });
};
const de_UnprocessedAccount = (output, context) => {
    return take(output, {
        accountId: [, __expectString, `accountId`],
        errorCode: [, __expectString, `errorCode`],
        errorMessage: [, __expectString, `errorMessage`],
    });
};
const de_UsageByAccount = (output, context) => {
    return take(output, {
        currency: [, __expectString, `currency`],
        estimatedCost: [, __expectString, `estimatedCost`],
        serviceLimit: [, (_) => de_ServiceLimit(_, context), `serviceLimit`],
        type: [, __expectString, `type`],
    });
};
const de_UsageRecord = (output, context) => {
    return take(output, {
        accountId: [, __expectString, `accountId`],
        automatedDiscoveryFreeTrialStartDate: [
            ,
            (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
            `automatedDiscoveryFreeTrialStartDate`,
        ],
        freeTrialStartDate: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `freeTrialStartDate`],
        usage: [, (_) => de___listOfUsageByAccount(_, context), `usage`],
    });
};
const de_UsageTotal = (output, context) => {
    return take(output, {
        currency: [, __expectString, `currency`],
        estimatedCost: [, __expectString, `estimatedCost`],
        type: [, __expectString, `type`],
    });
};
const de_UserIdentity = (output, context) => {
    return take(output, {
        assumedRole: [, (_) => de_AssumedRole(_, context), `assumedRole`],
        awsAccount: [, (_) => de_AwsAccount(_, context), `awsAccount`],
        awsService: [, (_) => de_AwsService(_, context), `awsService`],
        federatedUser: [, (_) => de_FederatedUser(_, context), `federatedUser`],
        iamUser: [, (_) => de_IamUser(_, context), `iamUser`],
        root: [, (_) => de_UserIdentityRoot(_, context), `root`],
        type: [, __expectString, `type`],
    });
};
const de_UserIdentityRoot = (output, context) => {
    return take(output, {
        accountId: [, __expectString, `accountId`],
        arn: [, __expectString, `arn`],
        principalId: [, __expectString, `principalId`],
    });
};
const de_UserPausedDetails = (output, context) => {
    return take(output, {
        jobExpiresAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `jobExpiresAt`],
        jobImminentExpirationHealthEventArn: [, __expectString, `jobImminentExpirationHealthEventArn`],
        jobPausedAt: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `jobPausedAt`],
    });
};
const de_WeeklySchedule = (output, context) => {
    return take(output, {
        dayOfWeek: [, __expectString, `dayOfWeek`],
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const _aAI = "adminAccountId";
const _aI = "accountIds";
const _iJC = "ignoreJobChecks";
const _mR = "maxResults";
const _n = "name";
const _nT = "nextToken";
const _oA = "onlyAssociated";
const _rA = "resourceArn";
const _tK = "tagKeys";
const _tR = "timeRange";
