"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("aws-cdk-lib");
const assertions_1 = require("aws-cdk-lib/assertions");
const apigwv2 = require("aws-cdk-lib/aws-apigatewayv2");
const aws_apigatewayv2_authorizers_1 = require("aws-cdk-lib/aws-apigatewayv2-authorizers");
const aws_apigatewayv2_integrations_1 = require("aws-cdk-lib/aws-apigatewayv2-integrations");
const iam = require("aws-cdk-lib/aws-iam");
const sqs = require("aws-cdk-lib/aws-sqs");
const __1 = require("..");
const utils = require("../lib/utils");
test("creates API Gateway role and grants permissions and apigateway stage setup", () => {
    const app = new cdk.App();
    const stack = new cdk.Stack(app, "TestStack");
    const queue = new sqs.Queue(stack, "TestQueue", {
        fifo: true,
        deadLetterQueue: {
            queue: new sqs.Queue(stack, "DeadLetterQueue", {
                fifo: true,
            }),
            maxReceiveCount: 10,
        },
    });
    (0, __1.buildWebSocketQueueApi)(stack, "TestApi", {
        queue,
        createDefaultRoute: true,
    });
    const template = assertions_1.Template.fromStack(stack);
    template.resourceCountIs("AWS::IAM::Role", 1);
    template.hasResourceProperties("AWS::IAM::Role", {
        AssumeRolePolicyDocument: {
            Statement: [
                {
                    Action: "sts:AssumeRole",
                    Effect: "Allow",
                    Principal: {
                        Service: "apigateway.amazonaws.com",
                    },
                },
            ],
        },
    });
    template.resourceCountIs("AWS::SQS::Queue", 2);
    template.hasResourceProperties("AWS::SQS::Queue", {
        FifoQueue: true,
        RedrivePolicy: {
            deadLetterTargetArn: {
                "Fn::GetAtt": [assertions_1.Match.anyValue(), "Arn"],
            },
            maxReceiveCount: 10,
        },
    });
    template.hasResourceProperties("AWS::SQS::Queue", {
        FifoQueue: true,
        RedrivePolicy: assertions_1.Match.absent(),
    });
    const sqsQueueCapture = new assertions_1.Capture();
    template.hasResourceProperties("AWS::IAM::Policy", {
        PolicyDocument: {
            Statement: [
                {
                    Action: ["sqs:SendMessage", "sqs:GetQueueAttributes", "sqs:GetQueueUrl"],
                    Effect: "Allow",
                    Resource: {
                        "Fn::GetAtt": [sqsQueueCapture, "Arn"],
                    },
                },
                {
                    Action: [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:DescribeLogGroups",
                        "logs:DescribeLogStreams",
                        "logs:PutLogEvents",
                        "logs:GetLogEvents",
                        "logs:FilterLogEvents",
                    ],
                    Effect: "Allow",
                    Resource: {
                        "Fn::GetAtt": [assertions_1.Match.stringLikeRegexp("LogGroup*"), "Arn"],
                    },
                },
            ],
        },
    });
    template.resourceCountIs("AWS::ApiGatewayV2::Api", 1);
    template.resourceCountIs("AWS::ApiGatewayV2::Stage", 1);
    template.hasResourceProperties("AWS::ApiGatewayV2::Stage", {
        StageName: "prod",
        AutoDeploy: true,
    });
    const apigwv2Catpure = new assertions_1.Capture();
    template.resourceCountIs("AWS::ApiGatewayV2::Route", 2);
    template.hasResourceProperties("AWS::ApiGatewayV2::Route", {
        ApiId: {
            Ref: apigwv2Catpure,
        },
        AuthorizationType: "NONE",
        RouteKey: "$default",
        Target: {
            "Fn::Join": [
                "",
                [
                    "integrations/",
                    {
                        Ref: assertions_1.Match.stringLikeRegexp("WebSocketApiTestApidefaultRoutedefault"),
                    },
                ],
            ],
        },
    });
    template.hasResourceProperties("AWS::ApiGatewayV2::Route", {
        ApiId: {
            Ref: apigwv2Catpure,
        },
        AuthorizationType: "AWS_IAM",
        RouteKey: "$connect",
        Target: {
            "Fn::Join": [
                "",
                [
                    "integrations/",
                    {
                        Ref: assertions_1.Match.stringLikeRegexp("WebSocketApiTestApiconnectRouteconnect"),
                    },
                ],
            ],
        },
    });
    template.hasResourceProperties("AWS::ApiGatewayV2::Integration", {
        ApiId: {
            Ref: apigwv2Catpure.asString(),
        },
        CredentialsArn: {
            "Fn::GetAtt": [assertions_1.Match.anyValue(), "Arn"],
        },
        IntegrationMethod: "POST",
        IntegrationType: "AWS",
        IntegrationUri: {
            "Fn::Join": [
                "",
                [
                    "arn:",
                    {
                        Ref: "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                        Ref: "AWS::Region",
                    },
                    ":sqs:path/",
                    {
                        Ref: "AWS::AccountId",
                    },
                    "/",
                    {
                        "Fn::GetAtt": [sqsQueueCapture.asString(), "QueueName"],
                    },
                ],
            ],
        },
        PassthroughBehavior: "NEVER",
        RequestParameters: {
            "integration.request.header.Content-Type": "'application/x-www-form-urlencoded'",
        },
        RequestTemplates: {
            $default: __1.DEFAULT_ROUTE_QUEUE_VTL_CONFIG,
        },
        TemplateSelectionExpression: "\\$default",
    });
});
test("creates API Gateway role and grants permissions and apigateway stage setup", () => {
    const app = new cdk.App();
    const stack = new cdk.Stack(app, "TestStack");
    new apigwv2.WebSocketApi(stack, `WebSocketApi`, {
        apiName: "TestApi",
        connectRouteOptions: {
            integration: new aws_apigatewayv2_integrations_1.WebSocketMockIntegration("connect-mock"),
            authorizer: new aws_apigatewayv2_authorizers_1.WebSocketIamAuthorizer(),
        },
        disconnectRouteOptions: {
            integration: new aws_apigatewayv2_integrations_1.WebSocketMockIntegration("disconnect-mock"),
        },
        defaultRouteOptions: {
            integration: new aws_apigatewayv2_integrations_1.WebSocketMockIntegration("default-mock"),
        },
    });
    const template = assertions_1.Template.fromStack(stack);
    template.resourceCountIs("AWS::ApiGatewayV2::Api", 1);
    template.resourceCountIs("AWS::ApiGatewayV2::Stage", 0);
    template.resourceCountIs("AWS::ApiGatewayV2::Integration", 3);
    template.allResourcesProperties("AWS::ApiGatewayV2::Integration", {
        IntegrationType: "MOCK",
    });
    template.hasResourceProperties("AWS::ApiGatewayV2::Route", {
        ApiId: assertions_1.Match.anyValue(),
        AuthorizationType: "AWS_IAM",
        RouteKey: "$connect",
        Target: {
            "Fn::Join": ["", ["integrations/", { Ref: assertions_1.Match.stringLikeRegexp("WebSocketApiconnectRouteconnectmock") }]],
        },
    });
    template.hasResourceProperties("AWS::ApiGatewayV2::Route", {
        ApiId: assertions_1.Match.anyValue(),
        RouteKey: "$disconnect",
        Target: {
            "Fn::Join": ["", ["integrations/", { Ref: assertions_1.Match.stringLikeRegexp("WebSocketApidisconnectRoutedisconnectmock") }]],
        },
    });
    template.hasResourceProperties("AWS::ApiGatewayV2::Route", {
        ApiId: assertions_1.Match.anyValue(),
        RouteKey: "$default",
        Target: {
            "Fn::Join": ["", ["integrations/", { Ref: assertions_1.Match.stringLikeRegexp("WebSocketApidefaultRoutedefaultmock") }]],
        },
    });
});
test("buildWebSocketApiProps creates correct WebSocket API props", () => {
    const app = new cdk.App();
    const stack = new cdk.Stack(app, "TestStack");
    const role = new iam.Role(stack, "TestRole", {
        assumedBy: new iam.ServicePrincipal("apigateway.amazonaws.com"),
    });
    const queue = new sqs.Queue(stack, "TestQueue");
    const propsWithDefaultRoute = (0, __1.buildWebSocketApiProps)(role, queue, true);
    expect(propsWithDefaultRoute.defaultRouteOptions).toBeDefined();
    expect(propsWithDefaultRoute.defaultRouteOptions).toEqual((0, __1.buildWebSocketQueueRouteOptions)(role, queue, "$default", { $default: __1.DEFAULT_ROUTE_QUEUE_VTL_CONFIG }));
    expect(propsWithDefaultRoute.connectRouteOptions).toEqual(__1.connectRouteOptions);
    const propsWithoutDefaultRoute = (0, __1.buildWebSocketApiProps)(role, queue, false);
    expect(propsWithoutDefaultRoute.defaultRouteOptions).toBeUndefined();
    expect(() => (0, __1.buildWebSocketApiProps)(role, undefined, true)).toThrowError("role and sqs must be provided to create a default route");
    expect(() => (0, __1.buildWebSocketApiProps)(undefined, queue, true)).toThrowError("role and sqs must be provided to create a default route");
});
test("buildWebSocketApiProps creates correct WebSocket API props with different values of defaultIamAuthorization and connectRouteOptions", () => {
    const app = new cdk.App();
    const stack = new cdk.Stack(app, "TestStack");
    const role = new iam.Role(stack, "TestRole", {
        assumedBy: new iam.ServicePrincipal("apigateway.amazonaws.com"),
    });
    const queue = new sqs.Queue(stack, "TestQueue");
    // do not create $default and $connect
    const apiPropsWithNoDefaultAndConnect = (0, __1.buildWebSocketApiProps)(role, queue, false, undefined, false);
    expect(apiPropsWithNoDefaultAndConnect.defaultRouteOptions).toBeUndefined();
    expect(apiPropsWithNoDefaultAndConnect.connectRouteOptions).toBeUndefined();
    // create $default, do not create $connect
    const apiPropsWithNoConnect = (0, __1.buildWebSocketApiProps)(role, queue, true, undefined, false);
    expect(apiPropsWithNoConnect.defaultRouteOptions).toBeDefined();
    expect(apiPropsWithNoConnect.connectRouteOptions).toBeUndefined();
});
test("buildWebSocketQueueApi with defaultIamAuthorization is not set", () => {
    const app = new cdk.App();
    const stack = new cdk.Stack(app, "TestStack");
    const queue = new sqs.Queue(stack, "TestQueue");
    // not supplying authorizer with $connect with the expectation that the synthesized stack with add
    // an authorizer because defaultIamAuthorization is not set to false.
    (0, __1.buildWebSocketQueueApi)(stack, "TestApi", {
        queue,
        createDefaultRoute: true,
        webSocketApiProps: {
            connectRouteOptions: {
                integration: new aws_apigatewayv2_integrations_1.WebSocketMockIntegration("user-created-mock"),
            },
        },
    });
    const template = assertions_1.Template.fromStack(stack);
    template.hasResourceProperties("AWS::ApiGatewayV2::Route", {
        ApiId: assertions_1.Match.anyValue(),
        AuthorizationType: "AWS_IAM",
        RouteKey: "$connect",
        Target: {
            "Fn::Join": [
                "",
                ["integrations/", { Ref: assertions_1.Match.stringLikeRegexp("WebSocketApiTestApiconnectRouteusercreatedmock") }],
            ],
        },
    });
});
test("buildWebSocketQueueApi with defaultIamAuthorization is set to false and connectRouteOptions does not set authorizer", () => {
    const app = new cdk.App();
    const stack = new cdk.Stack(app, "TestStack");
    const queue = new sqs.Queue(stack, "TestQueue");
    const printWarningSpy = jest.spyOn(utils, "printWarning");
    // not supplying authorizer with $connect with the expectation that the synthesized stack with add
    // an authorizer because defaultIamAuthorization is not set to false.
    (0, __1.buildWebSocketQueueApi)(stack, "TestApi", {
        queue,
        createDefaultRoute: false,
        webSocketApiProps: {
            connectRouteOptions: {
                integration: new aws_apigatewayv2_integrations_1.WebSocketMockIntegration("user-created-mock"),
            },
        },
        defaultIamAuthorization: false,
    });
    const template = assertions_1.Template.fromStack(stack);
    template.hasResourceProperties("AWS::ApiGatewayV2::Route", {
        ApiId: assertions_1.Match.anyValue(),
        AuthorizationType: "NONE",
        RouteKey: "$connect",
        Target: {
            "Fn::Join": [
                "",
                ["integrations/", { Ref: assertions_1.Match.stringLikeRegexp("WebSocketApiTestApiconnectRouteusercreatedmock") }],
            ],
        },
    });
    expect(printWarningSpy).toBeCalledWith("This construct will create a WebSocket with NO Authorizer (defaultIamAuthorization is set to false).");
    printWarningSpy.mockRestore();
});
test("buildWebSocketQueueApi when passing a custom route name, it should add a custom route integration to the websocket", () => {
    const app = new cdk.App();
    const stack = new cdk.Stack(app, "TestStack");
    const queue = new sqs.Queue(stack, "TestQueue");
    const customRouteName = "fakeroutename";
    (0, __1.buildWebSocketQueueApi)(stack, "TestApi", {
        queue,
        createDefaultRoute: false,
        defaultIamAuthorization: false,
        customRouteName,
    });
    const template = assertions_1.Template.fromStack(stack);
    template.resourceCountIs("AWS::ApiGatewayV2::Integration", 1);
    template.hasResourceProperties("AWS::ApiGatewayV2::Integration", {
        ApiId: {
            Ref: assertions_1.Match.anyValue(),
        },
        CredentialsArn: {
            "Fn::GetAtt": [assertions_1.Match.anyValue(), "Arn"],
        },
        IntegrationMethod: "POST",
        IntegrationType: "AWS",
        IntegrationUri: {
            "Fn::Join": [
                "",
                [
                    "arn:",
                    {
                        Ref: "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                        Ref: "AWS::Region",
                    },
                    ":sqs:path/",
                    {
                        Ref: "AWS::AccountId",
                    },
                    "/",
                    {
                        "Fn::GetAtt": [assertions_1.Match.anyValue(), "QueueName"],
                    },
                ],
            ],
        },
        PassthroughBehavior: "NEVER",
        RequestParameters: {
            "integration.request.header.Content-Type": "'application/x-www-form-urlencoded'",
        },
        RequestTemplates: {
            [customRouteName]: __1.DEFAULT_ROUTE_QUEUE_VTL_CONFIG,
        },
        TemplateSelectionExpression: customRouteName,
    });
    template.resourceCountIs("AWS::ApiGatewayV2::Route", 1);
    template.hasResourceProperties("AWS::ApiGatewayV2::Route", {
        ApiId: {
            Ref: assertions_1.Match.anyValue(),
        },
        RouteKey: customRouteName,
        Target: {
            "Fn::Join": [
                "",
                [
                    "integrations/",
                    {
                        Ref: assertions_1.Match.stringLikeRegexp("WebSocketApiTestApifakeroutenameRoutefakeroutename"),
                    },
                ],
            ],
        },
    });
});
test("buildWebSocketQueueApi when passing a custom route name, with requestTemplate, should map the request template to the custom route", () => {
    const app = new cdk.App();
    const stack = new cdk.Stack(app, "TestStack");
    const queue = new sqs.Queue(stack, "TestQueue");
    const customRouteName = "fakeroutename";
    (0, __1.buildWebSocketQueueApi)(stack, "TestApi", {
        queue,
        createDefaultRoute: false,
        defaultIamAuthorization: false,
        customRouteName,
        defaultRouteRequestTemplate: {
            [customRouteName]: "a&fake&vtl",
        },
    });
    const template = assertions_1.Template.fromStack(stack);
    template.resourceCountIs("AWS::ApiGatewayV2::Integration", 1);
    template.hasResourceProperties("AWS::ApiGatewayV2::Integration", {
        ApiId: {
            Ref: assertions_1.Match.anyValue(),
        },
        CredentialsArn: {
            "Fn::GetAtt": [assertions_1.Match.anyValue(), "Arn"],
        },
        IntegrationMethod: "POST",
        IntegrationType: "AWS",
        IntegrationUri: {
            "Fn::Join": [
                "",
                [
                    "arn:",
                    {
                        Ref: "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                        Ref: "AWS::Region",
                    },
                    ":sqs:path/",
                    {
                        Ref: "AWS::AccountId",
                    },
                    "/",
                    {
                        "Fn::GetAtt": [assertions_1.Match.anyValue(), "QueueName"],
                    },
                ],
            ],
        },
        PassthroughBehavior: "NEVER",
        RequestParameters: {
            "integration.request.header.Content-Type": "'application/x-www-form-urlencoded'",
        },
        RequestTemplates: {
            [customRouteName]: "a&fake&vtl",
        },
        TemplateSelectionExpression: customRouteName,
    });
    template.resourceCountIs("AWS::ApiGatewayV2::Route", 1);
    template.hasResourceProperties("AWS::ApiGatewayV2::Route", {
        ApiId: {
            Ref: assertions_1.Match.anyValue(),
        },
        RouteKey: customRouteName,
        Target: {
            "Fn::Join": [
                "",
                [
                    "integrations/",
                    {
                        Ref: assertions_1.Match.stringLikeRegexp("WebSocketApiTestApifakeroutenameRoutefakeroutename"),
                    },
                ],
            ],
        },
    });
});
//# sourceMappingURL=data:application/json;base64,