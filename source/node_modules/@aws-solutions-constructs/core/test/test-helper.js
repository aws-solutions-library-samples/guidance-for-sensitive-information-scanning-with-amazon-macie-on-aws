"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.fakeEcrRepoArn = void 0;
exports.CreateScrapBucket = CreateScrapBucket;
exports.generateIntegStackName = generateIntegStackName;
exports.getTestVpc = getTestVpc;
exports.getFakeCertificate = getFakeCertificate;
exports.CreateTestStateMachine = CreateTestStateMachine;
exports.CreateTestStateMachineDefinitionBody = CreateTestStateMachineDefinitionBody;
exports.suppressCustomHandlerCfnNagWarnings = suppressCustomHandlerCfnNagWarnings;
exports.CreateTestCache = CreateTestCache;
exports.expectKmsKeyAttachedToCorrectResource = expectKmsKeyAttachedToCorrectResource;
exports.expectNonexistence = expectNonexistence;
exports.CreateTestApi = CreateTestApi;
exports.CreateApiAuthorizer = CreateApiAuthorizer;
exports.CreateShortUniqueTestName = CreateShortUniqueTestName;
exports.SuppressCfnNagLambdaWarnings = SuppressCfnNagLambdaWarnings;
const aws_s3_1 = require("aws-cdk-lib/aws-s3");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const vpc_helper_1 = require("../lib/vpc-helper");
const vpc_defaults_1 = require("../lib/vpc-defaults");
const utils_1 = require("../lib/utils");
const defaults = require("../index");
const elasticache_helper_1 = require("../lib/elasticache-helper");
const path = require("path");
const cache = require("aws-cdk-lib/aws-elasticache");
const ec2 = require("aws-cdk-lib/aws-ec2");
const acm = require("aws-cdk-lib/aws-certificatemanager");
const elasticache_defaults_1 = require("../lib/elasticache-defaults");
const assertions_1 = require("aws-cdk-lib/assertions");
const lambda = require("aws-cdk-lib/aws-lambda");
const sfn = require("aws-cdk-lib/aws-stepfunctions");
const sftasks = require("aws-cdk-lib/aws-stepfunctions-tasks");
const api = require("aws-cdk-lib/aws-apigateway");
exports.fakeEcrRepoArn = 'arn:aws:ecr:us-east-1:123456789012:repository/fake-repo';
// Creates a bucket used for testing - minimal properties, destroyed after test
function CreateScrapBucket(scope, id, props) {
    if (props?.serverAccessLogsBucket) {
        throw new Error("Don't try to send a log bucket to CreateScrapBucket");
    }
    // Basic props for scrap and log buckets
    const defaultProps = {
        versioned: true,
        removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
        autoDeleteObjects: true,
        encryption: aws_s3_1.BucketEncryption.S3_MANAGED,
        enforceSSL: true
    };
    // Create basic log bucket
    const logBucket = new aws_s3_1.Bucket(scope, `${id}Log`, defaultProps);
    // Combine basic props with special props from test client
    let synthesizedProps;
    if (props) {
        synthesizedProps = (0, utils_1.overrideProps)(defaultProps, props);
    }
    else {
        synthesizedProps = defaultProps;
    }
    // Finally - set up logging for the scrap bucket
    const finalProps = (0, utils_1.overrideProps)(synthesizedProps, { serverAccessLogsBucket: logBucket });
    const scriptBucket = new aws_s3_1.Bucket(scope, id, finalProps);
    (0, utils_1.addCfnSuppressRules)(logBucket, [
        {
            id: "W35",
            reason: "This is a log bucket",
        }
    ]);
    return scriptBucket;
}
/**
 * @summary Creates a stack name for Integration tests
 * @param {string} filename - the filename of the integ test
 * @returns {string} - a string with current filename after removing anything before the prefix '.' and suffix '.js'
 * e.g. 'integ.apigateway-dynamodb-CRUD.js' will return 'apigateway-dynamodb-CRUD'
 */
function generateIntegStackName(filename) {
    const file = path.basename(filename, path.extname(filename));
    const stackname = file.slice(file.lastIndexOf('.') + 1).replace(/_/g, '-');
    return stackname;
}
// Helper Functions
function getTestVpc(stack, publicFacing = true, userVpcProps) {
    return (0, vpc_helper_1.buildVpc)(stack, {
        defaultVpcProps: publicFacing ?
            (0, vpc_defaults_1.DefaultPublicPrivateVpcProps)() :
            (0, vpc_defaults_1.DefaultIsolatedVpcProps)(),
        constructVpcProps: {
            enableDnsHostnames: true,
            enableDnsSupport: true,
            ipAddresses: ec2.IpAddresses.cidr('172.168.0.0/16'),
        },
        userVpcProps
    });
}
function getFakeCertificate(scope, id) {
    return acm.Certificate.fromCertificateArn(scope, id, "arn:aws:acm:us-east-1:123456789012:certificate/11112222-3333-1234-1234-123456789012");
}
function CreateTestStateMachine(scope, id) {
    return new sfn.StateMachine(scope, id, {
        definitionBody: defaults.CreateTestStateMachineDefinitionBody(scope, id)
    });
}
function CreateTestStateMachineDefinitionBody(scope, id) {
    const smStep = new lambda.Function(scope, `lambda${id}`, {
        code: new lambda.InlineCode("exports.handler = async (event) => console.log(event)"),
        runtime: lambda.Runtime.NODEJS_20_X,
        handler: "index.handler",
    });
    const task = new sftasks.LambdaInvoke(scope, `task${id}`, {
        lambdaFunction: smStep,
    });
    SuppressCfnNagLambdaWarnings(aws_cdk_lib_1.Stack.of(scope));
    return sfn.DefinitionBody.fromChainable(task);
}
function suppressCustomHandlerCfnNagWarnings(stack, handlerId) {
    stack.node.children.forEach(child => {
        if (child.node.id === handlerId) {
            const handlerFunction = child.node.findChild('Handler');
            (0, utils_1.addCfnSuppressRules)(handlerFunction, [{ id: "W58", reason: "CDK generated custom resource" }]);
            (0, utils_1.addCfnSuppressRules)(handlerFunction, [{ id: "W89", reason: "CDK generated custom resource" }]);
            (0, utils_1.addCfnSuppressRules)(handlerFunction, [{ id: "W92", reason: "CDK generated custom resource" }]);
        }
    });
}
function CreateTestCache(scope, id, vpc, port) {
    const cachePort = port ?? (0, elasticache_defaults_1.GetDefaultCachePort)();
    // Create the subnet group from all the isolated subnets in the VPC
    const subnetGroup = (0, elasticache_helper_1.createCacheSubnetGroup)(scope, vpc, id);
    const emptySG = new ec2.SecurityGroup(scope, `${id}-cachesg`, {
        vpc,
        allowAllOutbound: true,
    });
    (0, utils_1.addCfnSuppressRules)(emptySG, [{ id: "W40", reason: "Test Resource" }]);
    (0, utils_1.addCfnSuppressRules)(emptySG, [{ id: "W5", reason: "Test Resource" }]);
    (0, utils_1.addCfnSuppressRules)(emptySG, [{ id: "W36", reason: "Test Resource" }]);
    const cacheProps = {
        clusterName: `${id}-cdk-cluster`,
        cacheNodeType: "cache.t3.medium",
        engine: "memcached",
        numCacheNodes: 2,
        port: cachePort,
        azMode: "cross-az",
        vpcSecurityGroupIds: [emptySG.securityGroupId],
        cacheSubnetGroupName: subnetGroup.cacheSubnetGroupName,
    };
    const newCache = new cache.CfnCacheCluster(scope, `${id}-cluster`, cacheProps);
    newCache.addDependency(subnetGroup);
    return newCache;
}
/**
 * Asserts that a KMS key with a specific description exists on a resource
 *
 * @param stack The CloudFormation Stack that contains the to validate.
 * @param parentResourceType The type of CloudFormation Resource that should have the key set on it, e.g., `AWS::SNS::Topic`, etc...
 * @param description The value of the Description property on the KMS Key
 */
function expectKmsKeyAttachedToCorrectResource(stack, parentResourceType, keyDescription) {
    const template = assertions_1.Template.fromStack(stack);
    const resource = template.findResources('AWS::KMS::Key', {
        Properties: {
            Description: assertions_1.Match.exact(keyDescription)
        }
    });
    const [logicalId] = Object.keys(resource);
    assertions_1.Template.fromStack(stack).hasResourceProperties(parentResourceType, {
        KmsMasterKeyId: {
            "Fn::GetAtt": [
                logicalId,
                "Arn"
            ]
        }
    });
}
function expectNonexistence(stack, type, props) {
    const shouldFindNothing = assertions_1.Template.fromStack(stack).findResources(type, props);
    expect(Object.keys(shouldFindNothing).length).toEqual(0);
}
// private helper class to suppress the standard cfn nag warnings for lambda functions used in integ tests
class CfnNagLambdaAspect {
    visit(node) {
        const resource = node;
        if (resource.cfnResourceType === 'AWS::Lambda::Function') {
            (0, utils_1.addCfnSuppressRules)(resource, [
                { id: 'W58', reason: 'This Lambda Function is created for integration testing purposes only and is not part of an actual construct' },
                { id: 'W89', reason: 'This Lambda Function is created for integration testing purposes only and is not part of an actual construct' },
                { id: 'W92', reason: 'This Lambda Function is created for integration testing purposes only and is not part of an actual construct' }
            ]);
        }
    }
}
function CreateTestApi(stack, id) {
    const lambdaFunction = new lambda.Function(stack, `${id}Function`, {
        code: lambda.Code.fromAsset(`${__dirname}/lambda`),
        runtime: defaults.COMMERCIAL_REGION_LAMBDA_NODE_RUNTIME,
        handler: ".handler",
    });
    (0, utils_1.addCfnSuppressRules)(lambdaFunction, [{ id: "W58", reason: "Test Resource" }]);
    (0, utils_1.addCfnSuppressRules)(lambdaFunction, [{ id: "W89", reason: "Test Resource" }]);
    (0, utils_1.addCfnSuppressRules)(lambdaFunction, [{ id: "W92", reason: "Test Resource" }]);
    const restApi = new api.LambdaRestApi(stack, `${id}Api`, {
        handler: lambdaFunction,
        defaultMethodOptions: {
            authorizationType: api.AuthorizationType.CUSTOM,
            authorizer: CreateApiAuthorizer(stack, `${id}-authorizer`)
        }
    });
    const newDeployment = restApi.latestDeployment;
    if (newDeployment) {
        (0, utils_1.addCfnSuppressRules)(newDeployment, [
            { id: "W68", reason: "Test Resource" },
        ]);
    }
    const newMethod = restApi.methods[0];
    (0, utils_1.addCfnSuppressRules)(newMethod, [{ id: "W59", reason: "Test Resource" }]);
    const newMethodTwo = restApi.methods[1];
    (0, utils_1.addCfnSuppressRules)(newMethodTwo, [{ id: "W59", reason: "Test Resource" }]);
    const newStage = restApi.deploymentStage;
    (0, utils_1.addCfnSuppressRules)(newStage, [{ id: "W64", reason: "Test Resource" }]);
    (0, utils_1.addCfnSuppressRules)(newStage, [{ id: "W69", reason: "Test Resource" }]);
    return restApi;
}
function CreateApiAuthorizer(stack, id) {
    const authFn = new lambda.Function(stack, `${id}AuthFunction`, {
        code: lambda.Code.fromAsset(`${__dirname}/lambda`),
        runtime: defaults.COMMERCIAL_REGION_LAMBDA_NODE_RUNTIME,
        handler: ".handler",
    });
    (0, utils_1.addCfnSuppressRules)(authFn, [{ id: "W58", reason: "Test Resource" }]);
    (0, utils_1.addCfnSuppressRules)(authFn, [{ id: "W89", reason: "Test Resource" }]);
    (0, utils_1.addCfnSuppressRules)(authFn, [{ id: "W92", reason: "Test Resource" }]);
    const authorizer = new api.RequestAuthorizer(stack, id, {
        handler: authFn,
        identitySources: [api.IdentitySource.header('Authorization')]
    });
    return authorizer;
}
// Create a short, unique to this stack name
// technically this is not 100% OK, as it only uses a portion of the
// stack guid - but it's for tests only so if the last segment of 2 stack guids collide someday
// (VERY unlikely), just running again should take care of it.
function CreateShortUniqueTestName(stub) {
    const stackGuid = aws_cdk_lib_1.Fn.select(2, aws_cdk_lib_1.Fn.split('/', `${aws_cdk_lib_1.Aws.STACK_ID}`));
    const guidPortion = aws_cdk_lib_1.Fn.select(4, aws_cdk_lib_1.Fn.split('-', stackGuid));
    return aws_cdk_lib_1.Fn.join("-", [stub, guidPortion]);
}
/**
 * Used to suppress cfn nag W58, W89, and W92 rules on lambda integration test resources.
 *
 * @param stack - The stack to suppress cfn nag lambda rules on
 */
function SuppressCfnNagLambdaWarnings(stack) {
    aws_cdk_lib_1.Aspects.of(stack).add(new CfnNagLambdaAspect());
}
//# sourceMappingURL=data:application/json;base64,