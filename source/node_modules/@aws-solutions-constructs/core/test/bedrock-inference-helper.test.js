"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("aws-cdk-lib");
const bedrock_inference_helper_1 = require("../lib/bedrock-inference-helper");
// import { Construct } from 'constructs';
const assertions_1 = require("aws-cdk-lib/assertions");
test('Create cross region Inference Profile by default', () => {
    const stack = new cdk.Stack();
    (0, bedrock_inference_helper_1.buildInferenceProfile)(stack, "test-profile", {
        bedrockModelId: "amazon.nova-lite-v1:0",
    });
    const template = assertions_1.Template.fromStack(stack);
    template.resourceCountIs("AWS::Bedrock::ApplicationInferenceProfile", 1);
    template.hasResourceProperties("AWS::Bedrock::ApplicationInferenceProfile", {
        InferenceProfileName: {
            "Fn::Join": [
                "",
                [
                    "test-profile-",
                    {
                        "Fn::Select": [
                            2,
                            {
                                "Fn::Split": [
                                    "/",
                                    {
                                        "Ref": "AWS::StackId"
                                    }
                                ]
                            }
                        ]
                    }
                ]
            ]
        },
        ModelSource: {
            CopyFrom: {
                "Fn::Join": [
                    "",
                    [
                        "arn:",
                        {
                            "Ref": "AWS::Partition"
                        },
                        ":bedrock:",
                        {
                            "Ref": "AWS::Region"
                        },
                        ":",
                        {
                            "Ref": "AWS::AccountId"
                        },
                        ":inference-profile/",
                        {
                            "Fn::FindInMap": [
                                "testprofileareaprefixmapping",
                                {
                                    "Fn::Select": [
                                        0,
                                        {
                                            "Fn::Split": [
                                                "-",
                                                {
                                                    "Ref": "AWS::Region"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                "prefix"
                            ]
                        },
                        ".amazon.nova-lite-v1:0"
                    ]
                ]
            }
        },
    });
});
test('Test adding Prefix Mapping to template', () => {
    // Stack
    const stack = new cdk.Stack();
    const mapping = (0, bedrock_inference_helper_1.createAreaPrefixMapping)(stack, "test-stack");
    expect(mapping.mapping).toBeDefined();
    expect(mapping.mappingName).toEqual("teststackareaprefixmapping");
    const template = assertions_1.Template.fromStack(stack);
    template.hasMapping(mapping.mappingName, {
        us: {
            prefix: "us"
        },
        eu: {
            prefix: "eu"
        },
        ap: {
            prefix: "apac"
        }
    });
});
test('Test adding Region Mapping to template', () => {
    // Stack
    const stack = new cdk.Stack();
    const mapping = (0, bedrock_inference_helper_1.createAreaRegionMapping)(stack, "test-stack", "model-name");
    expect(mapping.mapping).toBeDefined();
    expect(mapping.mappingName).toEqual("teststackarearegionmapping");
    const template = assertions_1.Template.fromStack(stack);
    template.hasMapping(mapping.mappingName, {
        eu: {
            regionalModels: `arn:aws:bedrock:eu-north-1::foundation-model/model-name,` +
                `arn:aws:bedrock:eu-central-1::foundation-model/model-name,` +
                `arn:aws:bedrock:eu-west-1::foundation-model/model-name,` +
                `arn:aws:bedrock:eu-west-3::foundation-model/model-name`
        },
        us: {
            regionalModels: `arn:aws:bedrock:us-east-1::foundation-model/model-name,` +
                `arn:aws:bedrock:us-east-2::foundation-model/model-name,` +
                `arn:aws:bedrock:us-west-2::foundation-model/model-name`
        },
        ap: {
            regionalModels: `arn:aws:bedrock:ap-southeast-2::foundation-model/model-name,` +
                `arn:aws:bedrock:ap-northeast-1::foundation-model/model-name,` +
                `arn:aws:bedrock:ap-south-1::foundation-model/model-name,` +
                `arn:aws:bedrock:ap-northeast-2::foundation-model/model-name,` +
                `arn:aws:bedrock:ap-southeast-1::foundation-model/model-name,` +
                `arn:aws:bedrock:ap-northeast-3::foundation-model/model-name`
        }
    });
});
test('Create single region Inference Profile', () => {
    const stack = new cdk.Stack();
    (0, bedrock_inference_helper_1.buildInferenceProfile)(stack, "test-profile", {
        bedrockModelId: "amazon.nova-lite-v1:0",
        deployCrossRegionProfile: false
    });
    const template = assertions_1.Template.fromStack(stack);
    template.resourceCountIs("AWS::Bedrock::ApplicationInferenceProfile", 1);
    template.hasResourceProperties("AWS::Bedrock::ApplicationInferenceProfile", {
        ModelSource: {
            CopyFrom: {
                "Fn::Join": [
                    "",
                    [
                        "arn:",
                        {
                            "Ref": "AWS::Partition"
                        },
                        ":bedrock:",
                        {
                            "Ref": "AWS::Region"
                        },
                        ":",
                        {
                            "Ref": "AWS::AccountId"
                        },
                        ":foundation-model/amazon.nova-lite-v1:0"
                    ]
                ]
            }
        },
    });
});
test("Test for bad inference props", () => {
    const app = () => {
        (0, bedrock_inference_helper_1.CheckBedrockInferenceProps)({
            bedrockModelId: "amazon.nova-lite-v1:0",
            inferenceProfileProps: {
                inferenceProfileName: "test",
                modelSource: {
                    copyFrom: "test"
                }
            }
        });
    };
    expect(app).toThrowError('Error - The construct will create the modelSource value, it cannot be specified in the props.\n');
});
test('Create cross region Inference Profile by default', () => {
    const stack = new cdk.Stack();
    const testName = "test-profile";
    (0, bedrock_inference_helper_1.buildInferenceProfile)(stack, "test-profile", {
        bedrockModelId: "amazon.nova-lite-v1:0",
        inferenceProfileProps: {
            inferenceProfileName: testName
        }
    });
    const template = assertions_1.Template.fromStack(stack);
    template.resourceCountIs("AWS::Bedrock::ApplicationInferenceProfile", 1);
    template.hasResourceProperties("AWS::Bedrock::ApplicationInferenceProfile", {
        InferenceProfileName: testName,
    });
});
test('Test IsCrossRegionProfile', () => {
    let crossRegion;
    crossRegion = (0, bedrock_inference_helper_1.IsCrossRegionProfile)(true);
    expect(crossRegion).toEqual(true);
    crossRegion = (0, bedrock_inference_helper_1.IsCrossRegionProfile)(false);
    expect(crossRegion).toEqual(false);
    crossRegion = (0, bedrock_inference_helper_1.IsCrossRegionProfile)();
    expect(crossRegion).toEqual(true);
});
//# sourceMappingURL=data:application/json;base64,