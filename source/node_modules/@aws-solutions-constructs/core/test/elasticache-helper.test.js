"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("aws-cdk-lib/assertions");
const test_helper_1 = require("./test-helper");
const cdk = require("aws-cdk-lib");
const ec2 = require("aws-cdk-lib/aws-ec2");
const elasticache_helper_1 = require("../lib/elasticache-helper");
const elasticache_defaults_1 = require("../lib/elasticache-defaults");
test("Test returning existing Cache", () => {
    const stack = new cdk.Stack();
    const testVpc = (0, test_helper_1.getTestVpc)(stack, false);
    const existingCache = (0, test_helper_1.CreateTestCache)(stack, 'test', testVpc);
    const securityGroup = new ec2.SecurityGroup(stack, 'test-sg', {
        vpc: testVpc
    });
    const obtainedCache = (0, elasticache_helper_1.obtainMemcachedCluster)(stack, 'test-cache', {
        existingCache,
        cacheSecurityGroupId: securityGroup.securityGroupId
    });
    expect(obtainedCache).toBe(existingCache);
});
test("Test create cache with no client props", () => {
    const stack = new cdk.Stack();
    const testVpc = (0, test_helper_1.getTestVpc)(stack, false);
    const securityGroup = new ec2.SecurityGroup(stack, 'test-sg', {
        vpc: testVpc
    });
    (0, elasticache_helper_1.obtainMemcachedCluster)(stack, 'test-cache', {
        vpc: testVpc,
        cacheSecurityGroupId: securityGroup.securityGroupId,
        cachePort: 11111,
    });
    const template = assertions_1.Template.fromStack(stack);
    template.hasResourceProperties("AWS::ElastiCache::CacheCluster", {
        Port: 11111,
        AZMode: 'cross-az',
        Engine: 'memcached',
    });
});
test("Test create cache with client props", () => {
    const stack = new cdk.Stack();
    const testVpc = (0, test_helper_1.getTestVpc)(stack, false);
    const securityGroup = new ec2.SecurityGroup(stack, 'test-sg', {
        vpc: testVpc
    });
    (0, elasticache_helper_1.obtainMemcachedCluster)(stack, 'test-cache', {
        vpc: testVpc,
        cacheSecurityGroupId: securityGroup.securityGroupId,
        cachePort: 12321,
        cacheProps: {
            azMode: 'single-az',
            clusterName: 'test-name'
        }
    });
    const template = assertions_1.Template.fromStack(stack);
    template.hasResourceProperties("AWS::ElastiCache::CacheCluster", {
        Port: 12321,
        AZMode: 'single-az',
        Engine: 'memcached',
        ClusterName: 'test-name'
    });
});
test("Test GetCachePort() with existing cache", () => {
    const stack = new cdk.Stack();
    const testVpc = (0, test_helper_1.getTestVpc)(stack, false);
    const existingCache = (0, test_helper_1.CreateTestCache)(stack, 'test', testVpc, 32123);
    const port = (0, elasticache_helper_1.getCachePort)(undefined, existingCache);
    // Since the port from the existing cache is a token,
    // we can't check it directly, but we can ensure
    // the default port was replaced
    expect(port).not.toEqual((0, elasticache_defaults_1.GetDefaultCachePort)());
});
test("Test GetCachePort() with clientCacheProps", () => {
    const clientPort = 32123;
    const port = (0, elasticache_helper_1.getCachePort)({ port: clientPort });
    expect(port).toEqual(clientPort);
});
test("Test GetCachePort() with default port", () => {
    const port = (0, elasticache_helper_1.getCachePort)();
    expect(port).toEqual((0, elasticache_defaults_1.GetDefaultCachePort)());
});
//# sourceMappingURL=data:application/json;base64,