"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
// Imports
const aws_apigatewayv2_integrations_1 = require("aws-cdk-lib/aws-apigatewayv2-integrations");
const defaults = require("../");
const aws_apigatewayv2_authorizers_1 = require("aws-cdk-lib/aws-apigatewayv2-authorizers");
test("Test default VTL transformation config", () => {
    const config = defaults.DEFAULT_ROUTE_QUEUE_VTL_CONFIG;
    expect(config).toMatch("Action=SendMessage&MessageGroupId=$input.path('$.MessageGroupId')&MessageDeduplicationId=$context.requestId&MessageAttribute.1.Name=connectionId&MessageAttribute.1.Value.StringValue=$context.connectionId&MessageAttribute.1.Value.DataType=String&MessageAttribute.2.Name=requestId&MessageAttribute.2.Value.StringValue=$context.requestId&MessageAttribute.2.Value.DataType=String&MessageBody=$util.urlEncode($input.json($util.escapeJavaScript('$').replaceAll(\"\\\\'\",\"'\")))");
});
test('Test connect route options', () => {
    expect(defaults.connectRouteOptions).toStrictEqual({
        integration: new aws_apigatewayv2_integrations_1.WebSocketMockIntegration('connect'),
        authorizer: new aws_apigatewayv2_authorizers_1.WebSocketIamAuthorizer()
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vic29ja2V0LWFwaS1kZWZhdWx0cy50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2Vic29ja2V0LWFwaS1kZWZhdWx0cy50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7R0FXRzs7QUFFSCxVQUFVO0FBQ1YsNkZBQXFGO0FBQ3JGLGdDQUFnQztBQUVoQywyRkFBa0Y7QUFFbEYsSUFBSSxDQUFDLHdDQUF3QyxFQUFFLEdBQUcsRUFBRTtJQUNsRCxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsOEJBQThCLENBQUM7SUFDdkQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FDcEIsMmRBQTJkLENBQzVkLENBQUM7QUFDSixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyw0QkFBNEIsRUFBRSxHQUFHLEVBQUU7SUFDdEMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLGFBQWEsQ0FBQztRQUNqRCxXQUFXLEVBQUUsSUFBSSx3REFBd0IsQ0FBQyxTQUFTLENBQUM7UUFDcEQsVUFBVSxFQUFFLElBQUkscURBQXNCLEVBQUU7S0FDUixDQUFDLENBQUM7QUFDdEMsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqICBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS4gWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogIHdpdGggdGhlIExpY2Vuc2UuIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgb3IgaW4gdGhlICdsaWNlbnNlJyBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVNcbiAqICBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xuICogIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vLyBJbXBvcnRzXG5pbXBvcnQgeyBXZWJTb2NrZXRNb2NrSW50ZWdyYXRpb24gfSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWFwaWdhdGV3YXl2Mi1pbnRlZ3JhdGlvbnNcIjtcbmltcG9ydCAqIGFzIGRlZmF1bHRzIGZyb20gXCIuLi9cIjtcbmltcG9ydCAqIGFzIGFwaWd3djIgZnJvbSAnYXdzLWNkay1saWIvYXdzLWFwaWdhdGV3YXl2Mic7XG5pbXBvcnQgeyBXZWJTb2NrZXRJYW1BdXRob3JpemVyIH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1hcGlnYXRld2F5djItYXV0aG9yaXplcnNcIjtcblxudGVzdChcIlRlc3QgZGVmYXVsdCBWVEwgdHJhbnNmb3JtYXRpb24gY29uZmlnXCIsICgpID0+IHtcbiAgY29uc3QgY29uZmlnID0gZGVmYXVsdHMuREVGQVVMVF9ST1VURV9RVUVVRV9WVExfQ09ORklHO1xuICBleHBlY3QoY29uZmlnKS50b01hdGNoKFxuICAgIFwiQWN0aW9uPVNlbmRNZXNzYWdlJk1lc3NhZ2VHcm91cElkPSRpbnB1dC5wYXRoKCckLk1lc3NhZ2VHcm91cElkJykmTWVzc2FnZURlZHVwbGljYXRpb25JZD0kY29udGV4dC5yZXF1ZXN0SWQmTWVzc2FnZUF0dHJpYnV0ZS4xLk5hbWU9Y29ubmVjdGlvbklkJk1lc3NhZ2VBdHRyaWJ1dGUuMS5WYWx1ZS5TdHJpbmdWYWx1ZT0kY29udGV4dC5jb25uZWN0aW9uSWQmTWVzc2FnZUF0dHJpYnV0ZS4xLlZhbHVlLkRhdGFUeXBlPVN0cmluZyZNZXNzYWdlQXR0cmlidXRlLjIuTmFtZT1yZXF1ZXN0SWQmTWVzc2FnZUF0dHJpYnV0ZS4yLlZhbHVlLlN0cmluZ1ZhbHVlPSRjb250ZXh0LnJlcXVlc3RJZCZNZXNzYWdlQXR0cmlidXRlLjIuVmFsdWUuRGF0YVR5cGU9U3RyaW5nJk1lc3NhZ2VCb2R5PSR1dGlsLnVybEVuY29kZSgkaW5wdXQuanNvbigkdXRpbC5lc2NhcGVKYXZhU2NyaXB0KCckJykucmVwbGFjZUFsbChcXFwiXFxcXFxcXFwnXFxcIixcXFwiJ1xcXCIpKSlcIlxuICApO1xufSk7XG5cbnRlc3QoJ1Rlc3QgY29ubmVjdCByb3V0ZSBvcHRpb25zJywgKCkgPT4ge1xuICBleHBlY3QoZGVmYXVsdHMuY29ubmVjdFJvdXRlT3B0aW9ucykudG9TdHJpY3RFcXVhbCh7XG4gICAgaW50ZWdyYXRpb246IG5ldyBXZWJTb2NrZXRNb2NrSW50ZWdyYXRpb24oJ2Nvbm5lY3QnKSxcbiAgICBhdXRob3JpemVyOiBuZXcgV2ViU29ja2V0SWFtQXV0aG9yaXplcigpXG4gIH0gYXMgYXBpZ3d2Mi5XZWJTb2NrZXRSb3V0ZU9wdGlvbnMpO1xufSk7Il19