"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildUserPool = buildUserPool;
exports.buildUserPoolClient = buildUserPoolClient;
exports.buildIdentityPool = buildIdentityPool;
exports.setupCognitoForSearchService = setupCognitoForSearchService;
exports.buildCognitoForSearchService = buildCognitoForSearchService;
/*
 *  The functions found here in the core library are for internal use and can be changed
 *  or removed outside of a major release. We recommend against calling them directly from client code.
 */
const cognito = require("aws-cdk-lib/aws-cognito");
const iam = require("aws-cdk-lib/aws-iam");
const cdk = require("aws-cdk-lib");
const utils_1 = require("./utils");
const cognito_defaults_1 = require("./cognito-defaults");
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function buildUserPool(scope, userPoolProps) {
    const cognitoUserPoolProps = (0, utils_1.consolidateProps)(cognito_defaults_1.defaultUserPoolProps, userPoolProps);
    const userPool = new cognito.UserPool(scope, 'CognitoUserPool', cognitoUserPoolProps);
    // Set the advancedSecurityMode to ENFORCED
    const cfnUserPool = userPool.node.findChild('Resource');
    cfnUserPool.userPoolAddOns = {
        advancedSecurityMode: 'ENFORCED'
    };
    // Add Cfn Nag suppress for the cognito SMS role policy
    const userPoolSmsRole = userPool.node.tryFindChild('smsRole');
    if (userPoolSmsRole) {
        (0, utils_1.addCfnSuppressRules)(userPool, [
            {
                id: 'W11',
                reason: `Allowing * resource on permissions policy since its used by Cognito to send SMS messages via sns:Publish`
            }
        ]);
    }
    return userPool;
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function buildUserPoolClient(scope, userPool, cognitoUserPoolClientProps) {
    const userPoolClientProps = (0, utils_1.consolidateProps)((0, cognito_defaults_1.DefaultUserPoolClientProps)(userPool), cognitoUserPoolClientProps);
    return new cognito.UserPoolClient(scope, 'CognitoUserPoolClient', userPoolClientProps);
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function buildIdentityPool(scope, userpool, userpoolclient, identityPoolProps) {
    let cognitoIdentityPoolProps = (0, cognito_defaults_1.DefaultIdentityPoolProps)(userpoolclient.userPoolClientId, userpool.userPoolProviderName);
    cognitoIdentityPoolProps = (0, utils_1.consolidateProps)(cognitoIdentityPoolProps, identityPoolProps);
    const idPool = new cognito.CfnIdentityPool(scope, 'CognitoIdentityPool', cognitoIdentityPoolProps);
    return idPool;
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function setupCognitoForSearchService(scope, domainName, options) {
    // Create the domain for Cognito UserPool
    const userpooldomain = new cognito.CfnUserPoolDomain(scope, 'UserPoolDomain', {
        domain: domainName,
        userPoolId: options.userpool.userPoolId
    });
    userpooldomain.addDependency(options.userpool.node.findChild('Resource'));
    // Setup the IAM Role for Cognito Authorized Users
    const cognitoPrincipal = new iam.FederatedPrincipal('cognito-identity.amazonaws.com', {
        'StringEquals': { 'cognito-identity.amazonaws.com:aud': options.identitypool.ref },
        'ForAnyValue:StringLike': { 'cognito-identity.amazonaws.com:amr': 'authenticated' }
    }, 'sts:AssumeRoleWithWebIdentity');
    const cognitoAuthorizedRole = new iam.Role(scope, 'CognitoAuthorizedRole', {
        assumedBy: cognitoPrincipal,
        inlinePolicies: {
            CognitoAccessPolicy: new iam.PolicyDocument({
                statements: [new iam.PolicyStatement({
                        actions: [
                            'es:ESHttp*'
                        ],
                        resources: [`arn:${cdk.Aws.PARTITION}:es:${cdk.Aws.REGION}:${cdk.Aws.ACCOUNT_ID}:domain/${domainName}/*`]
                    })
                ]
            })
        }
    });
    (0, utils_1.addCfnGuardSuppressRules)(cognitoAuthorizedRole, ["IAM_NO_INLINE_POLICY_CHECK"]);
    // Attach the IAM Role for Cognito Authorized Users
    const props = {
        identityPoolId: options.identitypool.ref,
        roles: {
            authenticated: cognitoAuthorizedRole.roleArn
        }
    };
    // Minimize code in a NOSONA line
    new cognito.CfnIdentityPoolRoleAttachment(scope, 'IdentityPoolRoleMapping', props); // NOSONAR
    return cognitoAuthorizedRole;
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function buildCognitoForSearchService(scope, domainName) {
    const userPool = buildUserPool(scope);
    const userPoolClient = buildUserPoolClient(scope, userPool);
    const identityPool = buildIdentityPool(scope, userPool, userPoolClient);
    const cognitoAuthorizedRole = setupCognitoForSearchService(scope, domainName, {
        userpool: userPool,
        identitypool: identityPool,
        userpoolclient: userPoolClient
    });
    return [userPool, userPoolClient, identityPool, cognitoAuthorizedRole];
}
//# sourceMappingURL=data:application/json;base64,