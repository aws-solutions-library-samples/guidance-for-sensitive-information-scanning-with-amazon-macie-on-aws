"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.idPlaceholder = void 0;
exports.buildStateMachine = buildStateMachine;
exports.buildStepFunctionCWAlarms = buildStepFunctionCWAlarms;
exports.CheckStateMachineProps = CheckStateMachineProps;
const cdk = require("aws-cdk-lib");
const smDefaults = require("./step-function-defaults");
const sfn = require("aws-cdk-lib/aws-stepfunctions");
const utils_1 = require("./utils");
const cloudwatch = require("aws-cdk-lib/aws-cloudwatch");
const cloudwatch_log_group_helper_1 = require("./cloudwatch-log-group-helper");
/*
 * the id parameter was added to buildStateMachine() long after the original implementation,
 * this value can be used for the new parameter and ensure behavior is the same.
 * (if we just require an id, the state machine name will be changed and it will be a
 * destructive change)
 */
exports.idPlaceholder = undefined;
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 *
 * Builds and returns a StateMachine.
 * @param scope - the construct to which the StateMachine should be attached to.
 * @param stateMachineProps - user-specified properties to override the default properties.
 */
function buildStateMachine(scope, id, props) {
    let logGroup;
    let consolidatedStateMachineProps;
    // If they sent a logGroup in stateMachineProps
    if (props.stateMachineProps.logs?.destination) {
        logGroup = props.stateMachineProps.logs?.destination;
        consolidatedStateMachineProps = props.stateMachineProps;
    }
    else {
        // Three possibilities
        // 1) logGroupProps not provided - create logGroupProps with just logGroupName
        // 2) logGroupProps provided with no logGroupName - override logGroupProps.logGroupName
        // 3) logGroupProps provided with logGroupName - pass unaltered logGroupProps
        let consolidatedLogGroupProps = props.logGroupProps;
        if (!consolidatedLogGroupProps) {
            consolidatedLogGroupProps = {};
        }
        if (!consolidatedLogGroupProps?.logGroupName) {
            const logGroupPrefix = '/aws/vendedlogs/states/constructs/';
            const nameParts = [
                cdk.Stack.of(scope).stackName, // Name of the stack
                id ?? scope.node.id, // Use the ID from client if provided, otherwise use the construct ID
                'StateMachineLog' // Literal string for log group name portion
            ];
            const logGroupName = (0, utils_1.generatePhysicalLogGroupName)(logGroupPrefix, nameParts);
            consolidatedLogGroupProps = (0, utils_1.overrideProps)(consolidatedLogGroupProps, { logGroupName });
        }
        // Create new Cloudwatch log group for Step function State Machine
        logGroup = (0, cloudwatch_log_group_helper_1.buildLogGroup)(scope, `StateMachineLogGroup${(id ?? '')}`, consolidatedLogGroupProps);
        // Override the defaults with the user provided props
        consolidatedStateMachineProps = (0, utils_1.overrideProps)(smDefaults.DefaultStateMachineProps(logGroup), props.stateMachineProps);
    }
    // Override the Cloudwatch permissions to make it more fine grained
    const newStateMachine = new sfn.StateMachine(scope, `StateMachine${(id ?? '')}`, consolidatedStateMachineProps);
    // If the client did not pass a role we got the default role and will trim the privileges
    if (!props.stateMachineProps.role) {
        const role = newStateMachine.node.findChild('Role');
        const cfnDefaultPolicy = role.node.findChild('DefaultPolicy').node.defaultChild;
        // Override Cfn Nag warning W12: IAM policy should not allow * resource
        (0, utils_1.addCfnSuppressRules)(cfnDefaultPolicy, [
            {
                id: 'W12',
                reason: `These are CDK defaults. The 'LogDelivery' actions do not support resource-level authorizations. Any logging is done by State Machine code`
            }
        ]);
    }
    const createCloudWatchAlarms = (props.createCloudWatchAlarms === undefined || props.createCloudWatchAlarms);
    const cloudWatchAlarms = createCloudWatchAlarms ? buildStepFunctionCWAlarms(scope, props.cloudWatchAlarmsPrefix, newStateMachine) : undefined;
    return {
        stateMachine: newStateMachine,
        logGroup,
        cloudWatchAlarms
    };
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function buildStepFunctionCWAlarms(scope, id, sm) {
    // Setup CW Alarms for State Machine
    const alarms = new Array();
    const prefix = id ?? "";
    // Sum of number of executions that failed is >= 1 for 5 minutes, 1 consecutive time
    alarms.push(new cloudwatch.Alarm(scope, `${prefix}ExecutionFailedAlarm`, {
        metric: sm.metricFailed({
            statistic: 'Sum',
            period: cdk.Duration.seconds(300),
        }),
        threshold: 1,
        evaluationPeriods: 1,
        comparisonOperator: cloudwatch.ComparisonOperator.GREATER_THAN_OR_EQUAL_TO_THRESHOLD,
        alarmDescription: 'Alarm for the number of executions that failed exceeded the threshold of 1. '
    }));
    // Sum of number of executions that failed maximum is >= 1 for 5 minute, 1 consecutive time
    alarms.push(new cloudwatch.Alarm(scope, `${prefix}ExecutionThrottledAlarm`, {
        metric: sm.metricThrottled({
            statistic: 'Sum',
            period: cdk.Duration.seconds(300),
        }),
        threshold: 1,
        evaluationPeriods: 1,
        comparisonOperator: cloudwatch.ComparisonOperator.GREATER_THAN_OR_EQUAL_TO_THRESHOLD,
        alarmDescription: 'Alarm for the number of executions that throttled exceeded the threshold of 1. '
    }));
    // Number of executions that aborted maximum is >= 1 for 5 minute, 1 consecutive time
    alarms.push(new cloudwatch.Alarm(scope, `${prefix}ExecutionAbortedAlarm`, {
        metric: sm.metricAborted({
            statistic: 'Maximum',
            period: cdk.Duration.seconds(300),
        }),
        threshold: 1,
        evaluationPeriods: 1,
        comparisonOperator: cloudwatch.ComparisonOperator.GREATER_THAN_OR_EQUAL_TO_THRESHOLD,
        alarmDescription: 'Alarm for the number of executions that aborted exceeded the threshold of 1. '
    }));
    return alarms;
}
function CheckStateMachineProps(propsObject) {
    let errorMessages = '';
    let errorFound = false;
    if ((propsObject.createCloudWatchAlarms === false) && propsObject.cloudWatchAlarmsPrefix) {
        errorMessages += 'Error - cloudWatchAlarmsPrefix is invalid when createCloudWatchAlarms is false\n';
        errorFound = true;
    }
    if ((propsObject.existingStateMachineObj) &&
        (propsObject.stateMachineProps ||
            (propsObject.createCloudWatchAlarms !== undefined) ||
            propsObject.cloudWatchAlarmsPrefix ||
            propsObject.logGroupProps)) {
        errorMessages += 'ERROR - If existingStateMachine is provided, no other state machine props are allowed\n';
        errorFound = true;
    }
    if (errorFound) {
        throw new Error(errorMessages);
    }
}
//# sourceMappingURL=data:application/json;base64,