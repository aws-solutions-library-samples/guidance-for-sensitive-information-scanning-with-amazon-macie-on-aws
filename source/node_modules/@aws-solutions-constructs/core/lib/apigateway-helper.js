"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalLambdaRestApi = GlobalLambdaRestApi;
exports.RegionalLambdaRestApi = RegionalLambdaRestApi;
exports.GlobalRestApi = GlobalRestApi;
exports.RegionalRestApi = RegionalRestApi;
exports.CreateSpecRestApi = CreateSpecRestApi;
exports.addProxyMethodToApiResource = addProxyMethodToApiResource;
exports.CheckApiProps = CheckApiProps;
const cdk = require("aws-cdk-lib");
const apigateway = require("aws-cdk-lib/aws-apigateway");
const iam = require("aws-cdk-lib/aws-iam");
const apiDefaults = require("./apigateway-defaults");
const cloudwatch_log_group_helper_1 = require("./cloudwatch-log-group-helper");
const utils_1 = require("./utils");
/**
 * Create and configures access logging for API Gateway resources.
 * @param scope - the construct to which the access logging capabilities should be attached to.
 * @param api - an existing api.RestApi or api.LambdaRestApi.
 */
function configureCloudwatchRoleForApi(scope, api) {
    // Setup the IAM Role for API Gateway CloudWatch access
    const restApiCloudwatchRole = new iam.Role(scope, 'LambdaRestApiCloudWatchRole', {
        assumedBy: new iam.ServicePrincipal('apigateway.amazonaws.com'),
        inlinePolicies: {
            LambdaRestApiCloudWatchRolePolicy: new iam.PolicyDocument({
                statements: [new iam.PolicyStatement({
                        actions: [
                            'logs:CreateLogGroup',
                            'logs:CreateLogStream',
                            'logs:DescribeLogGroups',
                            'logs:DescribeLogStreams',
                            'logs:PutLogEvents',
                            'logs:GetLogEvents',
                            'logs:FilterLogEvents'
                        ],
                        resources: [`arn:${cdk.Aws.PARTITION}:logs:${cdk.Aws.REGION}:${cdk.Aws.ACCOUNT_ID}:*`]
                    })]
            })
        }
    });
    // Create and configure AWS::ApiGateway::Account with CloudWatch Role for ApiGateway
    const cfnApi = api.node.findChild('Resource');
    const cfnAccount = new apigateway.CfnAccount(scope, 'LambdaRestApiAccount', {
        cloudWatchRoleArn: restApiCloudwatchRole.roleArn
    });
    cfnAccount.addDependency(cfnApi);
    // Suppress Cfn Nag warning for APIG
    const deployment = api.latestDeployment?.node.findChild('Resource');
    (0, utils_1.addCfnSuppressRules)(deployment, [
        {
            id: 'W45',
            reason: `ApiGateway has AccessLogging enabled in AWS::ApiGateway::Stage resource, but cfn_nag checks for it in AWS::ApiGateway::Deployment resource`
        }
    ]);
    (0, utils_1.addCfnGuardSuppressRules)(restApiCloudwatchRole, ["IAM_NO_INLINE_POLICY_CHECK"]);
    // Return the CW Role
    return restApiCloudwatchRole;
}
/**
 * Creates and configures an api.LambdaRestApi.
 * @param scope - the construct to which the LambdaRestApi should be attached to.
 * @param defaultApiGatewayProps - the default properties for the LambdaRestApi.
 * @param apiGatewayProps - (optional) user-specified properties to override the default properties.
 */
function configureLambdaRestApi(scope, defaultApiGatewayProps, apiGatewayProps, createUsagePlan) {
    // API Gateway doesn't allow both endpointTypes and endpointConfiguration, check whether endPointTypes exists
    if (apiGatewayProps?.endpointTypes) {
        throw Error('Solutions Constructs internally uses endpointConfiguration, use endpointConfiguration instead of endpointTypes');
    }
    // Define the API object
    let api;
    if (apiGatewayProps) {
        // If property overrides have been provided, incorporate them and deploy
        const consolidatedApiGatewayProps = (0, utils_1.consolidateProps)(defaultApiGatewayProps, apiGatewayProps, { cloudWatchRole: false });
        api = new apigateway.LambdaRestApi(scope, 'LambdaRestApi', consolidatedApiGatewayProps);
    }
    else {
        // If no property overrides, deploy using the default configuration
        api = new apigateway.LambdaRestApi(scope, 'LambdaRestApi', defaultApiGatewayProps);
    }
    // Configure API access logging
    const cwRole = (apiGatewayProps?.cloudWatchRole !== false) ? configureCloudwatchRoleForApi(scope, api) : undefined;
    (0, utils_1.addCfnGuardSuppressRules)(api.deploymentStage, ["API_GW_CACHE_ENABLED_AND_ENCRYPTED"]);
    if ((0, utils_1.CheckBooleanWithDefault)(createUsagePlan, true)) {
        // Configure Usage Plan
        const usagePlanProps = {
            apiStages: [{
                    api,
                    stage: api.deploymentStage
                }]
        };
        const plan = api.addUsagePlan('UsagePlan', usagePlanProps);
        // If requireApiKey param is set to true, create a api key & associate to Usage Plan
        if (apiGatewayProps?.defaultMethodOptions?.apiKeyRequired === true) {
            // Configure Usage Plan with API Key
            const key = api.addApiKey('ApiKey');
            plan.addApiKey(key);
        }
    }
    // Return the API and CW Role
    return { api, role: cwRole };
}
/**
 * Creates and configures an api.RestApi.
 * @param scope - the construct to which the RestApi should be attached to.
 * @param defaultApiGatewayProps - the default properties for the RestApi.
 * @param apiGatewayProps - (optional) user-specified properties to override the default properties.
 */
function configureRestApi(scope, defaultApiGatewayProps, apiGatewayProps, createUsagePlan) {
    // API Gateway doesn't allow both endpointTypes and endpointConfiguration, check whether endPointTypes exists
    if (apiGatewayProps?.endpointTypes) {
        throw Error('Solutions Constructs internally uses endpointConfiguration, use endpointConfiguration instead of endpointTypes');
    }
    const consolidatedApiGatewayProps = (0, utils_1.consolidateProps)(defaultApiGatewayProps, apiGatewayProps, { cloudWatchRole: false });
    const api = new apigateway.RestApi(scope, 'RestApi', consolidatedApiGatewayProps);
    (0, utils_1.addCfnGuardSuppressRules)(api.deploymentStage, ["API_GW_CACHE_ENABLED_AND_ENCRYPTED"]);
    let cwRole;
    // Configure API access logging
    if (apiGatewayProps?.cloudWatchRole !== false) {
        cwRole = configureCloudwatchRoleForApi(scope, api);
    }
    if ((0, utils_1.CheckBooleanWithDefault)(createUsagePlan, true)) {
        // Configure Usage Plan
        const usagePlanProps = {
            apiStages: [{
                    api,
                    stage: api.deploymentStage
                }]
        };
        const plan = api.addUsagePlan('UsagePlan', usagePlanProps);
        // If requireApiKey param is set to true, create a api key & associate to Usage Plan
        if (apiGatewayProps?.defaultMethodOptions?.apiKeyRequired === true) {
            // Configure Usage Plan with API Key
            const key = api.addApiKey('ApiKey');
            plan.addApiKey(key);
        }
    }
    // Return the API and CW Role
    return { api, role: cwRole };
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 *
 * Builds and returns a global api.RestApi designed to be used with an AWS Lambda function.
 * @param scope - the construct to which the RestApi should be attached to.
 * @param existingLambdaObj - an existing AWS Lambda function.
 * @param apiGatewayProps - (optional) user-specified properties to override the default properties.
 */
function GlobalLambdaRestApi(scope, existingLambdaObj, apiGatewayProps, logGroupProps, createUsagePlan) {
    // Configure log group for API Gateway AccessLogging
    const logGroup = (0, cloudwatch_log_group_helper_1.buildLogGroup)(scope, 'ApiAccessLogGroup', logGroupProps);
    const defaultProps = apiDefaults.DefaultGlobalLambdaRestApiProps(existingLambdaObj, logGroup);
    const configureLambdaRestApiResponse = configureLambdaRestApi(scope, defaultProps, apiGatewayProps, createUsagePlan);
    return { api: configureLambdaRestApiResponse.api, role: configureLambdaRestApiResponse.role, group: logGroup };
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 *
 * Builds and returns a regional api.RestApi designed to be used with an AWS Lambda function.
 * @param scope - the construct to which the RestApi should be attached to.
 * @param existingLambdaObj - an existing AWS Lambda function.
 * @param apiGatewayProps - (optional) user-specified properties to override the default properties.
 */
function RegionalLambdaRestApi(scope, existingLambdaObj, apiGatewayProps, logGroupProps, createUsagePlan, useDefaultAuth = true) {
    // Configure log group for API Gateway AccessLogging
    const logGroup = (0, cloudwatch_log_group_helper_1.buildLogGroup)(scope, 'ApiAccessLogGroup', logGroupProps);
    const defaultProps = apiDefaults.DefaultRegionalLambdaRestApiProps(existingLambdaObj, logGroup, useDefaultAuth);
    const configureLambdaRestApiResponse = configureLambdaRestApi(scope, defaultProps, apiGatewayProps, createUsagePlan);
    return { api: configureLambdaRestApiResponse.api, role: configureLambdaRestApiResponse.role, group: logGroup };
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 *
 * Builds and returns a standard api.RestApi.
 * @param scope - the construct to which the RestApi should be attached to.
 * @param apiGatewayProps - (optional) user-specified properties to override the default properties.
 */
function GlobalRestApi(scope, apiGatewayProps, logGroupProps, createUsagePlan) {
    // Configure log group for API Gateway AccessLogging
    const logGroup = (0, cloudwatch_log_group_helper_1.buildLogGroup)(scope, 'ApiAccessLogGroup', logGroupProps);
    const defaultProps = apiDefaults.DefaultGlobalRestApiProps(logGroup);
    const configureRestApiResponse = configureRestApi(scope, defaultProps, apiGatewayProps, createUsagePlan);
    return { api: configureRestApiResponse.api, role: configureRestApiResponse.role, logGroup };
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 *
 * Builds and returns a Regional api.RestApi.
 * @param scope - the construct to which the RestApi should be attached to.
 * @param apiGatewayProps - (optional) user-specified properties to override the default properties.
 */
function RegionalRestApi(scope, apiGatewayProps, logGroupProps, createUsagePlan) {
    // Configure log group for API Gateway AccessLogging
    const logGroup = (0, cloudwatch_log_group_helper_1.buildLogGroup)(scope, 'ApiAccessLogGroup', logGroupProps);
    const defaultProps = apiDefaults.DefaultRegionalRestApiProps(logGroup);
    const configureRestApiResponse = configureRestApi(scope, defaultProps, apiGatewayProps, createUsagePlan);
    return { api: configureRestApiResponse.api, role: configureRestApiResponse.role, logGroup };
}
function CreateSpecRestApi(scope, apiGatewayProps, logGroupProps) {
    const logGroup = (0, cloudwatch_log_group_helper_1.buildLogGroup)(scope, 'ApiAccessLogGroup', logGroupProps);
    const defaultProps = apiDefaults.DefaultSpecRestApiProps(scope, logGroup);
    // Define the API object
    // If property overrides have been provided, incorporate them and deploy
    const consolidatedApiGatewayProps = (0, utils_1.consolidateProps)(defaultProps, apiGatewayProps, { cloudWatchRole: false });
    const api = new apigateway.SpecRestApi(scope, 'SpecRestApi', consolidatedApiGatewayProps);
    // Configure API access logging
    const cwRole = (apiGatewayProps?.cloudWatchRole !== false) ? configureCloudwatchRoleForApi(scope, api) : undefined;
    (0, utils_1.addCfnGuardSuppressRules)(api.deploymentStage, ["API_GW_CACHE_ENABLED_AND_ENCRYPTED"]);
    // Configure Usage Plan
    const usagePlanProps = {
        apiStages: [{
                api,
                stage: api.deploymentStage
            }]
    };
    api.addUsagePlan('UsagePlan', usagePlanProps);
    return { api, role: cwRole, logGroup };
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function addProxyMethodToApiResource(params) {
    // Make sure the user hasn't also specified the application/json content-type in the additionalRequestTemplates optional property
    if (params.additionalRequestTemplates && 'application/json' in params.additionalRequestTemplates) {
        throw new Error(`Request Template for the application/json content-type must be specified in the requestTemplate property and not in the additionalRequestTemplates property `);
    }
    const requestTemplates = {
        "application/json": params.requestTemplate,
        ...params.additionalRequestTemplates
    };
    // Use user-provided integration responses, otherwise fallback to the default ones we provide.
    const integrationResponses = params.integrationResponses ?? apiDefaults.DefaultIntegrationResponses();
    let baseProps = {
        service: params.service,
        integrationHttpMethod: "POST",
        options: {
            passthroughBehavior: apigateway.PassthroughBehavior.NEVER,
            credentialsRole: params.apiGatewayRole,
            requestParameters: {
                "integration.request.header.Content-Type": params.contentType ? params.contentType : "'application/json'"
            },
            requestTemplates,
            integrationResponses
        }
    };
    let extraProps;
    if (params.action) {
        extraProps = {
            action: params.action
        };
    }
    else if (params.path) {
        extraProps = {
            path: params.path
        };
    }
    else {
        throw Error('Either action or path is required');
    }
    // Setup the API Gateway AWS Integration
    baseProps = Object.assign(baseProps, extraProps);
    const newProps = (0, utils_1.consolidateProps)(baseProps, params.awsIntegrationProps);
    const apiGatewayIntegration = new apigateway.AwsIntegration(newProps);
    const defaultMethodOptions = {
        methodResponses: [
            {
                statusCode: "200",
                responseParameters: {
                    "method.response.header.Content-Type": true
                }
            },
            {
                statusCode: "500",
                responseParameters: {
                    "method.response.header.Content-Type": true
                },
            }
        ]
    };
    // Setup the API Gateway method
    const overriddenProps = (0, utils_1.consolidateProps)(defaultMethodOptions, params.methodOptions);
    return params.apiResource.addMethod(params.apiMethod, apiGatewayIntegration, overriddenProps);
}
function CheckApiProps(propsObject) {
    let errorMessages = '';
    let errorFound = false;
    if (!propsObject.createUsagePlan && propsObject.apiGatewayProps?.defaultMethodOptions?.apiKeyRequired) {
        errorMessages += 'Error - if API key is required, then the Usage plan must be created\n';
        errorFound = true;
    }
    if (errorFound) {
        throw new Error(errorMessages);
    }
}
//# sourceMappingURL=data:application/json;base64,