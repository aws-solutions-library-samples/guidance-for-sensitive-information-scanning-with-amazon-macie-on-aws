"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildSagemakerNotebook = buildSagemakerNotebook;
exports.BuildSagemakerEndpoint = BuildSagemakerEndpoint;
exports.deploySagemakerEndpoint = deploySagemakerEndpoint;
exports.createSagemakerModel = createSagemakerModel;
exports.createSagemakerEndpointConfig = createSagemakerEndpointConfig;
exports.createSagemakerEndpoint = createSagemakerEndpoint;
exports.CheckSagemakerProps = CheckSagemakerProps;
/*
 *  The functions found here in the core library are for internal use and can be changed
 *  or removed outside of a major release. We recommend against calling them directly from client code.
 */
const sagemaker = require("aws-cdk-lib/aws-sagemaker");
const ec2 = require("aws-cdk-lib/aws-ec2");
const kms_helper_1 = require("./kms-helper");
const sagemaker_defaults_1 = require("./sagemaker-defaults");
const cdk = require("aws-cdk-lib");
const utils_1 = require("./utils");
const vpc_helper_1 = require("./vpc-helper");
const iam = require("aws-cdk-lib/aws-iam");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const vpc_defaults_1 = require("./vpc-defaults");
const security_group_helper_1 = require("./security-group-helper");
function addPermissions(role, props) {
    // Grant permissions to NoteBookInstance for creating and training the model
    role.addToPolicy(new iam.PolicyStatement({
        resources: [`arn:${aws_cdk_lib_1.Aws.PARTITION}:sagemaker:${aws_cdk_lib_1.Aws.REGION}:${aws_cdk_lib_1.Aws.ACCOUNT_ID}:*`],
        actions: [
            'sagemaker:CreateTrainingJob',
            'sagemaker:DescribeTrainingJob',
            'sagemaker:CreateModel',
            'sagemaker:DescribeModel',
            'sagemaker:DeleteModel',
            'sagemaker:CreateEndpoint',
            'sagemaker:CreateEndpointConfig',
            'sagemaker:DescribeEndpoint',
            'sagemaker:DescribeEndpointConfig',
            'sagemaker:DeleteEndpoint',
            'sagemaker:DeleteEndpointConfig',
            'sagemaker:InvokeEndpoint',
        ],
    }));
    // Grant CloudWatch Logging permissions
    role.addToPolicy(new iam.PolicyStatement({
        resources: [`arn:${cdk.Aws.PARTITION}:logs:${cdk.Aws.REGION}:${cdk.Aws.ACCOUNT_ID}:log-group:/aws/sagemaker/*`],
        actions: [
            'logs:CreateLogGroup',
            'logs:CreateLogStream',
            'logs:DescribeLogStreams',
            'logs:GetLogEvents',
            'logs:PutLogEvents',
        ],
    }));
    // To place the Sagemaker endpoint in a VPC
    if (props && props.vpc) {
        role.addToPolicy(new iam.PolicyStatement({
            resources: ['*'],
            actions: [
                'ec2:CreateNetworkInterface',
                'ec2:CreateNetworkInterfacePermission',
                'ec2:DeleteNetworkInterface',
                'ec2:DeleteNetworkInterfacePermission',
                'ec2:DescribeNetworkInterfaces',
                'ec2:AssignPrivateIpAddresses',
                'ec2:UnassignPrivateIpAddresses',
                'ec2:DescribeVpcs',
                'ec2:DescribeDhcpOptions',
                'ec2:DescribeSubnets',
                'ec2:DescribeSecurityGroups',
            ],
        }));
    }
    // To create a Sagemaker model using Bring-Your-Own-Model (BYOM) algorithm image
    // The image URL is specified in the modelProps
    role.addToPolicy(new iam.PolicyStatement({
        resources: [`arn:${cdk.Aws.PARTITION}:ecr:${cdk.Aws.REGION}:${cdk.Aws.ACCOUNT_ID}:repository/*`],
        actions: [
            'ecr:BatchCheckLayerAvailability',
            'ecr:GetDownloadUrlForLayer',
            'ecr:DescribeRepositories',
            'ecr:DescribeImages',
            'ecr:BatchGetImage',
        ],
    }));
    // Add GetAuthorizationToken (it can not be bound to resources other than *)
    role.addToPolicy(new iam.PolicyStatement({
        resources: ['*'],
        actions: ['ecr:GetAuthorizationToken'],
    }));
    // add permission to use Elastic Inference accelerator
    if (props && props.endpointConfigProps) {
        // Get the acceleratorType, if any
        const acceleratorType = (props.endpointConfigProps
            ?.productionVariants)[0].acceleratorType;
        if (acceleratorType !== undefined) {
            role.addToPolicy(new iam.PolicyStatement({
                resources: ['*'],
                actions: ['elastic-inference:Connect'],
            }));
        }
    }
    // add kms permissions
    role.addToPolicy(new iam.PolicyStatement({
        // the kmsKeyId in the endpointConfigProps can be any of the following formats:
        // Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
        // Key ARN: arn:aws:kms:<region>:<accountID>:key/1234abcd-12ab-34cd-56ef-1234567890ab
        // Alias name: alias/ExampleAlias
        // Alias name ARN: arn:aws:kms:<region>:<accountID>:alias/ExampleAlias
        // the key is used to encrypt/decrypt data captured by the Sagemaker endpoint and stored in S3 bucket
        resources: [
            `arn:${cdk.Aws.PARTITION}:kms:${cdk.Aws.REGION}:${cdk.Aws.ACCOUNT_ID}:key/*`,
            `arn:${cdk.Aws.PARTITION}:kms:${cdk.Aws.REGION}:${cdk.Aws.ACCOUNT_ID}:alias/*`,
        ],
        actions: ['kms:Encrypt', 'kms:Decrypt', 'kms:ReEncrypt*', 'kms:GenerateDataKey*', 'kms:DescribeKey'],
    }));
    // Add S3 permissions to get Model artifact, put data capture files, etc.
    role.addToPolicy(new iam.PolicyStatement({
        actions: ['s3:GetObject', 's3:PutObject', 's3:DeleteObject', 's3:ListBucket'],
        resources: [`arn:aws:s3:::*`],
    }));
    // Grant GetRole permissions to the Sagemaker service
    role.addToPolicy(new iam.PolicyStatement({
        resources: [role.roleArn],
        actions: ['iam:GetRole'],
    }));
    // Grant PassRole permissions to the Sagemaker service
    role.addToPolicy(new iam.PolicyStatement({
        resources: [role.roleArn],
        actions: ['iam:PassRole'],
        conditions: {
            StringLike: { 'iam:PassedToService': 'sagemaker.amazonaws.com' },
        },
    }));
    // Add CFN NAG uppress to allow for "Resource": "*" for ENI access in VPC,
    // ECR authorization token for custom model images, and elastic inference
    // Add CFN NAG for Complex Role because Sagmaker needs permissions to access several services
    const roleDefaultPolicy = role.node.tryFindChild('DefaultPolicy')?.node.findChild('Resource');
    (0, utils_1.addCfnSuppressRules)(roleDefaultPolicy, [
        {
            id: 'W12',
            reason: `Sagemaker needs the following minimum required permissions to access ENIs in a VPC, ECR for custom model images, and elastic inference.`,
        },
        {
            id: 'W76',
            reason: 'Complex role becuase Sagemaker needs permissions to access several services',
        }
    ]);
    (0, utils_1.addCfnGuardSuppressRules)(roleDefaultPolicy, ["IAM_POLICY_NON_COMPLIANT_ARN"]);
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 *
 * The constructs deploying Sagemaker services only deploy Sagemaker Endpoints, Endpoint
 * Configurations and (already developed) Models. There are no Constructs that deploy Notebooks.
 * There doesn't appear to be any references to this function outside the unit test file - so
 * this function is unneccessary.
 */
function buildSagemakerNotebook(scope, id, props) {
    // Setup the notebook properties
    let sagemakerNotebookProps;
    let vpcInstance;
    let securityGroup;
    let kmsKeyId;
    let subnetId;
    // Conditional Sagemaker Notebook creation
    if (props.existingNotebookObj) {
        return { notebook: props.existingNotebookObj };
    }
    if (CheckNotebookVpcProps(props)) {
        throw new Error('Must define both sagemakerNotebookProps.subnetId and sagemakerNotebookProps.securityGroupIds');
    }
    addPermissions(props.role);
    if (props.sagemakerNotebookProps?.kmsKeyId === undefined) {
        kmsKeyId = (0, kms_helper_1.buildEncryptionKey)(scope, id).keyId;
    }
    else {
        kmsKeyId = props.sagemakerNotebookProps.kmsKeyId;
    }
    if (props.deployInsideVpc === undefined || props.deployInsideVpc) {
        if (props.sagemakerNotebookProps?.subnetId === undefined &&
            props.sagemakerNotebookProps?.securityGroupIds === undefined) {
            vpcInstance = (0, vpc_helper_1.buildVpc)(scope, {
                defaultVpcProps: (0, vpc_defaults_1.DefaultPublicPrivateVpcProps)(),
            });
            securityGroup = (0, security_group_helper_1.buildSecurityGroup)(scope, 'SecurityGroup', {
                vpc: vpcInstance,
                allowAllOutbound: false,
            }, [], [{ peer: ec2.Peer.anyIpv4(), connection: ec2.Port.tcp(443) }]);
            subnetId = vpcInstance.privateSubnets[0].subnetId;
            sagemakerNotebookProps = (0, sagemaker_defaults_1.DefaultSagemakerNotebookProps)(props.role.roleArn, kmsKeyId, subnetId, [
                securityGroup.securityGroupId,
            ]);
        }
        else {
            sagemakerNotebookProps = (0, sagemaker_defaults_1.DefaultSagemakerNotebookProps)(props.role.roleArn, kmsKeyId, props.sagemakerNotebookProps?.subnetId, props.sagemakerNotebookProps?.securityGroupIds);
        }
    }
    else {
        sagemakerNotebookProps = (0, sagemaker_defaults_1.DefaultSagemakerNotebookProps)(props.role.roleArn, kmsKeyId);
    }
    sagemakerNotebookProps = (0, utils_1.consolidateProps)(sagemakerNotebookProps, props.sagemakerNotebookProps);
    // Create the notebook
    // NOSONAR: (typescript:S6319)
    // keyID is created above in the if (props.sagemakerNotebookProps?.kmsKeyId === undefined)
    // block. It is then passed to DefaultSagemakerNotebookProps()
    // This behavior is validated in unit test
    const sagemakerInstance = new sagemaker.CfnNotebookInstance(scope, 'SagemakerNotebook', sagemakerNotebookProps // NOSONAR
    );
    if (vpcInstance) {
        return { notebook: sagemakerInstance, vpc: vpcInstance, securityGroup };
    }
    else {
        return { notebook: sagemakerInstance };
    }
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function CheckNotebookVpcProps(props) {
    if ((props.sagemakerNotebookProps?.subnetId && props.sagemakerNotebookProps?.securityGroupIds === undefined) ||
        (props.sagemakerNotebookProps?.subnetId === undefined && props.sagemakerNotebookProps?.securityGroupIds)) {
        return true;
    }
    return false;
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function BuildSagemakerEndpoint(scope, id, props) {
    /** Conditional Sagemaker endpoint creation */
    if (!props.existingSagemakerEndpointObj) {
        if (props.modelProps) {
            const deploySagemakerEndpointResponse = deploySagemakerEndpoint(scope, id, props);
            return { ...deploySagemakerEndpointResponse };
        }
        else {
            throw Error('Either existingSagemakerEndpointObj or at least modelProps is required');
        }
    }
    else {
        /** Otherwise, return [endpoint] */
        return { endpoint: props.existingSagemakerEndpointObj };
    }
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function deploySagemakerEndpoint(scope, id, props) {
    let model;
    let endpointConfig;
    let endpoint;
    let sagemakerRole;
    // Create Sagemaker's model, endpointConfig, and endpoint
    if (props.modelProps) {
        // Check if the client has provided executionRoleArn
        if (props.modelProps.executionRoleArn) {
            sagemakerRole = iam.Role.fromRoleArn(scope, 'SagemakerRoleCustomer', props.modelProps.executionRoleArn);
        }
        else {
            // Create the Sagemaker Role
            sagemakerRole = new iam.Role(scope, 'SagemakerRole', {
                assumedBy: new iam.ServicePrincipal('sagemaker.amazonaws.com'),
            });
            // Add required permissions
            addPermissions(sagemakerRole, props);
            (0, utils_1.addCfnGuardSuppressRules)(sagemakerRole, ["IAM_NO_INLINE_POLICY_CHECK"]);
        }
        // Create Sagemaker Model
        model = createSagemakerModel(scope, props.modelProps, sagemakerRole, props.vpc);
        // Create Sagemaker EndpointConfig
        endpointConfig = createSagemakerEndpointConfig(scope, `${id}`, model.attrModelName, props.endpointConfigProps);
        // Add dependency on model
        endpointConfig.addDependency(model);
        // Create Sagemaker Endpoint
        endpoint = createSagemakerEndpoint(scope, endpointConfig.attrEndpointConfigName, props.endpointProps);
        // Add dependency on EndpointConfig
        endpoint.addDependency(endpointConfig);
        return { endpoint, endpointConfig, model };
    }
    else {
        throw Error('You need to provide at least modelProps to create Sagemaker Endpoint');
    }
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function createSagemakerModel(scope, modelProps, role, vpc) {
    let finalModelProps;
    let primaryContainer;
    let vpcConfig;
    let model;
    if (vpc) {
        const modelDefaultSecurityGroup = new ec2.SecurityGroup(scope, 'ReplaceModelDefaultSecurityGroup', {
            vpc,
            allowAllOutbound: true,
        });
        // Allow https traffic from within the VPC
        modelDefaultSecurityGroup.addIngressRule(ec2.Peer.ipv4(vpc.vpcCidrBlock), ec2.Port.tcp(443));
        const cfnSecurityGroup = modelDefaultSecurityGroup.node.findChild('Resource');
        (0, utils_1.addCfnSuppressRules)(cfnSecurityGroup, [
            {
                id: 'W5',
                reason: 'Egress of 0.0.0.0/0 is default and generally considered OK',
            },
            {
                id: 'W40',
                reason: 'Egress IPProtocol of -1 is default and generally considered OK',
            }
        ]);
        // Throw an error if the VPC does not contain private or isolated subnets
        if (vpc.privateSubnets.length === 0 && vpc.isolatedSubnets.length === 0) {
            throw Error('VPC must contain private or isolated subnets to deploy the Sagemaker endpoint in a vpc');
        }
        vpcConfig = {
            // default SubnetType.PRIVATE (or ISOLATED or PUBLIC if there are no PRIVATE subnets)
            // So, private subnets will be used if provided by customer. Otherwise, use the default isolated subnets,
            subnets: vpc.selectSubnets({
                onePerAz: true,
            }).subnetIds,
            securityGroupIds: [modelDefaultSecurityGroup.securityGroupId],
        };
    }
    if (modelProps.primaryContainer) {
        // Get user provided Model's primary container
        primaryContainer = modelProps.primaryContainer;
        // Get default Model props
        finalModelProps = (0, utils_1.consolidateProps)((0, sagemaker_defaults_1.DefaultSagemakerModelProps)(role.roleArn, primaryContainer, vpcConfig), modelProps);
        // Create the Sagemaker's Model
        model = new sagemaker.CfnModel(scope, 'SagemakerModel', finalModelProps);
        // Add dependency on the Sagemaker's role
        model.node.addDependency(role);
        return model;
    }
    else {
        throw Error('You need to provide at least primaryContainer to create Sagemaker Model');
    }
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function createSagemakerEndpointConfig(scope, id, modelName, endpointConfigProps) {
    let kmsKeyId;
    // Create encryption key if one is not provided
    if (endpointConfigProps && endpointConfigProps.kmsKeyId) {
        kmsKeyId = endpointConfigProps.kmsKeyId;
    }
    else {
        kmsKeyId = (0, kms_helper_1.buildEncryptionKey)(scope, id).keyId;
    }
    // Overwrite default EndpointConfig properties
    const finalEndpointConfigProps = (0, utils_1.consolidateProps)((0, sagemaker_defaults_1.DefaultSagemakerEndpointConfigProps)(modelName, kmsKeyId), endpointConfigProps);
    // Create the Sagemaker's EndpointConfig
    const endpointConfig = new sagemaker.CfnEndpointConfig(scope, 'SagemakerEndpointConfig', finalEndpointConfigProps);
    return endpointConfig;
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function createSagemakerEndpoint(scope, endpointConfigName, endpointProps) {
    // Overwrite default Endpoint properties
    const finalEndpointProps = (0, utils_1.consolidateProps)((0, sagemaker_defaults_1.DefaultSagemakerEndpointProps)(endpointConfigName), endpointProps);
    // Create the Sagemaker's Endpoint
    const endpoint = new sagemaker.CfnEndpoint(scope, 'SagemakerEndpoint', finalEndpointProps);
    return endpoint;
}
function CheckSagemakerProps(propsObject) {
    let errorMessages = '';
    let errorFound = false;
    if (propsObject.existingSagemakerEndpointObj && propsObject.endpointProps) {
        errorMessages += 'Error - Either provide endpointProps or existingSagemakerEndpointObj, but not both.\n';
        errorFound = true;
    }
    if (errorFound) {
        throw new Error(errorMessages);
    }
}
//# sourceMappingURL=data:application/json;base64,