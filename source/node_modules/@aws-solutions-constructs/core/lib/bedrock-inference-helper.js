"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildInferenceProfile = buildInferenceProfile;
exports.createAreaPrefixMapping = createAreaPrefixMapping;
exports.createAreaRegionMapping = createAreaRegionMapping;
exports.IsCrossRegionProfile = IsCrossRegionProfile;
exports.CheckBedrockInferenceProps = CheckBedrockInferenceProps;
// Imports
const cdk = require("aws-cdk-lib");
const bedrock = require("aws-cdk-lib/aws-bedrock");
const defaults = require("../index");
function buildInferenceProfile(scope, id, props) {
    const areaMap = createAreaPrefixMapping(scope, id);
    const regionPrefix = cdk.Fn.select(0, cdk.Fn.split('-', cdk.Aws.REGION));
    const crossRegion = IsCrossRegionProfile(props.deployCrossRegionProfile);
    const inferenceSourceArn = crossRegion ?
        `arn:${cdk.Aws.PARTITION}:bedrock:${cdk.Aws.REGION}:${cdk.Aws.ACCOUNT_ID}:inference-profile/${areaMap.mapping.findInMap(regionPrefix, "prefix")}.${props.bedrockModelId}` :
        `arn:${cdk.Aws.PARTITION}:bedrock:${cdk.Aws.REGION}:${cdk.Aws.ACCOUNT_ID}:foundation-model/${props.bedrockModelId}`;
    const constructInferenceProps = {
        modelSource: {
            copyFrom: inferenceSourceArn
        },
        inferenceProfileName: defaults.generatePhysicalInferenceProfileName("", [id])
    };
    const finalProps = defaults.consolidateProps(constructInferenceProps, props.inferenceProfileProps);
    const inferenceProfile = new bedrock.CfnApplicationInferenceProfile(scope, `${id}-inference`, finalProps);
    return {
        inferenceProfile,
        crossRegion
    };
}
function createAreaPrefixMapping(scope, id) {
    const mappingName = defaults.removeNonAlphanumeric(`${id}-area-prefix-mapping`);
    const newMapping = new cdk.CfnMapping(scope, `${id}-area-prefix-mapping`, {
        mapping: {
            'us': {
                prefix: 'us',
            },
            'eu': {
                prefix: 'eu',
            },
            'ap': {
                prefix: 'apac',
            },
        }
    });
    newMapping.overrideLogicalId(mappingName);
    return {
        mapping: newMapping,
        mappingName
    };
}
function createAreaRegionMapping(scope, id, model) {
    const mappingName = defaults.removeNonAlphanumeric(`${id}-area-region-mapping`);
    const newMapping = new cdk.CfnMapping(scope, `${id}-area-region-mapping`, {
        mapping: {
            'eu': {
                regionalModels: `arn:aws:bedrock:eu-north-1::foundation-model/${model},` +
                    `arn:aws:bedrock:eu-central-1::foundation-model/${model},` +
                    `arn:aws:bedrock:eu-west-1::foundation-model/${model},` +
                    `arn:aws:bedrock:eu-west-3::foundation-model/${model}`
            },
            'us': {
                regionalModels: `arn:aws:bedrock:us-east-1::foundation-model/${model},` +
                    `arn:aws:bedrock:us-east-2::foundation-model/${model},` +
                    `arn:aws:bedrock:us-west-2::foundation-model/${model}`
            },
            'ap': {
                regionalModels: `arn:aws:bedrock:ap-southeast-2::foundation-model/${model},` +
                    `arn:aws:bedrock:ap-northeast-1::foundation-model/${model},` +
                    `arn:aws:bedrock:ap-south-1::foundation-model/${model},` +
                    `arn:aws:bedrock:ap-northeast-2::foundation-model/${model},` +
                    `arn:aws:bedrock:ap-southeast-1::foundation-model/${model},` +
                    `arn:aws:bedrock:ap-northeast-3::foundation-model/${model}`
            }
        }
    });
    newMapping.overrideLogicalId(mappingName);
    return {
        mapping: newMapping,
        mappingName
    };
}
function IsCrossRegionProfile(deployCrossRegionProfile) {
    return defaults.CheckBooleanWithDefault(deployCrossRegionProfile, true);
}
function CheckBedrockInferenceProps(propsObject) {
    let errorMessages = '';
    let errorFound = false;
    if (propsObject.inferenceProfileProps?.modelSource) {
        errorMessages += 'Error - The construct will create the modelSource value, it cannot be specified in the props.\n';
        errorFound = true;
    }
    if (errorFound) {
        throw new Error(errorMessages);
    }
}
//# sourceMappingURL=data:application/json;base64,