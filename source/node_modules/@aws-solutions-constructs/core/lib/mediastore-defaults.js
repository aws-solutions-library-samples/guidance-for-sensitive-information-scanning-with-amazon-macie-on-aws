"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediaStoreContainerProps = MediaStoreContainerProps;
/*
 *  The functions found here in the core library are for internal use and can be changed
 *  or removed outside of a major release. We recommend against calling them directly from client code.
 */
const cdk = require("aws-cdk-lib");
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function MediaStoreContainerProps() {
    return {
        containerName: cdk.Aws.STACK_NAME,
        accessLoggingEnabled: true,
        corsPolicy: [{
                allowedHeaders: ['*'],
                allowedMethods: ['GET'],
                allowedOrigins: ['*'],
                exposeHeaders: ['*'],
                maxAgeSeconds: 3000
            }],
        policy: JSON.stringify({
            Version: '2012-10-17',
            Statement: [{
                    Sid: 'MediaStoreDefaultPolicy',
                    Effect: 'Allow',
                    Principal: '*',
                    Action: [
                        'mediastore:GetObject',
                        'mediastore:DescribeObject'
                    ],
                    Resource: `arn:${cdk.Aws.PARTITION}:mediastore:${cdk.Aws.REGION}:${cdk.Aws.ACCOUNT_ID}:container/${cdk.Aws.STACK_NAME}/*`,
                    Condition: {
                        Bool: {
                            'aws:SecureTransport': 'true'
                        }
                    }
                }]
        }),
        lifecyclePolicy: JSON.stringify({
            rules: [{
                    definition: {
                        path: [
                            { wildcard: '*' }
                        ],
                        days_since_create: [
                            { numeric: ['>', 30] }
                        ]
                    },
                    action: 'EXPIRE'
                }]
        }),
        metricPolicy: {
            containerLevelMetrics: 'ENABLED'
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVkaWFzdG9yZS1kZWZhdWx0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1lZGlhc3RvcmUtZGVmYXVsdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7OztHQVdHOztBQWFILDREQThDQztBQXpERDs7O0dBR0c7QUFFSCxtQ0FBbUM7QUFHbkM7O0dBRUc7QUFDSCxTQUFnQix3QkFBd0I7SUFDdEMsT0FBTztRQUNMLGFBQWEsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVU7UUFDakMsb0JBQW9CLEVBQUUsSUFBSTtRQUMxQixVQUFVLEVBQUUsQ0FBQztnQkFDWCxjQUFjLEVBQUUsQ0FBRSxHQUFHLENBQUU7Z0JBQ3ZCLGNBQWMsRUFBRSxDQUFFLEtBQUssQ0FBRTtnQkFDekIsY0FBYyxFQUFFLENBQUUsR0FBRyxDQUFFO2dCQUN2QixhQUFhLEVBQUUsQ0FBRSxHQUFHLENBQUU7Z0JBQ3RCLGFBQWEsRUFBRSxJQUFJO2FBQ3BCLENBQUM7UUFDRixNQUFNLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUNyQixPQUFPLEVBQUUsWUFBWTtZQUNyQixTQUFTLEVBQUUsQ0FBQztvQkFDVixHQUFHLEVBQUUseUJBQXlCO29CQUM5QixNQUFNLEVBQUUsT0FBTztvQkFDZixTQUFTLEVBQUUsR0FBRztvQkFDZCxNQUFNLEVBQUU7d0JBQ04sc0JBQXNCO3dCQUN0QiwyQkFBMkI7cUJBQzVCO29CQUNELFFBQVEsRUFBRSxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsU0FBUyxlQUFlLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxjQUFjLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxJQUFJO29CQUN6SCxTQUFTLEVBQUU7d0JBQ1QsSUFBSSxFQUFFOzRCQUNKLHFCQUFxQixFQUFFLE1BQU07eUJBQzlCO3FCQUNGO2lCQUNGLENBQUM7U0FDSCxDQUFDO1FBQ0YsZUFBZSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDOUIsS0FBSyxFQUFFLENBQUM7b0JBQ04sVUFBVSxFQUFFO3dCQUNWLElBQUksRUFBRTs0QkFDSixFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUU7eUJBQ2xCO3dCQUNELGlCQUFpQixFQUFFOzRCQUNqQixFQUFFLE9BQU8sRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRTt5QkFDdkI7cUJBQ0Y7b0JBQ0QsTUFBTSxFQUFFLFFBQVE7aUJBQ2pCLENBQUM7U0FDSCxDQUFDO1FBQ0YsWUFBWSxFQUFFO1lBQ1oscUJBQXFCLEVBQUUsU0FBUztTQUNqQztLQUM4QixDQUFDO0FBQ3BDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqICBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS4gWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogIHdpdGggdGhlIExpY2Vuc2UuIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgb3IgaW4gdGhlICdsaWNlbnNlJyBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVNcbiAqICBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xuICogIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKlxuICogIFRoZSBmdW5jdGlvbnMgZm91bmQgaGVyZSBpbiB0aGUgY29yZSBsaWJyYXJ5IGFyZSBmb3IgaW50ZXJuYWwgdXNlIGFuZCBjYW4gYmUgY2hhbmdlZFxuICogIG9yIHJlbW92ZWQgb3V0c2lkZSBvZiBhIG1ham9yIHJlbGVhc2UuIFdlIHJlY29tbWVuZCBhZ2FpbnN0IGNhbGxpbmcgdGhlbSBkaXJlY3RseSBmcm9tIGNsaWVudCBjb2RlLlxuICovXG5cbmltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgKiBhcyBtZWRpYXN0b3JlIGZyb20gJ2F3cy1jZGstbGliL2F3cy1tZWRpYXN0b3JlJztcblxuLyoqXG4gKiBAaW50ZXJuYWwgVGhpcyBpcyBhbiBpbnRlcm5hbCBjb3JlIGZ1bmN0aW9uIGFuZCBzaG91bGQgbm90IGJlIGNhbGxlZCBkaXJlY3RseSBieSBTb2x1dGlvbnMgQ29uc3RydWN0cyBjbGllbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gTWVkaWFTdG9yZUNvbnRhaW5lclByb3BzKCk6IG1lZGlhc3RvcmUuQ2ZuQ29udGFpbmVyUHJvcHMge1xuICByZXR1cm4ge1xuICAgIGNvbnRhaW5lck5hbWU6IGNkay5Bd3MuU1RBQ0tfTkFNRSxcbiAgICBhY2Nlc3NMb2dnaW5nRW5hYmxlZDogdHJ1ZSxcbiAgICBjb3JzUG9saWN5OiBbe1xuICAgICAgYWxsb3dlZEhlYWRlcnM6IFsgJyonIF0sXG4gICAgICBhbGxvd2VkTWV0aG9kczogWyAnR0VUJyBdLFxuICAgICAgYWxsb3dlZE9yaWdpbnM6IFsgJyonIF0sXG4gICAgICBleHBvc2VIZWFkZXJzOiBbICcqJyBdLFxuICAgICAgbWF4QWdlU2Vjb25kczogMzAwMFxuICAgIH1dLFxuICAgIHBvbGljeTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgVmVyc2lvbjogJzIwMTItMTAtMTcnLFxuICAgICAgU3RhdGVtZW50OiBbe1xuICAgICAgICBTaWQ6ICdNZWRpYVN0b3JlRGVmYXVsdFBvbGljeScsXG4gICAgICAgIEVmZmVjdDogJ0FsbG93JyxcbiAgICAgICAgUHJpbmNpcGFsOiAnKicsXG4gICAgICAgIEFjdGlvbjogW1xuICAgICAgICAgICdtZWRpYXN0b3JlOkdldE9iamVjdCcsXG4gICAgICAgICAgJ21lZGlhc3RvcmU6RGVzY3JpYmVPYmplY3QnXG4gICAgICAgIF0sXG4gICAgICAgIFJlc291cmNlOiBgYXJuOiR7Y2RrLkF3cy5QQVJUSVRJT059Om1lZGlhc3RvcmU6JHtjZGsuQXdzLlJFR0lPTn06JHtjZGsuQXdzLkFDQ09VTlRfSUR9OmNvbnRhaW5lci8ke2Nkay5Bd3MuU1RBQ0tfTkFNRX0vKmAsXG4gICAgICAgIENvbmRpdGlvbjoge1xuICAgICAgICAgIEJvb2w6IHtcbiAgICAgICAgICAgICdhd3M6U2VjdXJlVHJhbnNwb3J0JzogJ3RydWUnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XVxuICAgIH0pLFxuICAgIGxpZmVjeWNsZVBvbGljeTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgcnVsZXM6IFt7XG4gICAgICAgIGRlZmluaXRpb246IHtcbiAgICAgICAgICBwYXRoOiBbXG4gICAgICAgICAgICB7IHdpbGRjYXJkOiAnKicgfVxuICAgICAgICAgIF0sXG4gICAgICAgICAgZGF5c19zaW5jZV9jcmVhdGU6IFtcbiAgICAgICAgICAgIHsgbnVtZXJpYzogWyc+JywgMzBdIH1cbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIGFjdGlvbjogJ0VYUElSRSdcbiAgICAgIH1dXG4gICAgfSksXG4gICAgbWV0cmljUG9saWN5OiB7XG4gICAgICBjb250YWluZXJMZXZlbE1ldHJpY3M6ICdFTkFCTEVEJ1xuICAgIH1cbiAgfSBhcyBtZWRpYXN0b3JlLkNmbkNvbnRhaW5lclByb3BzO1xufSJdfQ==