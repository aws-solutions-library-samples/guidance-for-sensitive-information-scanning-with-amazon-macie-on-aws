"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.connectRouteOptions = exports.DEFAULT_ROUTE_QUEUE_VTL_CONFIG = void 0;
const aws_apigatewayv2_authorizers_1 = require("aws-cdk-lib/aws-apigatewayv2-authorizers");
const aws_apigatewayv2_integrations_1 = require("aws-cdk-lib/aws-apigatewayv2-integrations");
/**
 * Velocity template transformation string that maps incoming request on the websocket to Amazon SQS Queue `sendMessage`
 * API call.
 */
exports.DEFAULT_ROUTE_QUEUE_VTL_CONFIG = "Action=SendMessage&MessageGroupId=$input.path('$.MessageGroupId')&"
    + "MessageDeduplicationId=$context.requestId&"
    + "MessageAttribute.1.Name=connectionId&"
    + "MessageAttribute.1.Value.StringValue=$context.connectionId&"
    + "MessageAttribute.1.Value.DataType=String&MessageAttribute.2.Name=requestId&"
    + "MessageAttribute.2.Value.StringValue=$context.requestId&MessageAttribute.2.Value.DataType=String&"
    + "MessageBody=$util.urlEncode($input.json($util.escapeJavaScript('$').replaceAll(\"\\\\'\",\"'\")))";
/**
 * default property for `$connect` route options for a websocket
 */
exports.connectRouteOptions = {
    integration: new aws_apigatewayv2_integrations_1.WebSocketMockIntegration('connect'),
    authorizer: new aws_apigatewayv2_authorizers_1.WebSocketIamAuthorizer()
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vic29ja2V0LWFwaS1kZWZhdWx0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnNvY2tldC1hcGktZGVmYXVsdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7OztHQVdHOzs7QUFHSCwyRkFBa0Y7QUFDbEYsNkZBQXFGO0FBRXJGOzs7R0FHRztBQUNVLFFBQUEsOEJBQThCLEdBQ3pDLG9FQUFvRTtNQUNsRSw0Q0FBNEM7TUFDNUMsdUNBQXVDO01BQ3ZDLDZEQUE2RDtNQUM3RCw2RUFBNkU7TUFDN0UsbUdBQW1HO01BQ25HLG1HQUFtRyxDQUFDO0FBRXhHOztHQUVHO0FBQ1UsUUFBQSxtQkFBbUIsR0FBa0M7SUFDaEUsV0FBVyxFQUFFLElBQUksd0RBQXdCLENBQUMsU0FBUyxDQUFDO0lBQ3BELFVBQVUsRUFBRSxJQUFJLHFEQUFzQixFQUFFO0NBQ3pDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqICBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS4gWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogIHdpdGggdGhlIExpY2Vuc2UuIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgb3IgaW4gdGhlICdsaWNlbnNlJyBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVNcbiAqICBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xuICogIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgKiBhcyBhcGlnd3YyIGZyb20gJ2F3cy1jZGstbGliL2F3cy1hcGlnYXRld2F5djInO1xuaW1wb3J0IHsgV2ViU29ja2V0SWFtQXV0aG9yaXplciB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1hcGlnYXRld2F5djItYXV0aG9yaXplcnMnO1xuaW1wb3J0IHsgV2ViU29ja2V0TW9ja0ludGVncmF0aW9uIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWFwaWdhdGV3YXl2Mi1pbnRlZ3JhdGlvbnMnO1xuXG4vKipcbiAqIFZlbG9jaXR5IHRlbXBsYXRlIHRyYW5zZm9ybWF0aW9uIHN0cmluZyB0aGF0IG1hcHMgaW5jb21pbmcgcmVxdWVzdCBvbiB0aGUgd2Vic29ja2V0IHRvIEFtYXpvbiBTUVMgUXVldWUgYHNlbmRNZXNzYWdlYFxuICogQVBJIGNhbGwuXG4gKi9cbmV4cG9ydCBjb25zdCBERUZBVUxUX1JPVVRFX1FVRVVFX1ZUTF9DT05GSUcgPVxuICBcIkFjdGlvbj1TZW5kTWVzc2FnZSZNZXNzYWdlR3JvdXBJZD0kaW5wdXQucGF0aCgnJC5NZXNzYWdlR3JvdXBJZCcpJlwiXG4gICsgXCJNZXNzYWdlRGVkdXBsaWNhdGlvbklkPSRjb250ZXh0LnJlcXVlc3RJZCZcIlxuICArIFwiTWVzc2FnZUF0dHJpYnV0ZS4xLk5hbWU9Y29ubmVjdGlvbklkJlwiXG4gICsgXCJNZXNzYWdlQXR0cmlidXRlLjEuVmFsdWUuU3RyaW5nVmFsdWU9JGNvbnRleHQuY29ubmVjdGlvbklkJlwiXG4gICsgXCJNZXNzYWdlQXR0cmlidXRlLjEuVmFsdWUuRGF0YVR5cGU9U3RyaW5nJk1lc3NhZ2VBdHRyaWJ1dGUuMi5OYW1lPXJlcXVlc3RJZCZcIlxuICArIFwiTWVzc2FnZUF0dHJpYnV0ZS4yLlZhbHVlLlN0cmluZ1ZhbHVlPSRjb250ZXh0LnJlcXVlc3RJZCZNZXNzYWdlQXR0cmlidXRlLjIuVmFsdWUuRGF0YVR5cGU9U3RyaW5nJlwiXG4gICsgXCJNZXNzYWdlQm9keT0kdXRpbC51cmxFbmNvZGUoJGlucHV0Lmpzb24oJHV0aWwuZXNjYXBlSmF2YVNjcmlwdCgnJCcpLnJlcGxhY2VBbGwoXFxcIlxcXFxcXFxcJ1xcXCIsXFxcIidcXFwiKSkpXCI7XG5cbi8qKlxuICogZGVmYXVsdCBwcm9wZXJ0eSBmb3IgYCRjb25uZWN0YCByb3V0ZSBvcHRpb25zIGZvciBhIHdlYnNvY2tldFxuICovXG5leHBvcnQgY29uc3QgY29ubmVjdFJvdXRlT3B0aW9uczogYXBpZ3d2Mi5XZWJTb2NrZXRSb3V0ZU9wdGlvbnMgPSB7XG4gIGludGVncmF0aW9uOiBuZXcgV2ViU29ja2V0TW9ja0ludGVncmF0aW9uKCdjb25uZWN0JyksXG4gIGF1dGhvcml6ZXI6IG5ldyBXZWJTb2NrZXRJYW1BdXRob3JpemVyKClcbn07XG4iXX0=