"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PipesLogLevel = void 0;
exports.BuildPipe = BuildPipe;
exports.CreateSqsSource = CreateSqsSource;
exports.CreateDynamoDBStreamsSource = CreateDynamoDBStreamsSource;
exports.CreateStateMachineTarget = CreateStateMachineTarget;
exports.CheckPipesProps = CheckPipesProps;
const pipes = require("aws-cdk-lib/aws-pipes");
const iam = require("aws-cdk-lib/aws-iam");
const defaults = require("..");
const cdk = require("aws-cdk-lib");
var PipesLogLevel;
(function (PipesLogLevel) {
    PipesLogLevel["OFF"] = "OFF";
    PipesLogLevel["TRACE"] = "TRACE";
    PipesLogLevel["INFO"] = "INFO";
    PipesLogLevel["ERROR"] = "ERROR";
})(PipesLogLevel || (exports.PipesLogLevel = PipesLogLevel = {}));
function BuildPipe(scope, id, props) {
    CheckBuildPipeProps(props);
    const pipeRole = new iam.Role(scope, `PipeRole--${id}`, {
        assumedBy: new iam.ServicePrincipal('pipes.amazonaws.com'),
        inlinePolicies: {
            sourcePolicy: props.source.sourcePolicy,
            targetPolicy: props.target.targetPolicy,
        },
    });
    // At this point we have the minimum values for CfnPipeProps - let's
    // create it and fold in any additional values as we go along
    let constructProps = {
        roleArn: pipeRole.roleArn,
        source: props.source.sourceArn,
        target: props.target.targetArn,
        sourceParameters: props.source.sourceParameters,
        targetParameters: props.target.targetParameters,
    };
    // Do we have any enrichment functionality?
    if (props.enrichmentFunction) {
        const enrichmentSettings = createLambdaEnrichment(scope, id, props.enrichmentFunction);
        pipeRole.attachInlinePolicy(enrichmentSettings.pipeRolePolicy);
        constructProps = defaults.consolidateProps(constructProps, { enrichment: enrichmentSettings.enrichmentArn });
    }
    else if (props.enrichmentStateMachine) {
        const enrichmentSettings = createStateMachineEnrichment(scope, id, props.enrichmentStateMachine);
        pipeRole.attachInlinePolicy(enrichmentSettings.pipeRolePolicy);
        constructProps = defaults.consolidateProps(constructProps, { enrichment: enrichmentSettings.enrichmentArn });
    }
    // Are we responsible to create the logging mechanism?
    if (!props.clientProps?.logConfiguration) {
        const logLevel = defaults.CheckStringWithDefault(props.logLevel, PipesLogLevel.INFO);
        if (logLevel !== PipesLogLevel.OFF) {
            const defaultLogGroupProps = {
                logGroupName: createPipesLogGroupName(scope, id),
            };
            const consolidatedLogGroupProps = defaults.consolidateProps(defaultLogGroupProps, props.pipeLogProps);
            const newLogGroup = defaults.buildLogGroup(scope, `LogGroup-${id}`, consolidatedLogGroupProps);
            const logConfiguration = {
                cloudwatchLogsLogDestination: {
                    logGroupArn: newLogGroup.logGroupArn
                },
                level: logLevel
            };
            constructProps = defaults.consolidateProps(constructProps, {
                logConfiguration,
            });
        }
    }
    const consolidateProps = defaults.consolidateProps(defaults.defaultPipesProps(), props.clientProps, constructProps);
    const newPipe = new pipes.CfnPipe(scope, `pipe-${id}`, consolidateProps);
    return {
        pipe: newPipe,
        pipeRole
    };
}
function createLambdaEnrichment(scope, id, lambdaFunction) {
    return {
        enrichmentArn: lambdaFunction.functionArn,
        pipeRolePolicy: new iam.Policy(scope, `enrichmentpolicy${id}`, {
            statements: [
                new iam.PolicyStatement({
                    resources: [lambdaFunction.functionArn],
                    actions: ['lambda:InvokeFunction'],
                    effect: iam.Effect.ALLOW,
                })
            ]
        })
    };
}
function createStateMachineEnrichment(scope, id, stateMachine) {
    return {
        enrichmentArn: stateMachine.stateMachineArn,
        pipeRolePolicy: new iam.Policy(scope, `enrichmentpolicy${id}`, {
            statements: [
                new iam.PolicyStatement({
                    resources: [stateMachine.stateMachineArn],
                    actions: ['states:StartSyncExecution'],
                    effect: iam.Effect.ALLOW,
                })
            ]
        })
    };
}
function createPipesLogGroupName(scope, id) {
    const logGroupPrefix = '/aws/vendedlogs/pipes/constructs/';
    const nameParts = [
        cdk.Stack.of(scope).stackName,
        id,
        'PipesLog'
    ];
    return defaults.generatePhysicalLogGroupName(logGroupPrefix, nameParts);
}
// ==========================
// Source and Target code - as new sources and targets are required, implement them
// here and test the new functions.
function CreateSqsSource(queue, clientProps) {
    const sourceParameters = defaults.consolidateProps(defaults.defaultSqsSourceProps(), clientProps);
    return {
        sourceParameters,
        sourceArn: queue.queueArn,
        sourcePolicy: new iam.PolicyDocument({
            statements: [
                new iam.PolicyStatement({
                    resources: [queue.queueArn],
                    actions: [
                        "sqs:ReceiveMessage",
                        "sqs:DeleteMessage",
                        "sqs:GetQueueAttributes",
                    ],
                    effect: iam.Effect.ALLOW,
                })
            ]
        })
    };
}
function CreateDynamoDBStreamsSource(scope, props) {
    if (!props.table.tableStreamArn) {
        throw new Error("ERROR - DynamoDB Table must have an associated stream");
    }
    const deployDlq = defaults.CheckBooleanWithDefault(props.deploySqsDlqQueue, true);
    let sourceParameters = defaults.consolidateProps(defaults.defaultDynamoDBStreamsSourceProps(deployDlq), props.clientProps);
    const sourcePolicy = new iam.PolicyDocument({
        statements: [
            new iam.PolicyStatement({
                resources: [props.table.tableStreamArn],
                actions: [
                    "dynamodb:DescribeStream",
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator",
                    "dynamodb:ListStreams"
                ],
                effect: iam.Effect.ALLOW,
            })
        ]
    });
    let buildQueueResponse;
    // Default to setting up DLQ for failed messages
    if (deployDlq) {
        buildQueueResponse = defaults.buildQueue(scope, 'dlq', {
            deployDeadLetterQueue: false,
            queueProps: props.sqsDlqQueueProps
        });
        sourceParameters = defaults.consolidateProps(sourceParameters, {
            dynamoDbStreamParameters: {
                deadLetterConfig: {
                    arn: buildQueueResponse.queue.queueArn
                }
            }
        });
        sourcePolicy.addStatements(new iam.PolicyStatement({
            resources: [buildQueueResponse.queue.queueArn],
            actions: [
                "sqs:SendMessage"
            ],
            effect: iam.Effect.ALLOW,
        }));
    }
    else {
        if ((sourceParameters.dynamoDbStreamParameters?.maximumRecordAgeInSeconds) ||
            (sourceParameters.dynamoDbStreamParameters?.maximumRetryAttempts)) {
            throw new Error('ERROR - retry and record age constraints cannot be specified with no DLQ\n');
        }
    }
    return {
        sourceParameters,
        sourceArn: props.table.tableStreamArn,
        sourcePolicy,
        dlq: buildQueueResponse?.queue ?? undefined
    };
}
function CreateStateMachineTarget(stateMachine, clientProps) {
    const targetParameters = defaults.consolidateProps(defaults.defaultStateMachineTargetProps(), clientProps);
    return {
        targetParameters,
        targetArn: stateMachine.stateMachineArn,
        targetPolicy: new iam.PolicyDocument({
            statements: [
                new iam.PolicyStatement({
                    resources: [stateMachine.stateMachineArn],
                    actions: ['states:StartExecution'],
                    effect: iam.Effect.ALLOW,
                }),
            ],
        })
    };
}
// This is called by BuildPipe to validate arguments sent to BuildPipe
function CheckBuildPipeProps(props) {
    if (props.enrichmentFunction && props.enrichmentStateMachine) {
        throw new Error("ERROR - Only one of enrichmentFunction or enrichmentStateMachine can be provided");
    }
    if (props.clientProps && (props.clientProps.source || props.clientProps.target || props.clientProps.roleArn || props.clientProps.enrichment)) {
        throw new Error("ERROR - BuildPipeProps cannot specify source, target, roleArn, or enrichment");
    }
    if (props.logLevel && props.clientProps?.logConfiguration) {
        throw new Error('ERROR - BuildPipeProps cannot specify logLevel and logConfiguration');
    }
    if (props.pipeLogProps && props.clientProps?.logConfiguration) {
        throw new Error('ERROR - BuildPipeProps cannot specify pipeLogProps and logConfiguration');
    }
    if (props.pipeLogProps && (props.logLevel === PipesLogLevel.OFF)) {
        throw new Error('ERROR - BuildPipeProps cannot specify pipeLogProps and log level OFF');
    }
}
// This is called by constructs to validate inputs to the construct
function CheckPipesProps(propsObject) {
    let errorMessages = '';
    let errorFound = false;
    if (propsObject.pipesProps?.source) {
        errorMessages += 'Do not set source in pipesProps. It is set by the construct.\n';
        errorFound = true;
    }
    if (propsObject.pipesProps?.target) {
        errorMessages += 'Do not set target in pipesProps. It is set by the construct.\n';
        errorFound = true;
    }
    if (errorFound) {
        throw new Error(errorMessages);
    }
}
//# sourceMappingURL=data:application/json;base64,