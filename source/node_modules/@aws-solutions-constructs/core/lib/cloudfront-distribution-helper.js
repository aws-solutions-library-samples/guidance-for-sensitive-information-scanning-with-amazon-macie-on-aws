"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudFrontDistributionForApiGateway = CloudFrontDistributionForApiGateway;
exports.createCloudFrontDistributionForS3 = createCloudFrontDistributionForS3;
exports.createCloudFrontOaiDistributionForS3 = createCloudFrontOaiDistributionForS3;
exports.CloudFrontDistributionForMediaStore = CloudFrontDistributionForMediaStore;
exports.CloudFrontOriginAccessIdentity = CloudFrontOriginAccessIdentity;
exports.CheckCloudFrontProps = CheckCloudFrontProps;
exports.CheckCloudfrontS3Props = CheckCloudfrontS3Props;
/*
 *  The functions found here in the core library are for internal use and can be changed
 *  or removed outside of a major release. We recommend against calling them directly from client code.
 */
const cloudfront = require("aws-cdk-lib/aws-cloudfront");
const origins = require("aws-cdk-lib/aws-cloudfront-origins");
const s3 = require("aws-cdk-lib/aws-s3");
const cdk = require("aws-cdk-lib");
const cloudfront_distribution_defaults_1 = require("./cloudfront-distribution-defaults");
const utils_1 = require("./utils");
const s3_bucket_helper_1 = require("./s3-bucket-helper");
const s3_bucket_defaults_1 = require("./s3-bucket-defaults");
const s3_oac_origin_1 = require("./s3-oac-origin");
// Override Cfn_Nag rule: Cloudfront TLS-1.2 rule (https://github.com/stelligent/cfn_nag/issues/384)
function updateSecurityPolicy(cfDistribution) {
    (0, utils_1.addCfnSuppressRules)(cfDistribution, [
        {
            id: 'W70',
            reason: `Since the distribution uses the CloudFront domain name, CloudFront automatically sets the security policy to TLSv1 regardless of the value of MinimumProtocolVersion`
        }
    ]);
    return cfDistribution;
}
// Cloudfront function to insert the HTTP Security Headers into the response coming from the origin servers
// and before it is sent to the client
function defaultCloudfrontFunction(scope) {
    // generate a stable unique id for the cloudfront function and use it
    // both for the function name and the logical id of the function so if
    // it is changed the function will be recreated.
    // see https://github.com/aws/aws-cdk/issues/15523
    const functionId = `SetHttpSecurityHeaders${scope.node.addr}`;
    return new cloudfront.Function(scope, "SetHttpSecurityHeaders", {
        functionName: functionId,
        code: cloudfront.FunctionCode.fromInline("function handler(event) { " +
            "var response = event.response; " +
            "var headers = response.headers; " +
            "headers['strict-transport-security'] = { value: 'max-age=63072000; includeSubdomains; preload'}; " +
            "headers['content-security-policy'] = { value: \"default-src 'none'; img-src 'self'; script-src 'self'; style-src 'self'; object-src 'none'\"}; " +
            "headers['x-content-type-options'] = { value: 'nosniff'}; headers['x-frame-options'] = {value: 'DENY'}; " +
            "headers['x-xss-protection'] = {value: '1; mode=block'}; " +
            "return response; }")
    });
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function CloudFrontDistributionForApiGateway(scope, apiEndPoint, cloudFrontDistributionProps, httpSecurityHeaders = true, cloudFrontLoggingBucketProps, responseHeadersPolicyProps) {
    const cloudfrontFunction = getCloudfrontFunction(httpSecurityHeaders, scope);
    const getLoggingBucketResponse = getLoggingBucket(scope, { cloudFrontLoggingBucketProps, cloudFrontDistributionProps });
    const defaultprops = (0, cloudfront_distribution_defaults_1.DefaultCloudFrontWebDistributionForApiGatewayProps)(apiEndPoint, getLoggingBucketResponse.logBucket, httpSecurityHeaders, cloudfrontFunction, responseHeadersPolicyProps ? new cloudfront.ResponseHeadersPolicy(scope, 'ResponseHeadersPolicy', responseHeadersPolicyProps) : undefined);
    const cfprops = (0, utils_1.consolidateProps)(defaultprops, cloudFrontDistributionProps);
    // Create the Cloudfront Distribution
    const cfDistribution = new cloudfront.Distribution(scope, 'CloudFrontDistribution', cfprops);
    updateSecurityPolicy(cfDistribution);
    return { distribution: cfDistribution, cloudfrontFunction, loggingBucket: getLoggingBucketResponse.logBucket };
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function createCloudFrontDistributionForS3(scope, id, props) {
    const httpSecurityHeaders = props.httpSecurityHeaders ?? true;
    const cloudfrontFunction = getCloudfrontFunction(httpSecurityHeaders, scope);
    const getLoggingBucketResponse = getLoggingBucket(scope, {
        cloudFrontDistributionProps: props.cloudFrontDistributionProps,
        cloudFrontLoggingBucketProps: props.cloudFrontLoggingBucketProps,
        cloudFrontLoggingBucketS3AccessLogBucketProps: props.cloudFrontLoggingBucketS3AccessLogBucketProps,
        enableS3AccessLogs: props.logCloudFrontAccessLog
    });
    let originAccessControl;
    let originProps = {};
    if (!props.sourceBucket.isWebsite) {
        originAccessControl = new cloudfront.CfnOriginAccessControl(scope, 'CloudFrontOac', {
            originAccessControlConfig: {
                name: (0, utils_1.generatePhysicalOacName)('aws-cloudfront-s3-', [id]),
                originAccessControlOriginType: 's3',
                signingBehavior: 'always',
                signingProtocol: 'sigv4',
                description: 'Origin access control provisioned by aws-cloudfront-s3'
            }
        });
        originProps = { originAccessControl };
    }
    const origin = new s3_oac_origin_1.S3OacOrigin(props.sourceBucket, originProps);
    const defaultprops = (0, cloudfront_distribution_defaults_1.DefaultCloudFrontWebDistributionForS3Props)(origin, getLoggingBucketResponse.logBucket, httpSecurityHeaders, cloudfrontFunction, props.responseHeadersPolicyProps ?
        new cloudfront.ResponseHeadersPolicy(scope, 'ResponseHeadersPolicy', props.responseHeadersPolicyProps) :
        undefined);
    const cfprops = (0, utils_1.consolidateProps)(defaultprops, props.cloudFrontDistributionProps);
    // Create the Cloudfront Distribution
    const cfDistribution = new cloudfront.Distribution(scope, 'CloudFrontDistribution', cfprops);
    updateSecurityPolicy(cfDistribution);
    // Extract the CfnBucketPolicy from the sourceBucket
    const bucketPolicy = props.sourceBucket.policy;
    // the lack of a bucketPolicy means the bucket was imported from outside the stack so the lack of cfn_nag suppression is not an issue
    if (bucketPolicy) {
        (0, utils_1.addCfnSuppressRules)(bucketPolicy, [
            {
                id: 'F16',
                reason: `Public website bucket policy requires a wildcard principal`
            }
        ]);
    }
    return {
        distribution: cfDistribution,
        cloudfrontFunction,
        loggingBucket: getLoggingBucketResponse.logBucket,
        loggingBucketS3AccesssLogBucket: getLoggingBucketResponse.logBucketAccessLogBucket,
        originAccessControl
    };
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function createCloudFrontOaiDistributionForS3(scope, props) {
    const httpSecurityHeaders = props.httpSecurityHeaders ?? true;
    const cloudfrontFunction = getCloudfrontFunction(httpSecurityHeaders, scope);
    if (props.sourceBucket.isWebsite) {
        throw new Error(`aws-cloudfront-oai-s3 has been provided a source bucket with website hosting enabled, which this construct
        does not support. This requires both the bucket and its objects to be public. AWS strongly recommends against configuring
        buckets and objects for public access. As such a configuration uses neither OAC nor OAI, it can be launched with the
        aws-cloudfron-s3 construct in any region.`);
    }
    const getLoggingBucketResponse = getLoggingBucket(scope, {
        cloudFrontDistributionProps: props.cloudFrontDistributionProps,
        cloudFrontLoggingBucketProps: props.cloudFrontLoggingBucketProps,
        cloudFrontLoggingBucketS3AccessLogBucketProps: props.cloudFrontLoggingBucketS3AccessLogBucketProps,
        enableS3AccessLogs: props.logCloudFrontAccessLog
    });
    let origin;
    const constructOai = new cloudfront.OriginAccessIdentity(scope, 'constructsGeneratedOai', {});
    if (props.originPath) {
        origin = origins.S3BucketOrigin.withOriginAccessIdentity(props.sourceBucket, {
            originPath: props.originPath,
            originAccessIdentity: constructOai
        });
    }
    else {
        origin = origins.S3BucketOrigin.withOriginAccessIdentity(props.sourceBucket, { originAccessIdentity: constructOai });
    }
    const defaultprops = (0, cloudfront_distribution_defaults_1.DefaultCloudFrontWebDistributionForS3Props)(origin, getLoggingBucketResponse.logBucket, httpSecurityHeaders, cloudfrontFunction, props.responseHeadersPolicyProps ?
        new cloudfront.ResponseHeadersPolicy(scope, 'ResponseHeadersPolicy', props.responseHeadersPolicyProps) :
        undefined);
    const cfprops = (0, utils_1.consolidateProps)(defaultprops, props.cloudFrontDistributionProps);
    // Create the Cloudfront Distribution
    const cfDistribution = new cloudfront.Distribution(scope, 'CloudFrontDistribution', cfprops);
    updateSecurityPolicy(cfDistribution);
    // Extract the CfnBucketPolicy from the sourceBucket
    const bucketPolicy = props.sourceBucket.policy;
    // the lack of a bucketPolicy means the bucket was imported from outside the stack so the lack of cfn_nag suppression is not an issue
    if (bucketPolicy) {
        (0, utils_1.addCfnSuppressRules)(bucketPolicy, [
            {
                id: 'F16',
                reason: `Public website bucket policy requires a wildcard principal`
            }
        ]);
    }
    return {
        distribution: cfDistribution,
        cloudfrontFunction,
        loggingBucket: getLoggingBucketResponse.logBucket,
        loggingBucketS3AccesssLogBucket: getLoggingBucketResponse.logBucketAccessLogBucket,
        originAccessIdentity: constructOai
    };
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function CloudFrontDistributionForMediaStore(scope, mediaStoreContainer, cloudFrontDistributionProps, httpSecurityHeaders = true, cloudFrontLoggingBucketProps, responseHeadersPolicyProps) {
    let originRequestPolicy;
    const getLoggingBucketResponse = getLoggingBucket(scope, { cloudFrontDistributionProps, cloudFrontLoggingBucketProps });
    if (cloudFrontDistributionProps
        && cloudFrontDistributionProps.defaultBehavior
        && cloudFrontDistributionProps.defaultBehavior.originRequestPolicy) {
        originRequestPolicy = cloudFrontDistributionProps.defaultBehavior.originRequestPolicy;
    }
    else {
        const originRequestPolicyProps = {
            headerBehavior: {
                behavior: 'whitelist',
                headers: [
                    'Access-Control-Allow-Origin',
                    'Access-Control-Request-Method',
                    'Access-Control-Request-Header',
                    'Origin'
                ]
            },
            queryStringBehavior: {
                behavior: 'all'
            },
            cookieBehavior: {
                behavior: 'none'
            },
            comment: 'Policy for Constructs CloudFrontDistributionForMediaStore',
            originRequestPolicyName: `${cdk.Aws.STACK_NAME}-${cdk.Aws.REGION}-CloudFrontDistributionForMediaStore`
        };
        originRequestPolicy = new cloudfront.OriginRequestPolicy(scope, 'CloudfrontOriginRequestPolicy', originRequestPolicyProps);
    }
    const cloudfrontFunction = getCloudfrontFunction(httpSecurityHeaders, scope);
    const defaultprops = (0, cloudfront_distribution_defaults_1.DefaultCloudFrontDistributionForMediaStoreProps)(mediaStoreContainer, getLoggingBucketResponse.logBucket, originRequestPolicy, httpSecurityHeaders, cloudFrontDistributionProps?.customHeaders, cloudfrontFunction, responseHeadersPolicyProps ? new cloudfront.ResponseHeadersPolicy(scope, 'ResponseHeadersPolicy', responseHeadersPolicyProps) : undefined);
    const cfprops = (0, utils_1.consolidateProps)(defaultprops, cloudFrontDistributionProps);
    // Create the CloudFront Distribution
    const cfDistribution = new cloudfront.Distribution(scope, 'CloudFrontDistribution', cfprops);
    updateSecurityPolicy(cfDistribution);
    return { distribution: cfDistribution, loggingBucket: getLoggingBucketResponse.logBucket, requestPolicy: originRequestPolicy, cloudfrontFunction };
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function CloudFrontOriginAccessIdentity(scope, comment) {
    return new cloudfront.OriginAccessIdentity(scope, 'CloudFrontOriginAccessIdentity', {
        comment: comment ? comment : `access-identity-${cdk.Aws.REGION}-${cdk.Aws.STACK_NAME}`
    });
}
function getLoggingBucket(scope, props) {
    const isLoggingDisabled = props.cloudFrontDistributionProps?.enableLogging === false;
    const userSuppliedLogBucket = props.cloudFrontDistributionProps?.logBucket;
    if (userSuppliedLogBucket && props.cloudFrontLoggingBucketProps) {
        throw Error('Either cloudFrontDistributionProps.logBucket or cloudFrontLoggingBucketProps can be set.');
    }
    let logBucket;
    let logBuckeS3AccessLogBuckett;
    if (isLoggingDisabled) {
        logBucket = undefined;
    }
    else if (userSuppliedLogBucket) {
        logBucket = userSuppliedLogBucket;
    }
    else {
        const createBucketResponse = (0, s3_bucket_helper_1.createCloudFrontLoggingBucket)(scope, 'CloudfrontLoggingBucket', {
            // Buckets used for CloudFront distribution logging require ACLs to be explicitly enabled, so we apply this objectOwnership
            loggingBucketProps: (0, utils_1.consolidateProps)((0, s3_bucket_defaults_1.DefaultS3Props)(), props.cloudFrontLoggingBucketProps, {
                objectOwnership: s3.ObjectOwnership.OBJECT_WRITER
            }),
            s3AccessLogBucketProps: props.cloudFrontLoggingBucketS3AccessLogBucketProps,
            enableS3AccessLogs: props.enableS3AccessLogs
        });
        logBucket = createBucketResponse.logBucket;
        logBuckeS3AccessLogBuckett = createBucketResponse.s3AccessLogBucket;
        const loggingBucketResource = logBucket.node.findChild('Resource');
        loggingBucketResource.addPropertyOverride('AccessControl', 'LogDeliveryWrite');
    }
    return {
        logBucket,
        logBucketAccessLogBucket: logBuckeS3AccessLogBuckett
    };
}
function getCloudfrontFunction(httpSecurityHeaders, scope) {
    return httpSecurityHeaders ? defaultCloudfrontFunction(scope) : undefined;
}
function CheckCloudFrontProps(propsObject) {
    let errorMessages = '';
    let errorFound = false;
    if (propsObject.insertHttpSecurityHeaders !== false && propsObject.responseHeadersPolicyProps?.securityHeadersBehavior) {
        errorMessages += 'responseHeadersPolicyProps.securityHeadersBehavior can only be passed if httpSecurityHeaders is set to `false`.';
        errorFound = true;
    }
    if (errorFound) {
        throw new Error(errorMessages);
    }
}
function CheckCloudfrontS3Props(props) {
    let errorMessages = '';
    let errorFound = false;
    if ((props.logS3AccessLogs === false) && props.bucketProps?.serverAccessLogsBucket) {
        errorMessages += 'Error - logS3AccessLogs is false, but a log bucket was provided in bucketProps.\n';
        errorFound = true;
    }
    if (props.loggingBucketProps && props.bucketProps?.serverAccessLogsBucket) {
        errorMessages += 'Error - bothlog bucket props and an existing log bucket were provided.\n';
        errorFound = true;
    }
    if (props.cloudFrontLoggingBucketAccessLogBucketProps && props.cloudFrontLoggingBucketProps?.serverAccessLogsBucket) {
        errorMessages += 'Error - an existing CloudFront log bucket S3 access log bucket and cloudFrontLoggingBucketAccessLogBucketProps were provided\n';
        errorFound = true;
    }
    if (props.cloudFrontLoggingBucketAccessLogBucketProps && props.logCloudFrontAccessLog === false) {
        errorMessages += 'Error - cloudFrontLoggingBucketAccessLogBucketProps were provided but logCloudFrontAccessLog was false\n';
        errorFound = true;
    }
    if (props.cloudFrontLoggingBucketProps?.serverAccessLogsBucket && props.logCloudFrontAccessLog === false) {
        errorMessages += 'Error - props.cloudFrontLoggingBucketProps.serverAccessLogsBucket was provided but logCloudFrontAccessLog was false\n';
        errorFound = true;
    }
    if (errorFound) {
        throw new Error(errorMessages);
    }
}
//# sourceMappingURL=data:application/json;base64,