"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildTopic = buildTopic;
exports.CheckSnsProps = CheckSnsProps;
/*
 *  The functions found here in the core library are for internal use and can be changed
 *  or removed outside of a major release. We recommend against calling them directly from client code.
 */
// Imports
const sns = require("aws-cdk-lib/aws-sns");
const kms = require("aws-cdk-lib/aws-kms");
const sns_defaults_1 = require("./sns-defaults");
const kms_helper_1 = require("./kms-helper");
const utils_1 = require("./utils");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_cdk_lib_1 = require("aws-cdk-lib");
function applySecureTopicPolicy(topic) {
    // Apply topic policy to enforce only the topic owner can publish and subscribe to this topic
    topic.addToResourcePolicy(new aws_iam_1.PolicyStatement({
        sid: 'TopicOwnerOnlyAccess',
        resources: [
            `${topic.topicArn}`
        ],
        actions: [
            "SNS:Publish",
            "SNS:RemovePermission",
            "SNS:SetTopicAttributes",
            "SNS:DeleteTopic",
            "SNS:ListSubscriptionsByTopic",
            "SNS:GetTopicAttributes",
            "SNS:Receive",
            "SNS:AddPermission",
            "SNS:Subscribe"
        ],
        principals: [new aws_iam_1.AccountPrincipal(aws_cdk_lib_1.Stack.of(topic).account)],
        effect: aws_iam_1.Effect.ALLOW,
        conditions: {
            StringEquals: {
                "AWS:SourceOwner": aws_cdk_lib_1.Stack.of(topic).account
            }
        }
    }));
    // Apply Topic policy to enforce encryption of data in transit
    topic.addToResourcePolicy(new aws_iam_1.PolicyStatement({
        sid: 'HttpsOnly',
        resources: [
            `${topic.topicArn}`
        ],
        actions: [
            "SNS:Publish",
            "SNS:RemovePermission",
            "SNS:SetTopicAttributes",
            "SNS:DeleteTopic",
            "SNS:ListSubscriptionsByTopic",
            "SNS:GetTopicAttributes",
            "SNS:Receive",
            "SNS:AddPermission",
            "SNS:Subscribe"
        ],
        principals: [new aws_iam_1.AnyPrincipal()],
        effect: aws_iam_1.Effect.DENY,
        conditions: {
            Bool: {
                'aws:SecureTransport': 'false'
            }
        }
    }));
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function buildTopic(scope, id, props) {
    if (!props.existingTopicObj) {
        // Setup the topic properties
        const snsTopicProps = (0, utils_1.consolidateProps)(sns_defaults_1.defaultSnsTopicProps, props.topicProps);
        // Set encryption properties
        if (props.topicProps?.masterKey) {
            snsTopicProps.masterKey = props.topicProps?.masterKey;
        }
        else if (props.encryptionKey) {
            snsTopicProps.masterKey = props.encryptionKey;
        }
        else if (props.encryptionKeyProps || props.enableEncryptionWithCustomerManagedKey === true) {
            snsTopicProps.masterKey = (0, kms_helper_1.buildEncryptionKey)(scope, id, props.encryptionKeyProps);
        }
        else {
            snsTopicProps.masterKey = kms.Alias.fromAliasName(scope, 'aws-managed-key', 'alias/aws/sns');
        }
        // Create the SNS Topic
        // NOSONAR (typescript:S6327) - The masterKey is set in the if statement above, SONAR is
        // not catching it. Behavior is confirmed in the
        // 'Test deployment with no properties using AWS Managed KMS Key' unit test
        const topic = new sns.Topic(scope, 'SnsTopic', snsTopicProps); // NOSONAR
        applySecureTopicPolicy(topic);
        return { topic, key: snsTopicProps.masterKey };
    }
    else {
        return { topic: props.existingTopicObj, key: props.existingTopicEncryptionKey };
    }
}
function CheckSnsProps(propsObject) {
    let errorMessages = '';
    let errorFound = false;
    // FargateToSns used TopicObject instead of TopicObj - to fix would be a breaking change, so we
    // must look for both here.
    if (propsObject.topicProps && (propsObject.existingTopicObj || propsObject.existingTopicObject)) {
        errorMessages += 'Error - Either provide topicProps or existingTopicObj, but not both.\n';
        errorFound = true;
    }
    if (propsObject.topicProps?.masterKey && propsObject.encryptionKey) {
        errorMessages += 'Error - Either provide topicProps.masterKey or encryptionKey, but not both.\n';
        errorFound = true;
    }
    if (propsObject.topicProps?.masterKey && propsObject.encryptionKeyProps) {
        errorMessages += 'Error - Either provide topicProps.masterKey or encryptionKeyProps, but not both.\n';
        errorFound = true;
    }
    if (propsObject.encryptionKey && propsObject.encryptionKeyProps) {
        errorMessages += 'Error - Either provide encryptionKey or encryptionKeyProps, but not both.\n';
        errorFound = true;
    }
    if (errorFound) {
        throw new Error(errorMessages);
    }
}
//# sourceMappingURL=data:application/json;base64,