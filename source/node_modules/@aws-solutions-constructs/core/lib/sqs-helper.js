"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildQueue = buildQueue;
exports.buildDeadLetterQueue = buildDeadLetterQueue;
exports.CheckSqsProps = CheckSqsProps;
/*
 *  The functions found here in the core library are for internal use and can be changed
 *  or removed outside of a major release. We recommend against calling them directly from client code.
 */
// Imports
const sqs = require("aws-cdk-lib/aws-sqs");
const defaults = require("./sqs-defaults");
const utils_1 = require("./utils");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const kms_helper_1 = require("./kms-helper");
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function buildQueue(scope, id, props) {
    CheckBuidQueueProps(props);
    let deadLetterQueue;
    if ((0, utils_1.CheckBooleanWithDefault)(props.deployDeadLetterQueue, true)) {
        deadLetterQueue = buildDeadLetterQueue(scope, id, {
            existingQueueObj: props.existingQueueObj,
            deployDeadLetterQueue: props.deployDeadLetterQueue,
            deadLetterQueueProps: props.deadLetterQueueProps,
            constructDeadLetterQueueProps: props.constructDeadLetterQueueProps,
            maxReceiveCount: props.maxReceiveCount
        });
    }
    // If an existingQueueObj is not specified
    if (!props.existingQueueObj) {
        // Setup the queue
        let queueProps;
        if (props.queueProps) {
            // If property overrides have been provided, incorporate them and deploy
            const checkFifo = props.queueProps.fifo ? true : undefined;
            queueProps = (0, utils_1.overrideProps)(defaults.DefaultQueueProps(), { ...props.queueProps, fifo: checkFifo });
        }
        else {
            // If no property overrides, deploy using the default configuration
            queueProps = defaults.DefaultQueueProps();
        }
        if (props.constructQueueProps) {
            queueProps = (0, utils_1.overrideProps)(queueProps, props.constructQueueProps);
        }
        // Determine whether a DLQ property should be added
        if (deadLetterQueue) {
            queueProps.deadLetterQueue = deadLetterQueue;
        }
        // Set encryption properties.
        // Note that defaults.DefaultQueueProps sets encryption to Server-side KMS encryption with a KMS key managed by SQS.
        if (props.queueProps?.encryptionMasterKey) {
            queueProps.encryptionMasterKey = props.queueProps?.encryptionMasterKey;
        }
        else if (props.encryptionKey) {
            queueProps.encryptionMasterKey = props.encryptionKey;
        }
        else if (props.encryptionKeyProps || props.enableEncryptionWithCustomerManagedKey === true) {
            queueProps.encryptionMasterKey = (0, kms_helper_1.buildEncryptionKey)(scope, id, props.encryptionKeyProps);
        }
        // NOSONAR (typescript:S6330)
        // encryption is set to QueueEncryption.KMS_MANAGED by default in DefaultQueueProps, but
        // Sonarqube can't parse the code well enough to see this. Encryption is confirmed by
        // the 'Test deployment without imported encryption key' unit test
        const queue = new sqs.Queue(scope, id, queueProps); // NOSONAR
        applySecureQueuePolicy(queue);
        // Return the queue
        return { queue, key: queue.encryptionMasterKey, dlq: deadLetterQueue };
    }
    else {
        // If an existingQueueObj is specified, return that object as the queue to be used
        return { queue: props.existingQueueObj };
    }
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function CheckBuidQueueProps(props) {
    if ((props.queueProps?.encryptionMasterKey || props.encryptionKey || props.encryptionKeyProps)
        && props.enableEncryptionWithCustomerManagedKey !== true) {
        (0, utils_1.printWarning)(`Ignoring enableEncryptionWithCustomerManagedKey because one of
     queueProps.encryptionMasterKey, encryptionKey, or encryptionKeyProps was already specified`);
    }
    let errorMessages = '';
    let errorFound = false;
    if ((props.deployDeadLetterQueue === false) && props.maxReceiveCount) {
        errorMessages += 'Error - MaxReceiveCount cannot be set if deployDeadLetterQueue is false.\n';
        errorFound = true;
    }
    if (errorFound) {
        throw new Error(errorMessages);
    }
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function buildDeadLetterQueue(scope, id, props) {
    if (!props.existingQueueObj && (0, utils_1.CheckBooleanWithDefault)(props.deployDeadLetterQueue, true)) {
        // Create the Dead Letter Queue
        const buildQueueResponse = buildQueue(scope, `${id}-dlq`, {
            queueProps: (0, utils_1.consolidateProps)({}, props.deadLetterQueueProps, props.constructDeadLetterQueueProps),
            deployDeadLetterQueue: false // don't deploy a DLQ for the DLG!
        });
        const mrc = (props.maxReceiveCount) ? props.maxReceiveCount : defaults.defaultMaxReceiveCount;
        // Setup the Dead Letter Queue interface
        const deadLetterQueueObject = {
            maxReceiveCount: mrc,
            queue: buildQueueResponse.queue
        };
        // Return the dead letter queue interface
        return deadLetterQueueObject;
    }
    // Typescript requires this return statement, so disabling SonarQube warning
    return; // NOSONAR
}
function applySecureQueuePolicy(queue) {
    // Apply queue policy to enforce only the queue owner can perform operations on queue
    queue.addToResourcePolicy(new aws_iam_1.PolicyStatement({
        sid: 'QueueOwnerOnlyAccess',
        resources: [
            `${queue.queueArn}`
        ],
        actions: [
            "sqs:DeleteMessage",
            "sqs:ReceiveMessage",
            "sqs:SendMessage",
            "sqs:GetQueueAttributes",
            "sqs:RemovePermission",
            "sqs:AddPermission",
            "sqs:SetQueueAttributes"
        ],
        principals: [new aws_iam_1.AccountPrincipal(aws_cdk_lib_1.Stack.of(queue).account)],
        effect: aws_iam_1.Effect.ALLOW
    }));
    // Apply queue policy to enforce encryption of data in transit
    queue.addToResourcePolicy(new aws_iam_1.PolicyStatement({
        sid: 'HttpsOnly',
        resources: [
            `${queue.queueArn}`
        ],
        actions: [
            "SQS:*"
        ],
        principals: [new aws_iam_1.AnyPrincipal()],
        effect: aws_iam_1.Effect.DENY,
        conditions: {
            Bool: {
                'aws:SecureTransport': 'false'
            }
        }
    }));
}
function CheckSqsProps(propsObject) {
    let errorMessages = '';
    let errorFound = false;
    if (propsObject.existingQueueObj && propsObject.queueProps) {
        errorMessages += 'Error - Either provide queueProps or existingQueueObj, but not both.\n';
        errorFound = true;
    }
    if (propsObject.queueProps?.encryptionMasterKey && propsObject.encryptionKey) {
        errorMessages += 'Error - Either provide queueProps.encryptionMasterKey or encryptionKey, but not both.\n';
        errorFound = true;
    }
    if (propsObject.queueProps?.encryptionMasterKey && propsObject.encryptionKeyProps) {
        errorMessages += 'Error - Either provide queueProps.encryptionMasterKey or encryptionKeyProps, but not both.\n';
        errorFound = true;
    }
    if (propsObject.encryptionKey && propsObject.encryptionKeyProps) {
        errorMessages += 'Error - Either provide encryptionKey or encryptionKeyProps, but not both.\n';
        errorFound = true;
    }
    if ((propsObject?.deployDeadLetterQueue === false) && propsObject.deadLetterQueueProps) {
        errorMessages += 'Error - If deployDeadLetterQueue is false then deadLetterQueueProps cannot be specified.\n';
        errorFound = true;
    }
    const isQueueFifo = propsObject?.queueProps?.fifo;
    const isDeadLetterQueueFifo = propsObject?.deadLetterQueueProps?.fifo;
    const deployDeadLetterQueue = (0, utils_1.CheckBooleanWithDefault)(propsObject.deployDeadLetterQueue, true);
    if (deployDeadLetterQueue && (isQueueFifo !== isDeadLetterQueueFifo)) {
        errorMessages += 'Error - If you specify a fifo: true in either queueProps or deadLetterQueueProps, you must also set fifo: ' +
            'true in the other props object. Fifo must match for the Queue and the Dead Letter Queue.\n';
        errorFound = true;
    }
    if (errorFound) {
        throw new Error(errorMessages);
    }
}
//# sourceMappingURL=data:application/json;base64,