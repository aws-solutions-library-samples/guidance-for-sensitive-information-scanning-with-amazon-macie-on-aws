#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ts_morph_1 = require("ts-morph");
const command_line_args_1 = __importDefault(require("command-line-args"));
const command_line_usage_1 = __importDefault(require("command-line-usage"));
const TsConfig = __importStar(require("tsconfig"));
const index_1 = require("./index");
const optionList = [
    {
        description: 'A JavaScript condition used to automatically return `true` from guard functions, bypassing checks. eg. `process.env.DEBUG === "production"`.',
        name: 'shortcircuit',
        type: String,
        typeLabel: '{underline javascript}',
    },
    {
        defaultOption: true,
        description: 'File(s) to generate guard for. If excluded this will process {italic all} project files.',
        multiple: true,
        name: 'paths',
        type: String,
        typeLabel: '{underline file[]} ...',
    },
    {
        description: 'Generate checks for all exported types, even those not marked with comment',
        name: 'export-all',
        type: Boolean,
    },
    {
        description: 'Adds TypeGuard import to source file, to also export TypeGuard from source use with --import-guards. Optionally accepts a string to choose custom import alias.',
        name: 'import-guards',
        typeLabel: '{underline TypeGuard}',
        type: String,
    },
    {
        description: 'Add extension to import statements in the generated guards file. Useful for adding .js extension for ESM resolution.',
        name: 'import-extension',
        typeLabel: '{underline extension}',
        type: String,
    },
    {
        description: 'Allows customisation of the filename for the generated guards file',
        name: 'guard-file-name',
        type: String,
        typeLabel: '{underline extension}',
    },
    {
        description: 'Overrides the default behavior for --import-guards by skipping export from source.',
        name: 'prevent-export-imported',
        type: Boolean,
    },
    {
        description: 'Path to `tsconfig.json`.',
        name: 'project',
        type: String,
        typeLabel: '{underline file}',
    },
    {
        alias: 'h',
        description: 'Print this usage guide.',
        name: 'help',
        type: Boolean,
    },
    {
        alias: 'd',
        description: 'Include debug logs in generated type guards.',
        name: 'debug',
        type: Boolean,
    },
];
const options = {
    paths: [],
    help: false,
    ...(0, command_line_args_1.default)(optionList),
};
async function run() {
    const project = await TsConfig.resolve(process.cwd(), options.project);
    if (project === undefined) {
        console.error('Could not find tsconfig');
        return;
    }
    if ('import-guards' in options) {
        if (!options['import-guards']) {
            options['import-guards'] = 'TypeGuards';
        }
        try {
            eval(`const ${options['import-guards']} = true`);
        }
        catch (error) {
            console.log('Please pass a valid import alias');
            throw error;
        }
    }
    try {
        await (0, index_1.generate)({
            paths: options.paths,
            processOptions: {
                debug: options.debug,
                exportAll: options['export-all'],
                importGuards: options['import-guards'],
                importExtension: options['import-extension'],
                preventExportImported: options['prevent-export-imported'],
                shortCircuitCondition: options.shortcircuit,
                guardFileName: options['guard-file-name'],
            },
            project,
        });
        console.log('Done!');
    }
    catch (error) {
        if (error instanceof ts_morph_1.FileNotFoundError) {
            console.error(error.message);
        }
        else {
            throw error;
        }
    }
}
if (options.help) {
    const { name, version, description } = require('../package.json');
    console.log((0, command_line_usage_1.default)([
        {
            header: `${name} ${version}`,
            content: description,
        },
        {
            header: 'Options',
            optionList,
        },
    ]));
}
else {
    run();
}
